Befekadu Mezgebu Temere

Responsive Web Application Using Bootstrap
and Foundation
Comparing Bootstrap and Foundation Frontend Frameworks

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Programme Information Technology
Thesis
01 June 2017

Abstract

Author(s)
Title

Befekadu Mezgebu Temere
Responsive Web Application Using Bootstrap and Foundation

Number of Pages
Date

38 pages + 3 appendices
01 June 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Web development, Networking

Instructor(s)

Patric Ausderau, Senior Lecturer

The main purpose of this paper was to study the responsive web application designing
method using Bootstrap and Foundation frontend frameworks. Moreover, the two frameworks were compared to choose the more productive and efficient one. As a result, a website
for Daniel Mengistu law office was built and launched using the chosen framework.
Even if there are frameworks with high quality typography, forms, buttons, and other interface components, Bootstrap and Foundation are popular frontend frameworks. They are
written in HTML, CSS, LESS, SASS and JavaScript which makes designing a user interface
simple. Moreover, online tools and parameters were used to measure the project website’s
loading speed, cross-browser compatibility, community, customization and other theoretical
features.
The outcome of the analysis and tests was that Bootstrap was best suited for this specific
project and the planned goal for the thesis was achieved. However, the outcome does not
dictate that Bootstrap is always better than Foundation. But it will help to give programmers
a better insight about the two frameworks to make informed decisions. Furthermore, it is
recommended that programmers conduct research before deciding the right frontend framework for themselves and compare other frameworks such as React and Angular as well.
Keywords

HTML, CSS, JavaScript, Bootstrap, Foundation, Frameworks,
Frontend, Responsive

Contents
1

Introduction

1

2

Frontend Responsive Web Design Technologies

2

2.1

HTML5

2

2.2

CSS3

4

3

4

2.2.1

CSS Frameworks

5

2.2.2

CSS Preprocessor

6

2.3

JavaScript and JQuery

9

2.4

Twitter Bootstrap

10

2.5

Zurb Foundation

11

2.6

Bootstrap Versus Foundation

13

Design Methods and Tools used in the Project

16

3.1

Designing phase and requirement specification

16

3.2

Software installation and development process

18

3.3

Project file structures

19

Test Results

21

4.1

User Interfaces

21

4.2

Performance optimization of the project websites

22

4.3

Community and support

24

4.4

Google trend and Builtwith trend

25

4.5

Cross browser Testing

28

4.6

Webpage loading speed

29

4.6.1

Pingdom

29

4.6.2

GTmetrix

30

4.6.3

Google Page Speed Insights

31

5

Discussion

33

6

Conclusion

35

References
Appendices
Appendix I. Bootstrap Website HTML code
Appendix II. Foundation Website HTML code
Appendix III. Bootstrap and Foundation Websites Mobile View

36

Abbreviations and Terms

API

Application program interface

Ajax

Asynchronous JavaScript and XML

CERN

European Organization for Nuclear Research

CLI

Command Line Interface

CSS

Cascading Style Sheets

DOM

Document Object Model

ES6

ECMAScript 6

GPU

Graphics Processing Unit

HTML

Hypertext Markup Language

IE

Internet Explorer

IETF

Internet Engineering Task Force

JS

JavaScript

LESS

Write Less Do More Stylesheet Language

Mac

Mackintosh

MB

Megabyte

ms

milliseconds

px

pixel

SASS

Syntactically Awesome Stylesheets

UI

User Interface

URL

Uniform Resource Locator

W3C

World Wide Web Consortium

WHATWG

Web Hypertext Application Technology Working Group

XML

Extensible Markup Language

1

1

Introduction

Nowadays, web development is much simplified because of the emergence of different
frontend frameworks. In the last few years, dozens of frontend frameworks have become
available for web developers and to mention a few Bootstrap, Foundation and Semantic
User Interface (UI) are some of them. This thesis will focus mainly on two frontend frameworks, which are Bootstrap and Foundation. They are Hypertext Markup Language
(HTML), Cascading Style Sheets (CSS) and JavaScript frontend frameworks, which are
retailed to develop responsive websites.

Responsive website design is about building a website with a grid-based layout, resizable images and media queries. Responsive design frameworks began to emerge by incorporating those principles mostly on CSS and JavaScript. Many of these frameworks
are open-source and quickly customizable. The most popular ones today are Bootstrap
and Foundation and those will be the focus of this thesis.

The specific purpose of this thesis is to use Bootstrap and Foundation frontend frameworks in a website thus resulting in responsive behaviour on various computing devices.
In order to achieve this, a practical project work was carried out to build the website of
Daniel Mengistu Law office. The project utilized HTML5, CSS3, JavaScript, JQuery and
the two front end frameworks mentioned above, and by using these frameworks two
separate websites were built. At the end, the website with the most efficient performance
was implemented and launched as the official website of the client.

To illustrate, the client website is called Daniel Mengistu law office and it is a legal practice firm founded in Addis Ababa, Ethiopia and it offers specialized legal services for both
local and international clients. In this project, as informed by the client, the design of the
website to be created is expected to look clear and be user-friendly. In addition, it has to
be responsive as most of the local clients of the firm are using the phone to browse the
web. Furthermore, the website loading speed is expected to be fast and cross-browser
compatible.

2

2

Frontend Responsive Web Design Technologies

Frontend frameworks make the web development process efficien. Front end frameworks contain templates written in HTML, CSS, Stylesheet Language (LESS), Syntactically Awesome Stylesheets (SASS) and JavaScript that make designing a user interface
easier. [1]
2.1

HTML5

HTML is the structure of the website. It is also being called the World Wide Web's markup language. HTML is used for structure and presenting content of the world wide web.
An HTML document can provide information for browsers such as what style to use and
where to get it. CSS is a stylesheet language that describes the presentation of an HTML
document. [2]
The first HTML4 emendation took place in 1997. However, after that the world’s internet
traffic has increased by several hundred-folds, and constant HTML updates have become essential. Furthermore, websites like YouTube have gone mainstream and watching TV or listening to music online has become the norm and most web browsers have
started to rely on plugins and other resource hogging elements. As a result, the upgrading of HTML4 to HTML5 took place which established a proper handling for new contents. [3]

The last version of HTML5 was released in 2008. In mid-2012, a new editing team was
introduced at the World Wide Web Consortium (W3C) to take care of creating an HTML5
recommendation and prepare a Working Draft for the next HTML version. [2] In October
2014 HTML5 was devised with two things in mind. The first one was the importance of
cascading interactive elements in websites and web applications and the second one
was the need for audio and video tags due to the increased number of people accessing
audio and video services through the web by using mobile phones. Furthermore, the
emergence of HTML5 increased the performance and decreased the battery drain. [3]

The Web Hypertext Application Technology Working Group (WHATWG) continued working on a living Standard for HTML. This resulted in constant maintenance of the specification and improving the features of HTML5. [2]

3

With these improvements, browsers that support HTML5 now have better support for
vector graphics which are commonly used for images other than photographs. Vector
graphics can be resized without losing any quality making and their usage is increasingly
popular in modern websites that are designed to be displayed correctly on everything
from phone all the way to TV screen. Moreover, the improved HTML5 also offers better
support for things like drag and drop and online documents. Besides these, the improved
HTML5 has video editing which is increasingly important for emergence of more features
on a web browser such as photo sharing and online file storage. [3] HTML DOM structure
is shown in figure 1.

Figure 1 Document Object Model(DOM). Copied from w3school (2017) [4].

As illustrated in figure 1, HTML is the language of the web and it has a specific syntax
and rules. The browser turns the HTML tag in to elements that form a tree. This is because HTML is utilizing Document Object Model (DOM) which is a standard convention
for representing and interacting with elements in HTML. In addition, HTML5 semantic
elements describe for browsers and developers the meaning of the elements. HTML5
semantic elements are shown in figure 2.

4

Figure 2 HTML5 Semantic Elements. Reprinted from W3schools (2017) [5].

As figure 2 illustrates, the new semantic elements of HTML5 has six elements. The top
of the semantic is the header of the document followed by the navigation. Below the
navigation, there are sections, articles and aside parts. Finally, the bottom part of the
document is footer. Moreover, the HTML5 semantic is supported by all modern browsers
and the semantic element explains its meaning for the browser, developer and accessibility users.

2.2

CSS3

CSS is the language which controls the presentation of HTML and its latest version is
CSS3, which is completely backward-compatible with the earlier versions of the CSS. [6]
Moreover, currently the CSS4 module is under development [7]. It helps to give a different design to the HTML presentation and to change the colours, layout and fonts of the
application. In addition, CSS is the style of the website and it allows using a specific
syntax and rules to change how the element looks like in the page, the size of the font,
colour, background, border, positions and so forth. [2] The CSS Box model is shown in
figure 3.

5

Figure 3 CSS Box Model. Copied from W3school (2017) [8].

As shown in figure 3, it depicts the diagrammatic representation of the CSS stylesheet.
In other words, it is the way of representing HTML by different stylesheet and it is called
CSS Box Model. Hence, it gives different styles to all HTML content such as padding,
border and margin.

CSS has two essential tools that enable web developers to save time in building websites. These are CSS Framework and CSS preprocessors. These tools which are vital
for CSS are explained in detail below.

2.2.1

CSS Frameworks

CSS frameworks are a collection of CSS classes that make page layout easy to implement. A framework is a package composed of structured files and folders code. In addition, it simplifies and supports the website design process and it is a base to start building
a website. [9]

Choosing the right CSS framework consists of different criteria. Among these, the first
one is the speed of the installation of the frameworks. Some are easy and fast to install
and use, but others take time to install and configure. The second one is that easiness
of learning about the specific framework. Some frameworks are complicated and difficult
to handle but others are easy and straight forward. The third criterium for choosing the

6

right CSS framework is easiness in configuration options and integrability with other systems. The last criterium is the availability of long term support for the specific framework.
It is better to rely on those frameworks that have continued updates and support. [9]
2.2.2

CSS Preprocessor

Developers use CSS preprocessors to build CSS faster. In addition, preprocessing is a
method of extending the feature set of CSSs by first writing the style sheets in a preprocesses language. Following that, it compiles the code to pure CSS syntax using a computer compiler. A compiler is a computer program that transforms source code written in
a programming language into another computer language, byte code. There are two
types of CSS preprocessors: SASS and LESS. [10]

SASS stands for Syntactically Awesome Style sheets which is an extension of CSS. It
adds nested rules, variables, mixins, operators, selector inheritance and more. Furthermore, it is translated to a well-formatted, standard CSS using the command line tool or
web-framework plugin. [10]

On the other hand, LESS stands for Write Less Do More (LESS) language. LESS provides the following mechanism: variables, nesting, mixins, operators and functions.
LESS is convertible to standard CSS through JavaScript or using an application. [10]

Variables in SASS and LESS are very important features of CSS. Web developers define
variables using the $ sign in case of SASS where as they use @ in the later case. Nevertheless, values are assigned using colon (:) in both applications. A screenshot of SASS
and LESS variable application is shown in figure 4. [11]

Figure 4 How to use SASS(left) and LESS(right) variables. Copied from htmlmag (2014) [11].

7

As illustrated in figure 4, in both SASS and LESS the font-size variable is defined once
and used throughout the document. [11]

On other hand, mixins is another important feature of CSS. Mixins are a category of
definitions compiled which is depending on some parameters or static rules. Moreover,
mixins are able to write CSS arrows or background gradients and other parameters. [11]

Figure 5 How to use SASS(left) and LESS(right) mixins. Copied from htmlmag (2014) [11].

Screenshot of SASS and LESS mixins application are illustrated in figure 5. It is a set of
definitions that compiles according to some parameters or static rules written on a crossbrowser background. In both cases the border is defined in the CSS document. [11]

Nesting gives a structural and visual hierarchy in HTML. In addition, it improves the readability as well. This is because CSS is deficient in defining visual hierarchy in a process
of working in child selectors. [11] Screenshots of SASS and LESS nesting application
are illustrated in figure 6.

8

Figure 6 How to use SASS(left) and LESS(right) nesting. Copied from htmlmag (2014) [11].

As can be seen in figure 6, SASS and LESS have similar nesting. The main purpose of
nesting is to oversize selectors and to improve readability. This is possible because nesting gives more visual hierarchical features for the HTML. [11]

9

2.3

JavaScript and JQuery

JavaScript was created in May 1995 by Brendan Eich in just 10 days. JavaScript used
to be called Mocha, named by Marc Andreessen, the founder of Netscape. Then the
name changed again to LiveScript in September 1995. Moreover, in the same year when
the trademark was registered, the current name, JavaScript, was finally adopted. [12]

Concerning its use, JavaScript is the interactive and functionality component of the website. Furthermore, it is an untyped language, unlike many other languages. Many JavaScript commands are known as event handlers, which means they can be embedded right
into existing HTML commands. Regarding the function of JavaScript, it changes HTML
content, attributes and CSS style. Besides, it hides and shows the HTML elements. [12]

Moreover, JavaScript runs where it is found in the HTML and stored in two ways: internally or externally. [8] Internally, JavaScript can be written either inside the head or body
tag of an HTML document using <script> </script> tags. On the other hand, externally, JavaScript can be written in a separate document and saved as .js file. After
that, the file extension should be included in the HTML document. [12]

JQuery is a fast and concise JavaScript library that simplifies an HTML document. Some
of the functionalities of JQuery are traversing, event handling, animating and Ajax interaction. In addition, it goes much simpler with an easy-to-use Application Program Interface (API) that works across a multitude of browsers for rapid web development. Furthermore, it is a lightweight JavaScript library that simplifies programming with JavaScript. [13]

10

2.4

Twitter Bootstrap

Bootstrap was created by Twitter developers, Mark Otto and Jacob Thornton. It was initially released to the public in 2011 as an open source framework. It was also called as
Twitter Blueprint. Now Bootstrap is a well-known open-source frontend framework in the
world. It is used in the Twitter website. A screenshot of the original Twitter Blueprint is
shown in figure 7. [14]

Figure 7 Twiitter Blueprint in 2011. Reprinted from Chris Aniszczyk (2013) [15].

Bootstrap is a powerful frontend development framework that includes HTML, CSS and
JS components. Moreover, it is used for building mobile first responsive websites of all
size and complexity. Mobile first means web applications created with smaller screen
sizes in mind first and then tweaked for larger screen sizes. In addition, it has ready to
use responsive themes and templates as a starting point for any web project. [14]

In addition to that, the Bootstrap framework is upgraded constantly by the Bootstrap
community. The current stable release of Bootstrap is version 3.3.7. However, Bootstrap
4 is in alpha version. Bootstrap is a constantly upgraded framework to use SASS as its
CSS preprocessor. [14]

Bootstrap uses a 12-column responsive grid system and features, dozens of components, styles and JavaScript plugins. In addition, it has a basic global display, typography

11

and link styles. Moreover; by using the customizer Bootstrap can be suited for a specific
web project by adjusting variables, components, JavaScript plugins and more. It is possible to expand Bootstrap by using a wealth of resources, including themes and interfaces and building tools. [14]

Bootstrap takes the one framework, every device approach. It can easily and efficiently
scale websites and applications with a single code base. That means anything from
phones to tablets and to desktops with CSS media queries. By using Bootstrap, extensive and beautiful documentation for common HTML elements can be found. In addition,
dozens of custom HTML and CSS components and jQuery plugins are also found. [14]

2.5

Zurb Foundation

Foundation is created by the web design company Zurb. It is a web design company with
over 15 years of experience in the web design industry. Foundation is an advanced enterprise framework. In addition, it is used as a frontend framework in websites like eBay,
Facebook, and Firefox-Mozilla. [16]

Moreover, Foundation is used for building website frontends as well as user interfaces
for web and mobile applications. More specifically, this means features like menus, buttons and lists. Foundation uses a mobile first design which is similar to a twitter bootstrap
design pattern. Moreover, it gives faster user interface and user experience development, with no need to create all of HTML, CSS classes and styling from scratch. In addition, the style button also just pops in the class name and Foundation gives smarter
and cleaner code. Further, it is very semantic which means it uses all the appropriate
naming conventions and then the web elements are laid out nicely. [16]

Foundation is mobile first and runs on a SASS CSS pre-processor. The focus to build
optimized websites is never lost with the use of Foundation. Some of the key features
that Foundation came up with were for building lightning fast websites with data-interchange, Fastclick.js, Off Canvas Navigation and Graphics Processing Unit (GPU) Acceleration. The Foundation custom download table is presented in figure 8.

12

Figure 8 Foundation Custom download table. Copied from Zurb Foundation (1998) [17].

Currently the latest stable Foundation framework is Foundation 6. This framework gives
40-50% code reduction compared to the previous version. [16] In addition, it has Custom
download options as illustrated in figure 8.

13

2.6

Bootstrap Versus Foundation

To mention similar and a few different features of the two frameworks, SASS and mixins
are used both by Bootstrap and Foundation and also both of them use the grid system.
Moreover, reboot.css1 is used to reset Bootstrap and normalize.css2 is used for Foundation. In addition, the 12 columns fluid for both frameworks have the maximum width of
75em. [9] The overall theoretical summary of Bootstrap 4 and Foundation 6 frontend
frameworks is illustrated in detail in table 1.

1
2

Collection of element specific CSS changes in a single file. [14]
Removes quirks in browsers in all Foundation websites which render elements consistently. [16]

14

Table 1 Summary and overview of Bootstrap 43 versus Foundation 64. Modified from Vermilion design and
Digital (2015) [18].

3
4

https://v4-alpha.getbootstrap.com/
http://foundation.zurb.com/sites

15

As illustrated in table 1, Bootstrap and Foundation moved from pixels (px) to rem and
then to em. Px is a static size measurement unit used for scaling of objects in a screen.
The accustomed size unit was used by designers for several years due to its translatability. Furthermore, it is easy to resize the photo directly from photoshop to design. On
the other hand, Rems are methods of setting font-sizes depending on the font-size of the
root HTML tag. It helps to scale up or down the entire project only by changing the root
font-size. Finally, em is used to perform in a similar way with rems till nesting comes. [14]

Both rem and em are flexible and scalable units translated by browser into px. In addition,
em and rem are scalable units used for different screen sizes during responsive web
application design. Moreover, the main difference between them is that in rem when the
browser translates it to px, the root font size is multiplied by the number in the rem unit.
However, in case of em, when the browser changes or translates it to px, the value is
multiplication of the font sizes of the elements. [14]

16

3

3.1

Design Methods and Tools used in the Project

Designing phase and requirement specification

The web designing phases in this project were wireframing, layout and spacing, navigation, colours, fonts, icons, imagery and others. Wireframing is basically a visual guide for
client presentation of the website and in this project the wireframe was created by Microsoft PowerPoint. The resources used for web font in this project were taken from
Google fonts5 where there are tons of free and easy to use web fonts. In addition, colours
used in the web designing process of this project were also taken from Flat UI colours6
and Adobe UI color-wheel7. Moreover, icons used in this web design project were taken
from Iconicons8 and from Fortawesome9. Further, most of the images used in this project
were taken from thestocks10 where all free categorized images for web design can be
found in one place.

As wireframing is a visual guide for client presentation of the website which allows defining the information hierarchy of a web design. Further, it helps the client to see how the
website looks at the end. A screenshot of the wireframing of this project website is depicted in figure 9 and the wireframing shown was drawn by using Microsoft PowerPoint.

5https://www.google.com/fonts
6

http://flatuicolors.com/
https://color.adobe.com/create/color-wheel/
8 http://ionicons.com/
9 https://fortawesome.github.io/Font-Awesome/
10 http://thestocks.im/
7

17

Figure 9 Screenshot of wireframe of the project websites with important components.

According to the wireframe design illustrated in figure 9, the websites will be built using
the two frameworks having the following sections according to the wireframe: header,
body and footer. The header will be on the top of the page which further will contain a
navigation bar with navigation buttons and a logo. There will be a navigation bar which
contains 5 navigation items such as home, practice, testimonial, attorneys and contacts.
On the body of the page, there is going to be the title and description of the website with
a background image. In addition, at the footer section, there will be social media and
copyright icons.

Furthermore, the requirements or important things considered during the designing of
this project were responsiveness and cross browser compatibility. In addition, customizability of the two frontend frameworks was considered. Moreover, the website loading
speed of the project websites was also taken into account.

18

3.2

Software installation and development process

During the development process Windows 10 operating system, Windows 10 Command
Line Interface (CLI), bracket editor and Google Chrome browser with its developer tool
were used as a development environment. The different software, which are vital for the
development of the project, were downloaded and installed to set up the development
environment.

Once the programming phase started, the standard text processing application or code
editor was downloaded and installed. Bracket editor was used in this project from a
selection of code editors available online because it is an open source code editor with
helpful features. Among these features, the first one is it has many extensions available
to install which makes the web design process easy. The second one is that this editor
has nice features built in colour highlighters like HTML, CSS and JS syntax while working
out a long document. And the last one is that it manages multiple open documents in
tabs. As a result, it is easily possible to work on several files at the same time which is
an important feature in a web design process.

After describing the required features and preparing the development environment was
completed, the next thing was downloading the latest Bootstrap 4 and Foundation 6
frameworks from the official websites of the respective frameworks. The download package contains everything in the framework including typography, grid, HTML elements,
CSS components, CSS preprocessors and JQuery plugins. After that, important fonts
were downloaded and saved in the same folder with the images and contents of the
project folder.

Regarding browsers, any web browsing applications were possible including for example
Chrome, Safari, Firefox or Explorer. However, the web browser used for this project was
Google Chrome. Google Chrome contains developers’ tools and helpful Chrome extensions and other features for a web design process [14].

To conclude, as discussed in chapter 1, the website built in this project is for Daniel
Mengistu Law office. The requirement specifications for the website were provided by
the company. As a result, the contents of the website are included in the same project
folder.

19

3.3

Project file structures

Both Bootstrap and Foundation have default file structures. The default file structures
are not mandatory but it is important to follow the common practice. In this project, the
common bootstrap and foundation file structures were used. In figure 10, the file structures of the two frameworks are presented. They have almost similar listings with minor
differences.

Figure 10 Comparison of file structures of the Bootstrap (left) and Foundation (right) project folders.

20

As shown in figure 10, both Foundation 6 and Bootstrap 4 consist of SASS CSS preprocessor. However, Bootstrap 3 dwells LESS stylesheets [11]. Bootstrap is a freely downloadable framework containing HTML, CSS and JavaScript. The downloaded folder composed of directories and files with minified CSS versions of them is also included as
depicted in figure 10.

In addition, Bootstrap allows us to download the full package or the customized one. As
a result, the customized one is downloaded according to the elements that are needed
in any specific project. In the same way, Foundation has a customized download option.
The customized download option, by decreasing the download size, improves the download speed of the website. However, in this project the full package Foundation and
Bootstrap download was performed, as illustrated in the above directories and files. In
addition, grouping JS and CSS together with minified versions were included in the
download. All the folders and source codes for both Bootstrap11 and Foundation12 websites can also be accessed from the GitHub.

To conclude, the process of setting up everything for developing the websites was
started by creating good folder structures where the files are kept in a very organized
way. Following that, the real coding process was commenced by using bracket editor.
After that, the project website sections were built step by step for both frameworks. The
sections built in the project were “Header”, “Areas of practice”, “Testimonials”, “Attorneys”, “Contact” and “Footer”.

11
12

https://github.com/Befekadu-Mezgebu/Bootstrap-project-1
https://github.com/Befekadu-Mezgebu/Foundation-Project-1

21

4

Test Results

The website designed for Daniel Mengistu Law office is a mobile first responsive design
and the application user interface was designed by HTML5, CSS3, JavaScript, Bootstrap
and Foundation frameworks. In this project only the frontend of the website was developed. In addition, the requirement set for the project in chapter 3 was applied during the
development.
4.1

User Interfaces

The web application built was responsive to different screen sizes. Figure 11 presents
the desktop view of the Bootstrap and Foundation websites consecutively. The mobile
versions of the websites are available in Appendix III. As illustrated in figure 11, it shows
the final desktop version of the real responsive websites and the websites built were
working flawlessly.

22

Figure 11 Screenshots of the desktop versions of the Bootstrap (top) Foundation (bottom) Websites homepage.

The website contains a header, a navigation bar, content and a footer. The navigation
bar contains links to Home, Areas of Practice, Testimonials, Attorneys and Contact
pages of the website. Moreover, on each page the content of the website contains title,
description and background image for the website.
4.2

Performance optimization of the project websites

Enhancing page speed is the most important thing in a web development process. Website speed has real impact on user engagement because many users do not want to wait
for slow websites to load. The two most basic techniques for speeding up websites are
optimizing heavy images and minifying CSS and jQuery code. [1] Both the Bootstrap and
Foundation websites had gone through the performance optimization techniques before
they were tested. As a result, this step was performed before the implementations of the
websites.

All the images in the project folders were optimized by reducing the file sizes of the images using online image compressor tools. From different compressor tools available

23

online, Optimizilla13 and Tinypng14 are used in this project. Tinypng is used for the Bootstrap website image optimization and Optimizilla for the Foundation website image. A
screenshot of sample images optimized by using Tinypng is presented in figure 12.

Figure 12 Screenshot of the optimized image of the Bootstrap website using Tinypng. Generated from Tinypng (2017) [19].

As can be seen in Figure 12, the size of the images of the Bootstrap website were minimized and the total optimization found using this tool was 65% or 2 MB of the total size.
In the same way, the image sizes of the Foundation website were compressed using the
same tools.

The other optimization technique used was minify CSS jQuery files. This basically reduced the size of the CSS and jQuery files by removing unneeded white spaces and

13
14

http://optimizilla.com/
https://tinypng.com/

24

optimizing the codes. The online tools used for this technique were minifycss15 and minifyjavascript16.

4.3

Community and support

GitHub stars, GitHub watch, GitHub Forks and Stack Overflow search results were used
to measure the community and support of the frameworks. Table 2 compares the popularity of the two frontend frameworks. The GitHub activity of the two frameworks is used
for this purpose.
Table 2 Bootstrap versus Foundation GitHub activity. Data collected from GitHub (2017) [20; 21].

GitHub activity

Bootstrap Foundation
</>

Number of watches

</>

6,839

1,497

Number of stars

109,379

25,253

Number of forks or download

50,282

5,539

Both Bootstrap and Foundation frameworks are active on Github. As illustrated in table
2, Bootstrap has 4 times more stars than Foundation framework. In addition, Bootstrap
has got twice the number of forks or downloads compared to the Foundation framework.
Furthermore, Bootstrap has got about 5 times more watches than Foundation. The latest
stack overflow activity results of Bootstrap 4 and Foundations 6 are shown in figure 13.

15
16

http://www.minifycss.com/ZMVbZ/css-compressor/
http://www.minifyjavascript.com/LLcpZ/

25

Figure 13 Screenshots of Stack overflow activities of Bootstrap (top) and Foundation (bottom) frameworks.
Data collected from StackOverFlow (2017) [21;22].

As shown in Figure 13, the search results for Bootstrap 4 was about 3 times more than
the Foundation 6 framework. This indicates Bootstrap is definitely more popular, hence
naturally it has more support and references available. That means people can get support and help in an easier way.
4.4

Google trend and Builtwith trend

Interest over time graph for Bootstrap 4 versus Foundation 6 is illustrated in figure 14.
The graph is a Google trend graph and the numbers represent the search interest results
of the two frameworks. Moreover, the search interest is relative to the highest point on
the chart for the given region and time.

26

Figure 14 Interest over time google trend graph for Bootstrap 4 versus Foundation 6. Generated from Google
Trends (2017) [23].

As figure 14 illustrates, a value of 100 is the peak popularity for the term. A value of 50
means that the term is half as popular. Likewise, a score of 0 means the term was less
than 1% as popular as the peak. Accordingly, the popularity of Bootstrap 4 versus Foundation 6 worldwide during April 24-30, 2016 was 44/11. This means the Google search
interest result relative to the highest point in the chart of Bootstrap 4 for the given region
and time was about 4 times the Foundation 6 result. In addition, during April 16-22, 2017,
it was 59/8. This also means the Google search interest result relative to the highest
point on the chart for the given region and time of Bootstrap 4 was about 7 times the
Foundation 6 result. Moreover, figure 15 shows a BuiltWith trend graph which is a usage
statistics online measuring tool.

27

Figure 15 Builtwith trend of Twitter Bootstrap (top) versus Foundation (down) Usage Statistics.Generated
from Builtwith Trend (2017) [24; 25].

As illustrated in figure 15, 13.2% of the top 100,000 which is approximately around 1,320
websites out of 10,000 were using Bootstrap to power their websites. However, 3.9% of
the top 100,000 which is also approximately around 393 websites out of 10,000 were
using Foundation Framework. This means Bootstrap has got about 3 times more users
compared to Foundation users to power their websites. In addition, as illustrated in figure
15, the statistics goes in similar way for the two frameworks when it comes to the total

28

coverage of the frameworks. Hence, Bootstrap usage out of the entire internet usage
was 3.5% (which is around 12,804,808) and Foundation 0.1% (which is around 237,981).
4.5

Cross browser Testing

There are a lot of different common browser compatibility testing tools. Among these are
CrossBrowserTesting, Browsershots and Browserling to mention a few. However, in this
project the CrossBrowserTesting17 online tool was used. The outcomes of cross browser
testing using the CrossBrowserTesting tool for both websites are shown in figure16.

Figure 16 Screenshots of Cross browser testing of the Bootstrap website (top) versus Foundation website
(bottom). Generated from CrossBrowserTesting (2017) [26].

17

https://crossbrowsertesting.com/

29

Bootstrap and Foundation provide browser support for browsers like Google Chrome,
Firefox, Opera, Safari, IE. However, Foundation does not support IE8 which is the older
browser but Bootstrap 3 supports it. (9) [9] To illustrate more, the Bootstrap website was
tested using Mackintosh (Mac) 10.11 computer with Safari 9 browsers. However, the
Foundation website was tested using Mac 10.11 computer with Opera 44 browsers.
4.6

Webpage loading speed

Webpage loading speed is the most important parameter of website performance measure [26]. The webpage speed of the project websites got checked using different online
testing tools. Webpage speed means measuring the amount of time it takes from the
location of the client until the website loads and on the other hand, measuring the amount
of time it takes to download the source code of a web page.

Page load time shows the time it took for the page to be fully loaded, including external
resources such as images and scripts. In technical terms, it's the window on load event.
Performance grade is the grade the webpage gets according to the Yslow test. In this
thesis three websites loading speed tools were used and they were Pingdom, GTmetrix,
Page Speed Insights consecutively.
4.6.1

Pingdom

The website speed test using Pingdom18 is to analyse the load speed of the websites.
This was performed by entering a URL to test the load time of that page and then by
analysing it and finding the bottlenecks. The performance rates for both Bootstrap and
Foundation websites are illustrated in figure 17.

18

https://tools.pingdom.com/

30

Figure 17 Screenshots of Pingdom Website Speed Test results for the Bootstrap website (top) versus Foundation website (bottom). Generated from Pingdom (2017) [27].

As figure 17 shows, the performance rate for both Bootstrap and Foundation websites
were grade “B” on a grading system from “A” to “F” grading. The full-page loading time
of the Foundation website was higher than the Bootstrap website in this test by 5 milliseconds (ms). However, the relative speed in both cases is so fast that it would be pointless to qualify one as loading faster than the other in this case.
4.6.2

GTmetrix

GTmetrix19 was developed by GT.net. This tool is for managed hosting customers to
easily determine the performance of their sites. This tool gives also actionable insights
on how to optimize the website speed. The GTmetrix Website speed test results for both
Bootstrap and Foundation are illustrated in figure 18.

Figure 18 Screenshot of GTmetrix Website speed test results for both Bootrstrap (left) and Foundation (right)
websites. Generated from GTmetrix (2017) [26].

19

https://gtmetrix.com/

31

As can be seen in figure 18, the GTmetrix speed test showed the PageSpeed score for
the Bootstrap website is 2% lower compared to the Foundation website. The Bootstrap
website has also a lower fully loaded time than that of Foundation. In addition, the total
page size of the Foundation website is higher than the Bootstrap website by 1.23MB.
4.6.3

Google Page Speed Insights

Google PageSpeed Insights20 was the third tool used to analyse the speed of the two
websites. As a result, it helps to optimize websites using the websites best practices.
Web performance tools at Google are browser extensions and APIs for Insights, PageSpeed Service, and optimization libraries.

Page Speed Insights tests the page loading of a web in both mobile and desktop versions. It checks the URL twice, once as a mobile user and then as desktop user. This
tool evaluates the filling of a website, then engenders comments for the web to perform
better. The comparison for Google PageSpeed Insight results of the Bootstrap and Foundation websites are shown in table 3.
Table 3 Comparison for Google PageSpeed Insight results of the Bootstrap (left) and Foundation (right)
websites. Data gathered from Google PageSpeed Insights (2017) [27].

Bootstrap website

Foundation website

Mobile

Desktop

Mobile

Desktop

54/ 100

55 / 100

50 / 100

54 / 100

7 passed rules

6 passed rules

5 passed rules

4 passed rules

Finally, Google’s PageSpeedInsight testing tool results were analysed according to table
3. The Page Speed result for both mobile and desktop is from a score of 0 - 100. A score
of 85 and above indicates that the page is performing excellently. According to table 3,
the Bootstrap website got a higher Page Speed score than the Foundation website on
both mobile and desktop devices. Besides, the Bootstrap website got higher passed

20

https://developers.google.com/speed/pagespeed/insights/

32

rules count than the Foundation website. As a result, there were fewer issues to fix and
to improve scores for the Page Speeds of the Bootstrap framework.

33

5

Discussion

In this chapter, the significance of results found in the previous chapter of the project will
be evaluated and discussed in detail. Also, the results of the project will be placed in the
context of the theoretical background discussed in chapter 2 of this thesis.

As it has been discussed in the theoretical section of this paper, the two frameworks
provide similar features with slight differences. Let us see summarized highlights of the
most important points about the two frontend frameworks.

Both frameworks are open source HTML, CSS and JavaScript frontend frameworks and
they operate with a SASS CSS preprocessor except in the case of Bootstrap 3. In addition, both are mobile first and 12 column grid responsive design frameworks. Moreover,
both have optional flexible box support, ES6 JavaScript components and plugins. Both
frameworks have pre-styled ad ready user interface components.

In addition, Bootstrap and Foundation help to build the user interface faster for web and
mobile applications. This means for example menus, buttons and lists for user experience development. There is no need to create all of HTML, CSS classes and styling from
scratch. The style button just pops in the class name. As explained in chapter 2, both
frameworks have many similar features and as a result it can be said that both frameworks do essentially the same thing in different ways.

According to the result of this research, among the categories that favour one framework
over the other, it was the community and support where Bootstrap clearly got the upper
hand. To mention some relevant facts from the results chapter, Bootstrap framework got
4 times more stars and 5 times more watches than the Foundation framework in GitHub.
In addition, Bootstrap got 3 times more search results in StackOverflow than Foundation.
As a result, Bootstrap got a huge following of designers and developers which means
users are more likely to get support if there are any issues related to the framework.

Moreover, browser support and performance results were very good for both Bootstrap
and Foundation websites with desktop and mobile platforms. The only exception was
that Foundation does not support IE 8. Because IE 8 is an older version of IE, it might
restrict the availability of support. However, only Bootstrap version 3.3.6 can support this
older browser.

34

The website loading speed of the two project websites was tested by using three online
testing tools. As a result, this enabled getting reliable test results. The full-page loading
time of the Foundation website (358 ms) was found higher than the Bootstrap website
(353 ms) in the Pingdom speed test. That means the Bootstrap website is loading faster
than the Foundation website. In addition, it was found that the Bootstrap website had got
lower fully loaded time (2.1 seconds) and total page size (1.3 Megabytes (MB)) compared to the Foundation website (2.4 seconds, 2.54 MB) using the GTmetrix online
speed test tool. In this case, as well, the Bootstrap website was faster than the Foundation counterpart.

Finally, the Bootstrap website got a higher Page Speed score than the Foundation website in both mobile and desktop devices according to the PageSpeedInsights online
speed test tool results. To mention a couple relevant facts from the results chapter, the
Bootstrap website got a higher passed rules count (7) than the Foundation website (5)
on mobile. As a result, this means lesser things to fix in order to get improved results of
the Page Speed scores. Moreover, Bootstrap performed better in the website speed test
results (Mobile 54% efficiency, Desktop 55% efficiency) than Foundation (Mobile 50%
efficiency, Desktop 54% efficiency).

To conclude, based on the discussion above and on the results gained in the previous
chapter, Bootstrap was the best candidate for the purposes of this project. Accordingly,
the website was built using the Bootstrap frontend framework and launched as an official
website for the client.

35

6

Conclusion

Frontend frameworks help to simplify designing process in powerful ways. Essentially, a
frontend framework contains templates written in HTML, CSS, LESS, SASS and JavaScript that make designing a user interface much simpler. Bootstrap and Foundation are
popular front-end frameworks. [1]

As a result, both save development time, are mobile first designs and are responsive
applications for web application. The project web development process focused only on
the frontend part of the website. The technologies used are HTML5, CSS3, jQuery and
JavaScript where Bootstrap and Foundation frontend frameworks were implemented for
responsiveness and interactivity of the website.

In this project, two responsive websites using Bootstrap and Foundation frameworks
were built. Then different online website performance testing tools and parameters were
used to choose the right front end framework for the project. The online testing tools and
parameters used to measure the performance of the websites were loading speed and
cross browser compatibility test. Moreover, the other parameters used for comparison
were popularity & community, customization and other theoretical features.

At the end of the project, the better frontend framework for the project needed to be
chosen. As a result, based on the test and theoretical discussion done in this thesis, the
Bootstrap framework won over Foundation for the specific purposes of the project.

However, based on the result of this research it does not necessarily mean that Bootstrap
is better than Foundation. The result of the research was such because the research
was based on the specific purpose of the project and personal preference. Moreover,
this thesis will help to give programmers a better insight about the two frontend frameworks and enable them to make an informed decision. Their decision should be based
on their project at hand, personal preferences and comfort level. At the end, it is recommended that programmers will need to conduct research before deciding the right
frontend framework for themselves. In addition, it is also recommended for programmers
to compare other frontend frameworks such as React and Angular as well.

36

References
1. CODY ARSENAULT . Top 10 Front-End Frameworks of 2016. Keycdn.com, Web
News & Insights . [Online] [Cited: 06 October 2016.] https://www.keycdn.com/blog/frontend-frameworks/.
2. World Wide Web Consortium,W3C. HTML & CSS. [Online] [Cited: 10 April 2017.]
https://www.w3.org/standards/webdesign/htmlcss.
3. West, Matt. HTML5 Foundation . s.l. : John Wiley &Sons,Incorporated , 2012.
4. w3schools.com. The HTML DOM (Document Object Model). [Online] [Cited: 15 April
2017.] https://www.w3schools.com/js/js_htmldom.asp.
5.

—.

HTML5

Semantic

Elements.

[Online]

[Cited:

12

April

2017.]

April

2017.]

https://www.w3schools.com/html/html5_semantic_elements.asp.
6.

W3School.

W3.CSS

Tutorial.

[Online]

[Cited:

02

https://www.w3schools.com/w3css/.
7. W3C. CSS current work and how to participate . [Online] [Cited: 05 May 2017.]
https://www.w3.org/Style/CSS/current-work.
8.

w3schools.com.

CSS

Box

Model.

[Online]

[Cited:

11

April

2017.]

https://www.w3schools.com/css/css_boxmodel.asp.
9. Keycdn.com . Bootstrap vs Foundation – Top 2 CSS Frameworks. Web News &
Insights. [Online] [Cited: 06 May 2017.] https://www.keycdn.com/blog/bootstrap-vsfoundation/.
10. MINDSCAPE. What is LESS & SASS. [Online] [Cited: 2017 April 05.]
http://www.mindscapehq.com/products/web-workbench/what-is-sass.
11. HTML MAG. An Introduction to CSS Pre-Processors. [Online] 21 May 2014. [Cited:
04 May 2017.] from https://htmlmag.com/article/an-introduction-to-css-preprocessorssass-less-stylus.
12. The World Wide Web Consortium(W3C). A Short History of JavaScript. w3c.org.
[Online]

[Cited:

01

April

2017.]

https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript.
13. jQuery. jquery.com. [Online] jQuery project, 2005. [Cited: 10 April 2017.]
http://jquery.com/.
14. Cochran, David. Twitter Bootstrap Web Development How-To. Birmingham : Packt
Publishing Ltd, 2012.
15. Aniszczyk, Chris. blog.twitter.com . [Online] 19 August 2013. [Cited: 19 April 2017.]
https://blog.twitter.com/2013/bootstrap-30.

37

16. Patterson, Andrew D. Getting Started with Zurb Foundation 4. Birmingham : Packt
Publishing Ltd., 2013.
17. Zurb. Foundation. [Online] ZURB product design company, 1998. [Cited: 20 April
2017.] http://foundation.zurb.com/.
18. vermilion Design and Digital . Vermilion.com . [Online] vermilion Design and Digital
, 7 December 2015. [Cited: 1 April 2017.] https://www.vermilion.com/responsivecomparison/.
19. Bootstrap GitHub Community. twbs/bootstrap. [Online] [Cited: 2017 April 11.]
https://github.com/Befekadu-Mezgebu/bootstrap.
20. Foundation-sites Github community . zurb/foundation-sites. [Online] [Cited: 11
April 2017.] https://github.com/Befekadu-Mezgebu/foundation-sites.
21. StackOverflow. Bootstrap 4 search results . [Online] [Cited: 11 April 2017.]
https://stackoverflow.com/search?q=bootstrap+4.
22.

—.

Foundation

6

search

results

.

[Online]

[Cited:

11

April

2017.]

https://stackoverflow.com/search?q=Foundation+6.
23. Google Trends. Bootstrap 4 versus Foundation 6. [Online] [Cited: 01 April 2017.]
https://trends.google.com/trends/explore?q=Bootstrap%204,Foundation%206.
24. Builtwith Trend . Twitter Bootstrap Usage Statistics . [Online] [Cited: 1 April 2017.]
https://trends.builtwith.com/docinfo/Twitter-Bootstrap.
25.

—.

Foundation

Usage

Statistics

.

[Online]

[Cited:

1

April

2017.]

15

April

2017.]

https://trends.builtwith.com/framework/Foundation.
26.

GT.net

.

GTMetrix.

[Online]

GT.net,

1996.

[Cited:

https://gtmetrix.com/.
27. Pingdom . Pingdom Website Speed Test . [Online] [Cited: 5 April 2017.]
https://tools.pingdom.com/.
28.

Google

.

PageSpeed

Insights

.

[Online]

[Cited:

7

April

2017.]

https://developers.google.com/speed/pagespeed/insights/.
29. Google. Google Trends. [Online] Google Technology Company, 4 September 1998.
[Cited: 15 April 2017.] https://trends.google.com/trends/.
30.

tinypng.

tinypng.com.

[Online]

Voormedia.

[Cited:

11

April

2017.]

https://tinypng.com/.
31. CrossBrowser Testing.com LLC. CrossBrowser Testing. [Online] [Cited: 15 April
2017.] https://app.crossbrowsertesting.com/livetests/.
32. World Wide Web Consortium,W3C. What is the Document Object Model. [Online]
[Cited: 10 April 2017.] (https://www.w3.org/TR/DOM-Level-2-Core/introduction.html).

38

33.

Twitter

Bootstrap.

http://getbootstrap.com/.

Bootstrap.

[Online]

2010.

[Cited:

22

April

2017.]

Appendix 1
1 (6)

Appendix I. Bootstrap Website HTML code

Index.html

Appendix 1
2 (6)

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix II. Foundation Website HTML code
Index.html

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix 2
2 (3)

Appendix III. Bootstrap(left) and Foundation(Right) Websites Mobile View

Naimul Islam Naim

ReactJS: An Open Source JavaScript Library
for Front-end Developement

Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
30 May 2017

Abstract

Author(s)
Title
Number of Pages
Date

Naimul Islam Naim
ReactJS: An Open Source JavaScript library for front-end development.
36 pages + 0 appendices
30 May 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor(s)

Markku Karhu, Principal Lecturer

The main purpose of this final year thesis was to study a JavaScript based front-end library for web and mobile application development. There are many front-end application
development frameworks and libraries at the moment. ReactJS library, one of the most
recent web technologies, is one of them. It has been proven as the fastest rendering library. It focuses on the view part of the MVC pattern and is being widely adopted for big
scale application development.
Being developed by Facebook for their internal use, it has proved as an efficient and fast
library compared to other technologies. However, it has been open-sourced later on and
enriched with more functionalities everyday by plenty of contributors. When it comes to
dealing with large amounts of data and users, it has been quite successful to give better
user experiences. Alongside Facebook, some other big organisations and applications
are also using ReactJS and React Native for their development. Instagram, Netflix, Airbnb
are a few of the big names serving smoothly enormous numbers of users worldwide.
Those big names prove that ReactJS is serving them quite well.
Throughout the research, the main intention was to evaluate the library and to prove ReactJS as a compatible platform to be adopted where there are several options to choose
from. The fundamentals, core architecture, features, data handling methods, popularity,
and adoptability were discussed in this study. Even though, there is no constraint to use
ReactJS over other frameworks it is recommended to use it as an emerging web technology to be adopted depending on the nature of the intended application to be built.

Keywords

ReactJS, Components, JSX, Virtual DOM, JavaScript, Flux,
Redux, React Native, HTML, Library, Front-end, Framework

Contents
1

Introduction

1

2

Why Learn React

2

2.1

Short and Easy Learning Curve

2

2.2

React is Fast and Agile

4

2.3

React Introduced JSX

5

2.4

Big Development Community

5

3

4

5

6

7

Environment Setup

6

3.1

Installing Text Editor

6

3.2

Installing Nodejs Bundles

6

3.3

Creating Web Server

7

React Core Architecture

13

4.1

React Virtual DOM

13

4.2

One-Way Data Flow

15

4.3

React Components

16

4.4

Introducing JSX Syntax

17

4.4.1

JSX characteristics

17

4.4.2

Practical JSX

18

4.4.3

Children in JSX

20

React Native

22

5.1

Setup and Bundling in React Native

22

5.2

Styling is React Native

22

5.3

Animation and Navigation in React Native

24

5.4

Who are Using React Native?

24

React vs Other Frameworks

26

6.1

Comparison

26

6.2

React in Market Growth and Popularity

28

6.3

React Library vs Angular Framework

28

Data Flow Management in React

30

7.1

30

Flux as an Architecture from Facebook

7.2

Redux Data Flow Management

31

7.3

Which to Choose Between Flux and Redux

33

8

Discussion

35

9

Conclusion

36

References

37

Abbreviation and Terms
API

Application Program Interface

DOM

Document Object Model

HTML

Hypertext Markup Language

JS

JavaScript

JSX

JavaScript XML

URL

Uniform Resource Locator

1

1

Introduction

Internet has become a busy hub for searching information and doing different tasks
virtually that used to be done manually before the internet age. There are enormous
numbers of mobile and web applications that have made it easier to do different tasks.
A big part of our everyday task can be done on the internet at the current age. Faster
internet along with fast performing devices demands faster applications.

A trend is growing to shift software or applications we used to use in desktop machines
to the web. There are plenty of applications that are usable from web and mobile devices. Several JavaScript based frameworks and libraries are used to develop different
applications. There are ReactJS, AngularJS, EmberJS, MeteorJS, VueJS, KnockoutJS
and many more at this moment in production. ReactJS is one of them for the front-end
development of applications.

React is a popular open source front-end JavaScript library developed by Facebook.
React is widely popular among developer communities because of its simplicity and
easy but effective developing process. React makes it easier to create interactive user
interfaces. It efficiently updates through rendering the exact components to the view of
each state and makes the data changes in the application.

In ReactJS, every component manages their own state and composes them to the user
interfaces. This concept of components instead of templates in JavaScript, plenty of
data can easily be passed to the app and thus keep the state out of the DOM. Using
Node React can also be rendered on the server side. Alongside web apps, to build
mobile applications we can use React Native as well.

The purpose of the thesis is to carry out an in-depth research of the ReactJS library
based on JavaScript. The fundamental concepts, characteristics, features, development processes, core architecture and market research as well as compatibility will be
covered in the thesis. The aim is to provide a solid understanding of the ReactJS library.

2

2

Why Learn React

React was introduced to the world two years ago, and since then it has seen impressive growth, both inside and outside Facebook. [1] New web projects at Facebook are
commonly built using React in one form or another, and it is being broadly adopted
across the industry. [1] Developers and engineers are choosing React because it allows spending more time to focus more on the product development and less time
spent on fighting and learning to the framework.

A React application is a collection of discrete components, each representing a single
view. The idea of every individual view component makes it easy to iterate on product
development because to make changes on a single view or component, it is not necessary to consider the entire system. When an application is built with React, the code is
generally predictable, it is because React wraps the DOM mutative, imperative API with
a declarative one, which raises the level of abstraction and simplifies the programming
model. [1] Moreover, it is easier to scale the application built with React.

The combination of React and the rapid iteration cycle of the web, has enabled to make
some excellent products including many Facebook components. An amazing JavaScript framework called Relay has also been made on top of React, which helps simplifying data fetching on a large scale. [1]

2.1

Short and Easy Learning Curve

Unlike some other JavaScript libraries where it takes a lot of time to learn about the
frameworks, in React it does not take much of an effort to start building an application.
React is comprised of many strong features. Readability is one of the greatest strength
of React. It is easily readable even to those who are unfamiliar to it. While other frameworks require learning many concepts about the framework itself, ignoring the language fundamentals, React does the absolute opposite. [3] For example, let’s consider
how different it is in React and Ionic (AngularJS) rendering a portion of an employer’s
list.
In Ionic, it requires to use the directive called ngRepeat. Let’s assume an array of employers. Each of them contains the following fields: first_name, last_name, is_married.

3

The target is to show only employers who are married. The following Figure 1 shows a
screenshot of a function written in Ionic framework.

As shown in Figure 1, a function is written called EmployerCtrl where it shows some
specific information of the employers.

Figure 2 shows a screenshot of a directive called ngRepeat written in AngularJS
framework.

As shown in Figure 2, this is how a directive is written in AngularJS framework.

If one is not familiar with Ionic/Angular, this code snippet may raise some immediate
questions of what is the $scope and what is the specific syntax here for the filter.

4

But in React, one can use the existing knowledge of language fundamentals. The
above functionality can be done using filter and map functions in React. The following
Figure 3 shows how to write the function in ReactJS.

Figure 3 Screenshot of how to use filter and map function in ReactJS.
As shown in Figure 3, functions can be written in easy ways compared to other frameworks. A few questions may also rise regarding what React.creatclass does and
what render is but the rest of the code is regular JavaScript. This means it will be
quite easy and understandable to those who do not even know much of React.

2.2

React is Fast and Agile

ReactJS is featured with one-way unidirectional data flow between the states and layers in an application. This means data flows in single direction between the application
states and layers. In two-way data binding like Angular, if a model is changed, the view
also changes and vice-versa. React renders the updates in the DOM much quicker
than alternative frameworks and it is a much smaller library. DOM means document
object model. Thus, it is easy to choose the tools to get the job done.

5

2.3

React Introduced JSX

JSX is a language that lets you specify the DOM elements before the components right
inside of JavaScript files. This means the logic behind the components and the visuals
are all in one place. This is such a great idea when other frameworks are taking
queues to place them.

2.4

Big Development Community

Big companies like New York Times, Airbnb, Facebook, and Netflix are using React in
production. They are continuously contributing to develop the React core and building
amazing third party libraries that work great with any React applications.

6

3

3.1

Environment Setup

Installing Text Editor

There are plenty of text-editors to start working with. Most of them are open source and
free of cost. Atom is one of them. It is a very useful text-editor. It has a great community of developers around it and they have enough useful plugin updates constantly. It is
usable in every platform including Windows, Mac and Linux.

For Windows users it is needed to install Git-bash while mac and Linux users can do
the job from the terminal. The reason behind using Git bash in Windows is so that you
can have access to the same commands that are available in Linux environments like
Ubuntu distribution or on a mac laptop.

3.2

Installing Nodejs Bundles

To install Nodejs, it is needed to go to the website called nodejs.org and there are couple of download facilities available for different operating systems. Node can be downloaded from there. This download will install a couple of things. First it will install
nodejs. Nodejs allows creating a web server so that React components can be used
locally and can be deployed to the web directly. It also installs node package manager
called npm which will let us install various third party modules like React into our applications. Figure 4 shows a screenshot of some initial setup.

Figure 4 Screenshot of installation of Nodejs and npm package manager.

7

As shown in Figure 4, Nodejs and npm package manager are both primary requirements for ReactJS development setup. Node and npm both come in a bundle while
downloading from the node website.

3.3

Creating Web Server

To start working with React it is necessary to create a simple webserver beforehand.
Without a webserver, there is no way to see the files in the browser. After opening the
terminal we can use npm-init to create a new node project. Here first we create a
folder in the desktop to store the project named HelloReact. We run npm-init command from the terminal and it creates one file in the project. It gives a little introduction
of what exactly it is doing and then asks a few basic questions. Figure 5 will show how
to create a package.json file for the project.

Figure 5 Screenshot of Creating package.json file in project folder.

8

As shown in Figure 5, running npm-init command in HelloReact project lets us walk
through the setup for the package.json file. After answering all those questions including the file name, version, author and license, a little file prints out telling that it is about
to write a file into our HelloReact project called package.json. This file is used for not
only the node server but also to manage React dependencies.
Now, if the new folder called HelloReact is opened inside the Atom editor it shows the
package.json file there looks exactly what has been printed out in the terminal. Figure 6
shows the package.json file in the editor inside HelloReact Folder.

Figure 6 Screenshot of package.json file in the project folder.

As shown in Figure 6, Package.json consists of the answers that were made earlier in
the terminal.

Now the first module is to be installed. A module is a third-party code or library we will
use in our application. The following command has to be typed in the terminal to install
the module.

npm install express@4 –save

Figure 7 is a screenshot of installing an express module in the project.

9

Figure 7 Screenshot of Installation of express module.
As shown in Figure 7, when the express module is saved in the project folder all the
dependencies are also automatically downloaded.
To write the -save flag is important because without saving the flag it is not going to
update the package.json file which stores all the dependencies. Inside Atom there is a
node-module folder which has plenty of files in it. And also in the package.json file an
express module is already installed.

10

Figure 8 is a screenshot of a node module folder with a plenty of files inside it.

Figure 8 Screenshot of a node module folder in the project.

As shown in Figure 8, node_modules in the project folder contain all the important files
with dependencies. This same action can be done only with npm install command as
long as the “express” module is present in the package.json file. Only command npm
install can do the job as well.

Now in the root of the project a new file called server.js has been created and let us run
it in localhost port 3000. Figure 9 is a screenshot of the file server.js inside the project
folder as follows.

11

Figure 9 Screenshot of Server.js file in the public folder.

As shown in Figure 9, the public folder has a server.js file in it. A public folder and index.html has been created in the root of the application. Index.html is the default file of
the application. Figure 10 shows a public older in the editor is a screenshot.

Figure 10 Screenshot of Index.html as the default file of the project.

As shown in Figure 10, the public folder inside the main project folder contains the
package,json and server.js file.
Now if the command ls is run in the terminal it can be seen that all the files and folders are showing up in terminal. Figure 11 shows if every file and folder is placed inside
the main project folder properly.

12

Figure 11 Screenshot of all files showing up in the same project folder.

As can be seen in Figure 11, ls command shows all the files and folders inside the project folder and the express server is ready to run on port 3000.

Now let us run the server in web typing node server.js command in the terminal. Figure
12 is a screenshot that shows the server running on the localhost.

Figure 12 Screenshot of project deployment in localhost with node server.

As Figure 12 shows, the project is deployed in the localhost with node server at port
3000.

In this section, the procedure of using ReactJS in the local machine was described
thoroughly. There are several other text editors available to start writing code. Atom is
one of them and it is a good one. It has many plugins available and is easy to follow.

13

4

4.1

React Core Architecture

React Virtual DOM

DOM stands for Document Object Model. DOM manipulation is very important for
modern interactive web technologies. It is often called the heart of the modern web. It
is an abstraction of the structured text. But it works slower than other JavaScript operations because most JavaScript frameworks usually update the DOM even if they do
not need to do it. That means those updates are not necessarily required to perform
the actions but they still do by default. For example, let us assume nine items have
been put in a shopping basket in an online web store. Now let us say only the first item
is needed to buy and proceed to checkout. Here, most technologies would rebuild the
entire list that has been put in the basket. This means the framework has to unnecessarily work ten times more. Because of only one change the system has to rebuild the
list exactly how it was before.

React did not invent Virtual DOM but uses and provides it to the developer community
for free. Virtual Dom is simply an abstraction of HTML DOM. React has a corresponding virtual DOM object for every DOM object like a correspondent or a lightweight copy.
Virtual DOM is also characterized with similar properties to a real DOM. However, it
cannot make any changes directly to the view. DOM manipulation is quite a slow process. But manipulating Virtual DOM is faster because it has nothing to do with the view
part and does not make any changes to the screen. Figure 13, reprinted from stackoverflow.com, is an illustration of Virtual DOM in the memory.

14

Figure 13 Screenshot of React virtual Dom in memory. Reprinted from stackoverflow.com (2017). [9]

As shown in Figure 13, a React virtual DOM in the memory is a lightweight copy of the
real DOM. React uses a method called “diffing” which means rendering a JSX element
gets every single Virtual DOM updated. This might sound inefficient but, in fact, it costs
nothing as Virtual DOM is quite fast to get updated and does not make any impact in
the process. After the DOM gets updated React compares the updated DOM with a
pre-updated state of the DOM and determines which virtual DOM has been changed.
Once React detects the changed DOMs, React updates only those objects to the real
DOM.

Thus, React makes the updates faster through Virtual DOM. In the above-mentioned
example, React would have updated only the checked item from the list and leave the
rest of the items alone. This makes the difference when updating a page in an application while React can only make changes to the necessary parts of the DOM. This virtual DOM manipulation process is one of the main reasons why React is gaining much
popularity among the developer communities.

15

React Virtual DOM Pros and Cons
Among the many advantages of the ReactJS library, a few of the key advantages are
described here.
 The diffing algorithms written in React is quite fast and efficient
 Inclusion of JSX and hyperscript let us build multiple frontends for the same application.
 It is very lightweight and capable to be run in every mobile device
 Lots of tractions and mindshare
 It can also be used without React as an independent engine

A few disadvantages of React are as follows.
 It occupies quite much of the memory. Full in memory copy of the DOM.
 Static and dynamic elements don’t bring much of a difference.

4.2

One-Way Data Flow

Frameworks like Angular and Ember use two-way data binding. In a two-way data binding for example in Angular, if a model is changed, the view also automatically gets
changed and vice versa. An input field in the model can also mutate the model. It performs well in most of the applications but sometimes it may lead to cascading updates
and changing to one model may cause updates in other models. Again, since the state
is mutable by both view and controller, the data flow can be unpredictable in some
cases. Flux or Redux with React can be a better solution to avoid those uncertainties
since both architectures follow one-way data flow. One-way data flow does not make
cascading updates and changes in view.

One way data flow ensures that data flows throughout the application in a single direction to offer more control between the states and models in an application. One way
data flow also makes the architecture less complicated and understandable. Flux architecture is a functional approach. Here the view is considered as a function of the application state. Eventually, if the state gets some changes the view also gets re-rendered

16

automatically. Moreover, a similar view is generated from the states and gives a better
understanding and predictability to the application.

To make it more predictable, in an application, data from parent to child flows in a single direction. Any data can be updated from any view, anytime in this approach. In
case something goes wrong, debugging is also made less complicated in this way.

4.3

React Components

Components are very important for React. It is often considered as the heart of React,
which is a collection of components. It is small reusable UI element that provides data
to the view and changes over time. [6] To create the entire UI, those small components
are then composed together, nested inside one another. Components let the UI (user
interface) to be split into small pieces and to design and build in a comprehensive way.
UI stands for user interface, i.e. what is shown on the screen. Components are like
JavaScript functions. They literally perform the same task but in different environment
and different approaches. Like functions, they take inputs called props and return React elements. Those elements describe what the user sees in the interface on the
screen. React components can be used to build the entire interface or even a part of it.

Creating a React Component
A React component can be simply written as a JavaScript function. This function accepts props and returns a React element. They are called as functional components.
ES6 class can also be used to define a component.
function Welcome(props){
return <h1>Hello, {props.name}</h1>;
}
A React component can also be created in several other ways. To extend or to inherit
or to derive a class from the main component which it attached to object is another way
to create a component. [7]

17

class Album extends React.Component { // It's the main React
component class!
render() {
return(
<div>
<h1>Pink Floyd- The division Bell</h1>
<ol> // Songs list
<li>Cluster One</li>
<li>What do you want from meli>
<li>marooned</li>
<li>great day for freeDOM</li>
<li>Wearing the inside out</li>
<li>Take it back</li>
<li>Coming back to life</li>
<li>Keep talking</li>
<li>Lost for words</li>
<li>High hopes</li>
</ol>
</div>
)
}
}
Functional components can also be stateless. Rendering every component builds the
user interface experiencing faster and efficient.

4.4

Introducing JSX Syntax

JSX is neither a string nor HTML. It is statically typed syntax extension to JavaScript. It
is similar to an object-oriented language which is designed to run on modern web
browsers. JSX is recommended to be used with React to design and build the user
interface. While it comes with the full power of JavaScript it might even seem as a template language too at the first glance though it is not. The React element is produced
by JSX. It can be rendered to the React Virtual DOM. [9]

4.4.1

JSX characteristics

JSX has got some unique features which made JSX quite popular among the React
and React Native developers. At the beginning, it may look difficult but with time adopting JSX is easy.

18

First of all, it is faster: While JSX source code is compiled to JavaScript, it shows a very
optimized result. Compared to the equivalent code written in JavaScript, JSX generated code runs faster. JSX has proved to be 12 % faster in iOS and 29 % faster in Android. [6]
Secondly, it is safer: In contrast to JavaScript, JSX is statically-typed and mostly typesafe. The quality of applications becomes higher when being developed using JSX,
since many errors will be caught during the compilation process. It also offers debugging features at the compiler level as well.
Thirdly, it is easier: JSX offers a solid class system much like Java, freeing the developers from working with the too-primitive prototype-based inheritance system provided
by JavaScript. Expressions and statements, however, are mostly equal to JavaScript,
so it is easy for JavaScript programmers to start using JSX. There are also plans on
language-services for editors / IDEs, for example code completion to make coding easier.

4.4.2

Practical JSX

Expressions can be embedded in JSX though it is an expression too. The function written below is an expression.
function formatName(user) {
return user.firstName + ' ' + user.lastName;
}
const user = {
firstName: 'Naimul ',
lastName: 'Islam'
};
const element = (
<h1>
Hello, {formatName(user)}!
</h1>
);
ReactDOM.render(
element,

19

document.getElementById('root')
);

JSX tags can also contain children.
const element = (
<div>
<h1>Hello!</h1>
<h2>Is React JSX worthy or not?</h2>
</div>
);
Objects in React are also represented by JSX. Here are two different code examples
written below but they are identical.
const element = (
<h1 className="greeting">
Hello, Naimul!
</h1>);
const element = React.createElement(
'h1',
{className: 'greeting'},
'Hello, Naimul!'
);
Props can be specified in JSX in several ways. JavaScript expressions, string literals
can also be passed as props. If, else if, do, while statements, for loops those are not
considered as expressions in normal JavaScript, so they cannot be used directly in
JSX but with a surrounding.
function NumberDescriber(props) {
let description;
if (props.number % 2 == 0) {
description = <strong>even</strong>;
} else {
description = <i>odd</i>;
}

20

return <div>{props.number} is an {description} number</div>;
}

4.4.3

Children in JSX

JSX elements can be provided as children to help displaying nested components. Different types of children can be mixed together so that JSX children and string literals
can be used together. This is another JSX property that is similar to HTML. [7]

A JSX expression can have multiple children. As a result, it has to be wrapped in a div
if it requires the component to render multiple things. JavaScript expressions can be
passed as children within {} enclosing. The two following expressions are identical.

<FirstComponent>Languages</FirstComponent>
<FirstComponent>{‘languages’}</FirstComponent>

Functions in React JSX can also be passed as children. In general, expressions that
are passed to JSX are evaluated to a string, an element or as a list of those things.
Though, props.children works similar to other props and can pass data that not only
React knows itself but any sort of data can be passed. For example, a props.children
callback can be initiated in a custom component. [8]

function Repeat(props) {
let items = [];
for (let i = 0; i < props.numTimes; i++) {
items.push(props.children(i));
}
return <div>{items}</div>;
}
function ListOfTenThings() {
return (
<Repeat numTimes={10}>

21

{(index) => <div key={index}>This is item {index} in the list</div>}
</Repeat>
);
}
Booleans, false, true, undefined, null are not rendered though they are valid children.
They are ignored.

22

5

React Native

React Native is a framework developed by Facebook for native application development for both iOS and Android. It is used for making cross platform mobile applications
using JavaScript as a language. It uses the same design as React.JS, takes everything
that is great about React.js and allows to build rich mobile user interfaces from declarative components and gives a better application user experience. (2) A React Native app
is truly indistinguishable compared to an application built with Objective-C for iOS or
Java for Android. It uses the same fundamental User Interface as regular Android and
iOS apps do.

5.1

Setup and Bundling in React Native

React native is a framework, where ReactJS is a JavaScript library for building user
interfaces. [4] Starting a project with ReactJS requires a bundler like Webpack or
Browserify which consists of all necessary modules within it. But in React Native, it
comes with everything that is needed to start developing a project. The setup is quite
easy to follow and fast. It takes only a few command lines in the terminal and becomes
ready to go. A native React application can be built using ES6, ES7. [4]
It is required to have Xcode for iOS in Mac and Android Studio for Android application
development preinstalled in the machine. It can either be run on a simulator or emulator of the specific platform or even directly to the own devices.

5.2

Styling is React Native

Components in React Native do not use HTML to render the application. It provides
alternative components that render the app. Those alternative components map the
actual UI components to get rendered on the application. [4] Most of those alternative
components are then translated to something that is similar to HTML. At this phase, a
view component is similar to a HTML div tag and a Text component is similar to a
p tag. Figure 14 shows an alternative component in React Native.

23

Figure 14: Alternative components in React Native.
As shown in Figure 14, alternative components in React Native look similar to HTML.
Since this code will not be rendered in HTML, so it is not possible to reuse any libraries
that could be used in ReactJS that could render any type of HTML. But there are some
alternative libraries for example React.parts get a solution of this.

A stylesheet in JavaScript looks similar to CSS and is required to style the React native
components. [4] There is a tool called Flexbox which is designed to make the layout in
React Native applications. [5] Figure 15 shows responsive styling with flexbox for React
native applications.

Figure
15: Responsive styling for React Native app using flexbox.
As shown in Figure 15, responsive styling for React Native app using flexbox is nothing
complicated but quite similar to CSS styling.

24

5.3

Animation and Navigation in React Native

React Native has brought a new dimension to application animation design and navigation. Alongside regular features, attracting animations in application swapping, sliding is
an advantage for native applications. They have designed many API’s for the design,
animation and navigation purposes. Those animations are good to see and use.

There is no need for CSS animations in the React Native application. Different components in the application can be animated in a completely new way using JavaScript.
React Native provides own built API’s to animate the components. It can be compared
to the existing JavaScript library called Veloity.JS which is widely used for different kind
of animation associated to gestures in the web based applications. For React native,
there is an API provided called LayoutAnimation which is very nice and easy to use
but works only in iOS at this moment. [4] It also can be used in Android but it doesn’t
support it very well.

There is another API called PanResponder which is similar to JavaScript touch events
to interact with user gestures. [4] To navigate between two scenes or two pages there
is a component provided by React Native called Navigator component.

5.4

Who are Using React Native?

A large number of app developers are using React Native in production. From established Fortune 500 companies to hot new startup companies are also using React Native in developments. [7] Figure 16 shows the applications and companies that are using React Native.

25

Figure 16: Apps using React Native in production. Reprinted from
book.github.io/React-native/ [7]

As shown in Figure 16, apps like Facebook, Instagram, Airbnb and big organisations
like Tesla, Walmart, Vogue and many other companies are using React Native in production.

26

6

React vs Other Frameworks

There are quite many JavaScript frameworks in the market for front-end web development. Though, ReactJS is not a framework like Angular or Meteor. Being a JavaScript
library ReactJS is quite compatible when it comes to developing web applications like
other popular JavaScript frameworks.

6.1

Comparison

Making comparisons between Angular and React nowadays is a popular topic in the
tech community. However, AngularJS, ReactJS, VueJS , EmberJS, BackboneJS and
several other web technologies are the most popular web technologies. Amongst them
Angular and React are widely adopted and advanced JavaScript technologies being
used to create single-page applications (SPAs).

Table 1 on the next page shows a comparison between AngularJS framework and ReactJS library. [12]

27

Table 1 Angular JS and React JS compared
Technology

AngularJS

ReactJS

Developed by

Google

Facebook

Technology adopted

Full-fledged MVC (model-

JavaScript library .View in

view-controller) frame-

MVC, requires Flux or

work written in JavaScript

Redux to implement architecture for data management Open sourced.

Concept

Data Binding

Converts JavaScript into

Converts HTML into Ja-

HTML. Manipulates with

vaScript. Works with vir-

the real DOM. Performs

tual DOM. Performs

client-side rendering

server-side rendering

Two-way data binding

Unidirectional one-way
data binding

Dependencies

Dependencies managed

Third party tools are re-

automatically

quired to manage dependencies

Languages used

JavaScript and HTML

JavaScript and JSX

Suits for

Single page application

Single page application

(SPA) that updates single

that updates many views

view at a time

at a time depending on
components

Latest Version Available

Angular 1.6.0 RC2

React 15

As shown in Table 1, there are some fundamentals differences between AngularJS and
React in terms of data binding, dependency handling, DOM manipulation and languages they use. But the biggest difference is that Angular JS is a framework whereas
ReactJS is a library. Though, both of them are used for front-end development.

28

6.2

React in Market Growth and Popularity

Many business, news, travel, social networking companies in the USA, the UK, Asia,
France, Germany, Canada and many other countries are using both React and Angular.[7] Angular is very popular among the developers as it is a complete framework
which comes with MVC (Model-View-Controller) while React is a library, not a framework. React has a View only in front lacking Model and Controller.

Figure 17, taken from Google trends, shows the ratio of searching interest over different technologies including ReactJS (blue), AngularJS (red) and VueJS ( yellow) as
follows.

Figure 17: A comparison of topic interest among users in google among ReactJS, AngularJS and VueJS. Copied from Google Trends [10]

As shown in Figure 17, Angular JS is by far the most searched among these three, but
ReactJS is quickly closing the gap.

6.3

React Library vs Angular Framework

ReactJS and Angular both are used for front-end web development. Both are very
much in tech community for their scalability and compatibility compared to other existing technologies. Both are quite handy when it comes to development as both have
many unique features. Both of them provide unique functionalities which are suitable to

29

consider depending on the nature of the intended application to be built. Hence, a
comparison of pros and cons between them is shown in Table 2.

Table 2 Pros and cons between Angular and React. [6]
React
Pros








Cons







Angular
SEO (search engine
optimization) friendly
Creating UI test cases
is an easy task
Components
are
reusable
Fast when it comes to
displaying
the
rendered result of a
big amount of data in
the components
Specialized Chrome
extension
made
debugging easier



In some cases it
requires to write more
code
Manual processing of
data
changes
is
required
View oriented












Oriented on the apps
with a big amount of
interactive client-side
code
Good solution for
single page dynamic
apps
Fast
development
process
Demands less code
in some cases
Advanced
testing
features
Model-view-controller
balance
Relatively slow when
it comes to dealing
with
big
data
amounts.
Not as SEO friendly
as desired

As shown in Table 2, both of them have advantages and disadvantages. Applications
that require frequent data updates involving users should consider ReactJS and big
scale dynamic applications may consider AngularJS for development.

30

7

Data Flow Management in React

An enormous number of web users worldwide are demanding richer, faster and more
interactive web applications. The web is a very busy place at this current age. Millions
of websites and applications are keeping the web busy all the time with enormous
amount of data. To satisfy all users with smoother and smarter services the developers
have already come up with many frameworks. However, most of the modern JavaScript frameworks are quite hard to master, sometimes scary and not very easy to maintain. [8]
ReactJS is considered to be less complex, faster, easy to understand and quite handy
to maintain the states. [6] It allows us to create re-usable UI components and introduced the virtual DOM instead of error prone manual DOM manipulation. It gives the
freedom to design how the user interface should depend upon the state of the data. A
minimal number of DOM changes came to reality to make the process faster.
Managing the states of data was always a challenging task to maintain frameworks. It
is all about how the frameworks actually manage data between different states and
layers in an application describes the simplicity or complexity of the frameworks. [3] If it
is really complicated to manage the data between the states during application development, the framework is considered to be hard to master and it takes time to be familiar with it. React can be used with two different architectures for managing the states
throughout the application layers. They are Flux and Redux.

7.1

Flux as an Architecture from Facebook

Flux is an architecture developed by Facebook and internally used when working with
React. Flux is not a framework nor a library. [13] It is used for creating data layers in
JavaScript applications. It is a simple pattern or architecture which allows one way data
flow. It reduces the complexity between the UI componenets in the application. It
utilizes an undirectional one-way data flow that complements React’s composable view
components.

Flux architecture contains three major parts. They are dispatcher, stores and views. It
might sound like the MVC pattern but is not actually similar. It works in a different way

31

than MVC. Still, Flux does have a controller which is controller-view that retrieves data
from the stores and passes them to the children. [13] Figure 18 shows Flux architecture.

Figure 18: Flux architecture. Copied from ReactJS Cookbook (2017). [13]

As shown in Figure 18, Flux architecture has three main parts, i.e. dispatcher, store
and view. Flux can be better understood by explaining the components it contains.
Action is a helper method to facilitate the data passage to the dispatcher. Dispatcher
receives the actions and then passes the payloads to the callbacks that are registered
already. Stores contains the application states and the contoller views grab the states
from the stores and pass them downwards through the child components. [13]

Finally, Flux is very convenient to be used because the one way data flow makes it
easily understandable. Modifying a complicated application is also made possible and
much easier with Flux. While two way data binding in other frameworks is entitled to
cascading updates and a change in a specific data model brings changes to another
model, one-way data flow or binding in React with Flux is a good solution to overcome
these inconveniences.

7.2

Redux Data Flow Management

Redux is a conceptual architecture or pattern to manage data and communication between data layers within an application in the browser. Redux is basically inspired by
Flux but not a pure Flux implementation. The key difference between Redux and Flux
is that Flux uses a single store to wrap all state objects that contain all the states of an
application. It plays with data in the client side. It actually works like a backend data-

32

base in the front-end client-side browser where all the required data are kept in order to
generate the view. In a React application those data from the Redux database can be
used to generate a proper view depending on the actions made from the user’s browser.
Managing those states in an entire application is always a hard and challenging task for
the developers. The bigger the scale of the application the bigger is the challenge to
maintain states. Here Redux provides the state container to the application so that it
behaves consistently. Redux is very useful to build scalable, interactive React applications. It is easier to learn than Flux. It is also very efficient, straight forward and powerful compared to any other solution to manage data flow because it is built with several
unique features and is very helpful to make real life applications. It is also a standard
tool to work with for the one way data flow featured applications and programs. Redux
is very powerful and a must use for the server side React applications. It is a unique
and effective technology to be used along with React on the applications or websites
where the customer experience is top-notch. For example, Facebook, Instagram,
Airbnb and many popular news services around the world use Redux server rendering
implementations for quick customer services and responses.

Installation ----- npm install –save redux

Figure 19: Redux architecture. Printed from startuprocket.com (2017). [14]

33

As shown in Figure 19, data flows in one way in Redux architecture. Mostly Redux is
used as a collection of CommonJs When Redux is imported in a Webpack, Browserify or in a Node environment these modules are automatically what also downloads.
The Redux code is written in ES2015 and works fine in every browser. [14] Using
Babel or a module bundler is not mandatory to get started with Redux. The whole
state of your app is stored in an object tree inside a single store. The only way to
change the state tree is to emit an action, an object describing what happened. To
specify how the actions transform the state tree, you write pure reducers.

7.3

Which to Choose Between Flux and Redux

Redux is basically an implementation of Flux. Flux is used in Facebook for developments. Flux is neither a library nor a framework. It is a recommended architecture for
building web applications. Redux is also not a pure library or framework. Redux is
quite like Flux but only reduces some complexity by using functional compositions
where Flux architecture is based on callback registers. They are fundamentally almost similar but some abstractions are made less complicated and possible to i mplement that would be hard or in some cases impossible to be implemented in Flux.
Among many great features of Redux is that it is built with tools and there is only one
way to do that. Thus, Redux reduces complexity and confusion while developing.

Why Redux should be preferred over Flux is described with some examples.
 Both Redux and Flux both have actions which are comparable to events. Flux
considers actions as simple JavaScript object, Redux does so. But if we use
middleware with Redux, actions can be functions and promises too.
 Flux has a convention to have multiple stores per application. Redux allows
having a single store per application.
 As Flux is a singleton object, it has a single dispatcher and all the actions
should pass through the dispatcher. Multiple dispatchers are not allowed in

34

Flux because it can have multiple stores and a single dispatcher acts as a
manager which is required for the dependencies between those stores.
 Redux is free of any dispatcher entity. Instead, stores in Redux have the dispatching capability.
 Stores in Flux decide how to manage the data and show it based on the actions received makes it most powerful in Flux architecture.
 In Redux, the reducer function in the store decides what to do with the data
based on the actions received. Reducer functions are the smarter player in
Redux.

35

8

Discussion

In this chapter of this study, a brief evaluation of the topic will be discussed. The intention of this research work over ReactJS library was to explore its features, to find out
clearly what it offers, the core concepts behind the architecture, how it is different from
other library and frameworks, its data handling processes and other functionalities. The
reason behind choosing ReactJS as a topic was to know it better by researching and
thus enriching personal learning over it.

Throughout the research, it was found that ReactJS is a less complicated library compared to other frameworks. It is a very fast rendering library and agile in development.
Learning and mastering React is less time consuming compared to others since it is
only a library, not a framework. Frameworks usually take a longer time to know about
them and learn the terminologies.

In addition, the main concept behind React is components. Everything shown in the
front-end is nothing but components. The user-interface is a collection of components.
Making changes in one component does not affect other components. Thus updating
the application over changes in data has been made easier and less complicated. To
perform this functionality React introduces a modified concept of DOM to virtual DOM.

One-way data flow for the data management is another good thing about React. Data
can be changed from anywhere in the application layer. As the data flows in a single
direction, it offers solid control between the models and states in the application. The
inclusion of a new syntax called JSX has been proved quite fast while rendering.

As a faster rendering library, React has been proved successful since applications like
Facebook, Instagram, Airbnb, Netflix, Uber have adopted it for their developments.
When it comes to dealing with enormous amounts of users and data, React is undoubtedly adoptable. All those applications mentioned above have billions of users and
countless data to be dealt with. Thus, when an application intended to serve big numbers of users, play with tons of data, ReactJS is recommended to be used for faster
and smooth user experiences.

36

9

Conclusion

The goal of the thesis work was to study and review the JavaScript based open source
front-end library called ReactJS. Facebook developed ReactJS for their own purpose
and later open sourced it. Since the beginning, within a very short time ReactJS has
gained immense popularity among the developers and tech industry.

To conclude, in this document, a clear instruction has been illustrated of how to start
with React, React features and functionalities with examples, when to consider React
over other alternatives and what data architecture management system to consider as
well as its prospects in detail.

Since, React is a demanding and important technology to be learnt, learning through
further research would be beneficial to enrich personal skills over this technology.
Keeping this in mind, the topic was chosen. Developing an application in React would
be great in terms of enriching practical skills, but due to some limitations, an in depth
review and evaluation was produced. So far, a solid concept has been built already
while studying over React for the last few months.

Finally, it can be said that ReactJS is quite a technology to be learnt and certainly
worth considering for application in production. It has brought a new dimension in the
web application development. The fast rendering library accelerates the application
efficiency and it can be seen that React has a bright future ahead and learning React is
worth the effort.

37

References

1. A javaScript Library for Building User Interfaces [Online]
URL: https://facebook.github.io/React/. Accessed February 5 2017

2. React Native Bringing Modern Web Techniques to mobile.
URL:https://code.facebook.com/posts/1014532261909640/React-nativebringing-modern-web-techniques-to-mobile/. Accessed February 9 2017

3. Github React Native [A framework for building native apps using React native]
[Online] URL: https://facebook.github.io/React-native/. Accessed April 22 2017

4. React Native Mobile Apps
https://www.smashingmagazine.com/2016/04/consider-React-native-mobileapp/
Accessed April 25 2017

5. React native Animation and navigation. [Online]
URL:https://facebook.github.io/React-native/docs/animated.html.

6. Stefanov Stoyan, editor. React: Up and Running: Building web Applications.
First Edition; 2016. Accessed April 4 2017

7. Horton Adam. Vice Ryan, author. Mastering React; February 23; 2016.
Accessed April 8 2017

8. Stein Johannes, author. ReactJS Cookbook. December 6; 2017.
Accessed March 22 2017

9. Masiello Eric, author. Mastering React Native. January 11; 2017.
Accessed April 30 2017

10. Google Trends. [Online][Cited: 26 March 2017]

38

URL:https://trends.google.com/trends/explore?q=%2Fm%2F012l1vxv,%2Fm%2F0j
45p7w,VueJS
Accessed April 1 2017

11. A comparison of React and Angular [Online]
URL: https://erminesoft.com/what-are-the-pros-and-cons-of-angularjs-vs-Reactjs/
Accessed April 12 2017

12. React Virtual DOM [online]
URL:http://stackoverflow.com/questions/21109361/why-is-Reacts-concept-ofvirtual-dom-said-to-be-more-performant-than-dirty-mode
Accessed April 2 2017

13. Flux: Application Architecture for Building User Interfaces. [Online]
URL: https://facebook.github.io/flux/docs/in-depth-overview.html
Accessed April 4 2017

14. Evolution Towards One- Way Data Flow: A Quick Introduction to Redux.
URL: https://www.startuprocket.com/articles/evolution-toward-one-way-data-flow-aquick-introduction-to-redux
Accessed April 11 2017

15. What the Flux! Lets Redux. . [Online]
URL: https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux/
Accessed April 16 2017

39

Appendix 2
1 (1)

Kirill Kubryakov

Deployment and Testing Automation
in Web Applications
Implementing DevOps Practices in Production

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Bachelor’s Thesis
October 3, 2017

Abstract

Author
Title

Kirill Kubryakov
Deployment and Testing Automation in Web Applications

Number of Pages
Date

37 pages
3 October 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software

Instructor(s)

Amir Meirbekov, Software Engineer
Peter Hjort, Senior Lecturer

This final year project was carried out for EasyAntiCheat Oy. The main goal of the project
was to compare the available solutions for Continuous Integration (CI) and Continuous Delivery (CD), choose the tool that best suits the current project needs, and implement it in
practice.

The study is based on the principles of Development Operations (DevOps) and the ideas
and core values that stand behind the DevOps movement. Eight popular CI tools were
chosen for comparison and their advantages and disadvantages were studied. One option
was chosen based on hosting options, configuration options, prices and integration with
the git repository manager already used by the case company.

Based on the results, GitLab CI was selected and integrated with the current version control system. During the case study, automation of testing, building and deployment were
achieved. One GitLab Docker Runner was setup to run the pipeline, which includes the following stages: install, test, build, and deploy to production. Further development of the project may focus on creating a staging environment and closer integration with the company's messenger application.

Keywords

DevOps, Continuous Integration, Continuous Delivery

Contents

1

Introduction

1

2

Theoretical Background

3

2.1

DevOps Definition

3

2.2

Core Values of DevOps

6

2.3

Principles of DevOps

6

2.4

Benefits of DevOps

7

3

4

5

6

DevOps Tech Stack

9

3.1

Flow from Development to Production

9

3.2

Continuous Delivery

10

3.3

Configuration Management

11

3.4

Continuous Integration

12

3.4.1

Jenkins

13

3.4.2

TeamCity

14

3.4.3

Travis CI

14

3.4.4

GoCD

15

3.4.5

Bamboo

15

3.4.6

GitLab CI

16

3.4.7

CircleCI

17

3.4.8

Codeship

17

3.5

Continuous Testing

17

3.6

Current Tech Stack

18

3.7

Chosen Architecture and Technologies

19

Implementation

20

4.1

Integration with GitLab, Test Automation

20

4.2

Deployment Automation

25

4.3

Integration with Other Services

32

Results

34

5.1

Description of New Workflow

34

5.2

Possible Improvements

34

Discussion

36

7

Conclusions

References

37
38

1

1

Introduction

Creating applications is a complex process that includes several elements: planning,
prototyping, design, writing code, testing, fixing errors, continued testing, and finally shipping it into production. In this process there are three independent groups of participants:
developers, testers and the operations department. Each of these groups performs its
own tasks and uses different criteria to assess the efficacy of its work. For developers,
this is the speed of coding and the number of functions implemented in the program
code, for testers – the number of errors and bugs detected, for the operation department
– the stability of the systems and the minimum failure rate. Such a model of work often
leads to a conflict of interests: the first party tries to write the code quickly and send it to
the testers for quality assurance, the testers check and test the code as long as necessary to reveal all the bugs, and the third party, the operations department is hesitant to
make large changes to the code, because these changes have the potential to open the
entire IT infrastructure up to serious risks. As a result, the entire process of creating
applications stretches for an unacceptably long time. Because business need to be as
flexible and client-oriented as possible, releasing new products and services in a timely
manner is imperative to their survival and success.

Instead of shipping one major version of software once or twice per year, software companies are continuously shipping new versions in smaller increments. This is especially
relevant in web development where services are provided online and can be updated on
a nightly basis. Users want to have new features and bug fixes (which is even more
important) as fast as possible. In this fast-paced development environment, continuous
integration and continuous deployment need to be seamless.

Existing realities literally require software development to further reduce project implementation time: from the origin of the idea to the release of the finished product, while
not degrading its quality. With an enviable periodicity, customers are asking to implement
the project “yesterday”, so that someone else cannot copy their idea “today”. A shrinking
development timeline coupled with a limited budget causes increased pressure on developers and the DevOps services on which they depend.

2

The aims of this report are to describe principles and benefits of DevOps, illustrate how
DevOps techniques can improve and simplify process of development and deployment,
and review which technologies can be used to implement continuous integration and
continuous delivery in live development environments.

This thesis contains 5 chapters. The second chapter describes DevOps; what it is, and
what are its benefits. The third chapter discusses the DevOps tech stack and the tools
which are available to those wishing to apply DevOps practices in their projects. The
fourth chapter contains a case study of the integration of DevOps tools at EasyAntiCheat
Oy. The final chapter describes results of the case study and potential future improvements to the DevOps integration.

3

2

2.1

Theoretical Background

DevOps Definition

DevOps is acronym derived from development and operations. DevOps is a practice
aimed at the active integration of operations and development engineers, and unification
and mutual integration of their work processes during the entire service lifecycle of a
software project, from design to development, to production support. In addition to a set
of various tools and technologies, DevOps is also a cultural and professional movement
aimed at cultural changes within companies and improving mutual understanding and
cooperation between the participants of the development process. [1]
The history of DevOps started in 2008 from the talk on “Agile Infrastructure” by Andrew
Clay Shafer and Patrick Debois at Agile 2008 conference in Toronto, Canada. Later,
Patrick Debois organized technical conference called “Devopsdays” in Ghent, Belgium
in 2009. The main topics of Devopsdays are the intersection between software development and IT infrastructure operations. Since then, Devopsdays events have multiplied
and the term DevOps was popularized through them. [2]

The main problem that DevOps is aiming to solve is slow and ineffective delivery. The
main purpose of DevOps is to reduce the cost of the development process by automating
and integrating operations into the general flow that allow developers focus more on
development. [3]

DevOps is an approach to the delivery of software based on the Lean and Agile principles
[4]. In this approach, all stakeholders (business units, development units, quality assurance units and operating units) work together, organizing the delivery of software and
considering feedback from real consumers. The principles of DevOps allow teams to
deliver applications in a more efficient way and to base changes and improvements on
feedback from real consumers [5, 27].

DevOps applies the principles of Lean development, a concept of project management,
based on the desire to eliminate all types of losses. The same as Lean production,
DevOps involves each employee in the process of optimizing the business and maximizing customer focus. [6]

4

DevOps is inspired by Agile, a flexible approach to development. The essence of the
Agile can be summarized as follows: development is carried out in short cycles called
iterations; at the end of each iteration, the customer receives a valuable application (or
part of it) that can be used in business; the development team cooperates with the customer throughout the project; changes in the project are welcomed and quickly included
in the work. Each iteration itself is like a small software project and includes all the tasks
necessary to produce a minimal increase in functionality: planning, requirements analysis, design, programming, testing and documentation. Although a single iteration is usually not enough to release a new version of the product, it is understood that a flexible
software project is ready for release at the end of each iteration. [7]

DevOps is very similar in ideology with Agile. But instead of focusing on the code development, in DevOps we are focused on development of the configuration. Responsibility
for configurations is transferred from the team of system engineers to the development
team in such way that system engineers have control and confidence that the development team will do everything right.

Usually, in DevOps projects the roles are distributed as follows:
•

Developer: write project code, implement feature requests, fix bugs

•

Operations: maintain services, deployment, scaling, monitoring, troubleshooting,
diagnosis, incident management

Agile helps to improve and simplify development process for developers by adding short
iterations and more cooperation between teams. Figure 1 represents flow of agile development process.

5

Figure 1. Agile development circle. Reprinted from M&S Consulting. [8].

DevOps’ role is to take the workflow, depicted on Figure 1, as a basis, automate testing,
deployment and monitoring stages. Basically, DevOps workflow is Agile workflow plus
continuous integration and continuous delivery. Figure 2 shows DevOps workflow.

Figure 2. DevOps development flow. Reprinted from Supinfo. [9].

6

As illustrated in Figure 2, Agile workflow, which is shown in blue, is complemented by
continuous integration’ and continuous delivery’ stages, which are shown in orange. Continuous Integration (CI) is a practice of software development, which consists of the implementation of frequent automated project deployments for the early identification and
solution of integration problems. And continuous delivery (CD) is an automated process
to deliver a software package to an environment. [10]

2.2

Core Values of DevOps

DevOps’ core values are usually described with the CAMS abbreviation. It stands for
culture, automation, measurement and sharing. [11]

DevOps breaks barriers between teams, placing focus on people and their interactions
above processes and tools. Honesty, openness, and sincerity are the most valuable
parts of a DevOps team. It is encouraged to ask questions and to share knowledge,
lessons and discoveries. Behavior that helps to optimize processes and understand why
existing processes fail, is supported and rewarded. Promoting a safe environment for
innovation and productivity is a key challenge for management. [12]

Automation brings the system in order. It helps to intelligently describe the changes that
are made to the environment. To understand what should be changed in the product, the
team uses constantly collected logs, statistics and feedback. Analysis of the work process is constantly being done, the history of changes is reviewed to understand whether
the app is getting better and whether the right direction is chosen. [12]

2.3

Principles of DevOps

The set of DevOps principles can be called “The Three Ways”. This name came from
Gene Kim, one of the authors of “The DevOps Handbook” and “The Phoenix Project: A
Novel About IT, DevOps, and Helping Your Business Win.”. Those three ways are: systems thinking, culture of experimentation and learning and feedback. [13]

Organizations that follow DevOps principles think in systems. And the organization itself
is a system, so all the teams in the organization work together to achieve the common
goal, to release a reliable software. Developers are focused on the entire process, as

7

opposed to focusing only on the performance of their own team or department. It means
having in mind the full lifecycle of code changes that the team has made, how it can
affect on other teams in production pipeline and customers. It includes never passing
known bugs down to the other teams, never allowing local optimization to create global
degradation, instead focusing on bottlenecks, always seeking to increase the flow and
achieve a deeper understanding of the system. [5, 15-16]

Another side of system thinking is that people make mistakes and people should have
the right to make mistakes. Instead of blaming someone in case of failure, there should
be investigation of the causes. The failure means that the system that allowed those
code changes to go in production is not good enough. The system should be improved
to catch such cases. [14]

Thinking about software projects from a system-level perspective helps to create a culture of experimentation and learning inside an organization. Experimentation, taking
risks without the fear of retribution, learning from failure, gathering feedback from the all
channels: between peers in one team, from other teams, from customers, allow to improve the product and provide services that are valuable to its clients.

2.4

Benefits of DevOps

Companies who adopt DevOps practices gain many technical and organizational advantages. Some of these are as follows:
•

Increased stability and quality. When all members of the team have the same
configured development environment, which mocks the actual production environment as close as possible, the integration of continuous testing is expedited.
This continuous testing allows for faster and more frequent release cycles and
for problems and failures to be more readily identified. [15]

•

Increased organizational effectiveness. More time is spent to increase the
value and quality of the product. [16]

•

Improved customer experience. The ability to receive continuous feedback and
more quickly introduce it into the development of the project leads to increased
revenues and increased customer satisfaction. [17]

8
•

Faster time to market, fast reaction to changing market and customer demands. The ability to maintain high rates of deployment is transformed into business value in two main ways: how fast can an organization move from an idea to
something that can be transferred to the customer and how many experiments
the organization can conduct simultaneously. High rates of deployment make it
possible to conduct the experiment quickly and almost continuously. [18]

•

Automation. Simply replacing manual procedures with automated ones makes
infrastructure management more efficient. It increases your deployment rate and
the ease with which you manage all your resources, either on premises, in the
cloud, or in a hybrid environment. Quick response to changing business needs is
essential. Automation allows you to scale up or down in response to demand.
Automation ensures configuration is consistent across your network, so every
developer has the same environment and new developers can easily install work
environment and start working. Consistency gives you more control, and control
reduces risk. The immediate benefit is that you have a standardized process for
provisioning servers. [19, 6]

•

High level of communication between departments and between team
members. The business value is brought to the foreground for all departments.
[20]

•

Reduced risk of change. DevOps reduce the risk of change by making many
small, incremental changes instead of fewer large ones. Small changes are easier to review and test. Since the scope of any change is small and generally isolated, it is much easier to fix possible errors or roll back to the previous version.
[21]

9

3

3.1

DevOps Tech Stack

Flow from Development to Production

The adoption of the principles of DevOps changes the habitual project flow. Previously,
developers of one team worked for a long time on their features, and all the accumulated
changes were combined and sent in one large release. The complexity of the deployment
process slowed the delivery of new changes and fixing of existing bugs. The use of the
DevOps techniques allows to shorten the release cycle and simplify the delivery of
changes. Figure 3 represents DevOps flow from development to production.

Figure 3. Flow from development to production. Reprinted from Amazon AWS. [23]

As illustrated in Figure 3, DevOps flow contains four stages: source control, build, staging, and production; and three processes: continuous integration, continuous delivery,
and continuous deployment. After the developer finishes working with the feature and
tests it locally, the feature branch is pushed to the repository, and the process of continuous integration is launched. The project is automatically built and tested by unit tests
and any functional errors and integration errors are immediately identified. If this step
was successful, the continuous delivery process starts. Continuous delivery extends the
practice of continuous integration by ensuring that all code changes after the build phase
are deployed in a test environment for feature branches and merge requests. After the
successful testing and code review, the feature branch is merged to master branch and
changes are deployed to a production environment. [22]

10

3.2

Continuous Delivery

Continuous Delivery (CD) is an approach to software development in which all changes,
including new features, configuration changes, bug fixes and experiments - are delivered
to production environment as quickly and safely as possible.
The term “continuous delivery of software” became firmly established in late 2010, after
the release of the book of the same name by Jez Humble and David Farley. The book
describes fairly simple ideas on how to make the process of delivering software so that
it can be released after each commit. [24]

The main idea of continuous delivery is to build a pipeline (Deployment Pipeline), which
allows each change in the version control system to get into the production environment
in a standard and fully automated way. Hence potentially every change can be deployed
into production. [25]

Continuous delivery allows developers to reduce the risks of releases by making software deployment a painless, secure event that can be performed at any time. By automating most operations, such as deployment, environment settings, testing, the time required to release a new functionality decreases.

Of course, it can never be ideal: Configuration Drift, impossibility to make a complete
copy of production, different load profile in combat and development, different data in the
database on different environments and other factors do not allow for a perfect or painless process. But in most of the cases it is enough to avoid typical problems and automate typical routine operations.

Another important advantage of adopting CD practices is improving the quality of the
software. Spending only minutes on automatic tests, the team can spend more time on
research testing, usability testing, performance testing, and security.

Any successful software products or services will change significantly during their life
cycle. By investing in assembling, testing, deploying and automating the environment, a
company reduces the cost of creating and delivering incremental software changes, eliminating many of the fixed costs associated with the software release process. Continuous
delivery allows to deliver value to users in small but frequent batches. This allows to get

11

feedback from users as soon as possible, to test more hypotheses and deliver really
valuable software. [26]

If changes are released in small batches, releases become an everyday event for the
team. This event no longer causes panic and stress, but rather motivates, giving the
opportunity to immediately see the results of their work.

All the advantages that CD gives have a beneficial effect on the development of the
company, allowing it to pay more attention to the user's problems, delivering new values
as often as necessary, while maintaining a high level of quality. [25]

3.3

Configuration Management

An important advantage of DevOps is the use of the “configuration as code” principle.
Developers are trying to create modular applications which maximize composability:
such applications are more reliable and are easier to maintain. This principle is also applicable to the infrastructures in which applications are located, encompassing both cloud
and local network resources of the company. [27]

Configuration management is a set of methods aimed at systematically considering the
changes made by developers in the software product during its development and maintenance. Maintaining the integrity of the system after the changes, preventing unwanted
and unpredictable effects, and formalizing the process of making changes are all goals
of successful configuration management.
Configuration management answers the question: “Someone has already done something, how can we reproduce this?”. There are two main approaches to answer this question: golden image configuration, or a basic image configuration with an accompanying
file containing the environment settings.

Golden image configuration requires more work in the beginning. It is immutable, so it is
much faster to install but slow for regeneration. Basic image configuration with an accompanying file is lighter and has lighter build process. The startup process can be really
slow, since all the integration is done at startup. Basic images are easier to update because the configuration is just a text file. Those options can be combined by including
some dependencies that rarely change to the golden image and placing everything else

12

in the configuration file. This process can be combined with caching, where only the first
startup will require more time and the cache will be updated only if some of the dependencies needs to be updated. [28]

3.4

Continuous Integration

In software development, Continuous Integration means that the product will continuously go through the iteration of the assembly, testing, and demo. In practice, continuous
integration systems are implemented in the form of specialized software. Usually a server
is allocated to the CI, or a license is purchased for online use.

There are a number of scenarios for using continuous integration systems, but most of
them run on a similar line [29]:
•

Build a new version of the product

•

Testing a new version of the product

•

Processing Results

Continuous Integration gives at least one huge plus for the tester. This is automation of
regression testing. With a large project, there is a need to constantly run the same scopes
of tests to be sure of the quality of the new code. This kind of testing slowly begins to
cause disgust due to monotony and repetition. With CI tool, those tests will be done
automatically on the CI server. Continuous Integration tool can be integrated with version
control service used by a company. [29] Figures 4 and 5 depict examples of output from
integrated CI tool.

Figure 4. CI tool: example of successful message.

13

Figure 5. CI tool: example of fail message.

Figure 4 shows successful message and Figure 5 – fail message. With CI tool, it will be
clearly visible in version control service interface whether all checks have passed or were
not successful and need to be fixed. Various Continuous Integration tools exist in the
market. The following are top 8 CI tools according to Vladimir Pecanac [30].

3.4.1

Jenkins

Jenkins is a leading open source self-hosted CI server. It was firstly developed as Hudson, but then forked and renamed to Jenkins after Oracle acquired Sun Microsystems,
including the rights to the trademarked name “Hudson” in 2011 [31].

It is written in Java, so it is portable on all major platforms. It has huge community and
more than a thousand plugins available from Plugins Index [32]. Jenkins can be configured from web-based graphical user interface (GUI) or through console commands. Jenkins is a powerful and flexible system for automating tasks. It is used mainly as an automation framework, and most of the logic is implemented through libraries and plugins.
Everything - from listening to webhooks and viewing repositories to creating an environment and supporting different programming languages - is handled by plugins. The process of continuous integration can depend on numerous third-party plugins, which on
one hand provides flexibility, on the other - makes the environment too fragile. [33]

14

3.4.2

TeamCity

TeamCity is CI tool distributed by JetBrains. It is commercial software, but there is a free
version available which includes all the features with limitations (20 configurations and 3
build agents) [34].

TeamCity includes such features as [35]:
•

Pre-testing the code before committing. This prevents the possibility of committing program code containing errors that violates the normal assembly of the project, by remotely assembling the changes before the commit.

•

The ability to produce multiple project builds at the same time, testing on different
platforms and in different software environments.

•

Integration with systems for evaluating code coverage, code inspection and code
sniffing.

•

Integration with popular development environments, such as Eclipse, IntelliJ
IDEA, Visual Studio.

•

Instant notifications of build errors.

•

Ability to run the build and test the changed code without committing to the version control system, directly from the IDE.

•

Managing shared resources, allowing you to easily limit access to shared databases and test devices.

•

Configurable conditions for dropping a build based on multiple metrics (the number of dropped tests, the number of uncovered classes and modules, and metrics
that exclude degradation of code quality).

•

Functionality to keep the server in an appropriate shape: built-in clean-up of assembly history, disk space reports and server health reports.

3.4.3

Travis CI

Travis CI is continuous integration tool for GitHub hosted projects. It has free version for
open source projects and paid version for private projects. The advantage of the Travis
CI is built-in support of Build matrix. Build matrix is a tool that makes it possible to perform
tests using different versions of languages and dependencies. It has rich customization
capabilities. If the project is wanted to be tested also with some development or alpha
versions of packages, it is possible to set up build matrix in such way, that if there will be

15

a failure for such environments, the warning will be thrown, but the entire build will be
not considered unsuccessful. [36]

3.4.4

GoCD

GoCD is a free of charge, but with paid support, continuous integration tool by ThoughtWorks. What distinguishes this CI tool from all others, is different implementation of pipelines. What is called pipeline in others CI tools, in GoCD is the equivalent of a single task.
[37] Figure 6 represents the GoCD pipelines.

Figure 6. Go CD pipelines. Reprinted from Go. [38].

As shown in Figure 6, each box is an entire pipeline that usually is chained and run in
parallel with other pipelines. Furthermore, each pipeline can contain multiple sequential
stages that can contain multiple parallel jobs which also can contain multiple sequential
tasks. In other words, GoCD brings more level of abstraction and simplifies configuration
process for complex projects. [37]

3.4.5

Bamboo

Bamboo is a paid (with free 30 days trial), self-hosted, continuous integration tool by
Atlassian. It has great native support for other Atlassian products, JIRA project manager
and Bitbucket git repository manager. But it also can be integrated with other git repository managers, such as GitHub or GitLab. [39]

16

3.4.6

GitLab CI

GitLab CI is a tool for continuous integration built into GitLab, a platform for hosting repositories and git development tools. Initially released as an independent project, GitLab
CI was integrated into the main GitLab software with the release of GitLab 8.0 in September 2015 [40]. It can be used both when using gitlab.com website or self-hosted
GitLab Community Edition or Enterprise Edition.

The configuration of GitLab CI is defined inside the file in the code repository itself using
the YAML, human-readable data serialization format [41]. It supports multiple stages,
manual deploys, environments, and variables. Then the work is sent to machines called
runners, which are easy to configure and can use different operating systems. Each build
can be divided into several jobs that run in parallel on several machines. When configuring runner servers, it is possible to select Docker, shell, VirtualBox, or Kubernetes to
determine how tasks are run. [42]

The close connection of GitLab CI with the GitLab platform has certain implications for
the use of the software. GitLab CI is not suitable for developers who use other platforms
to host repositories. On the one hand, the integrated functionality allows GitLab users to
customize the CI/CD environment without installing additional tools and provide a complete solution for the organization of the workflow out of the box. Figure 7 depicts workflow with GitLab CI.

Figure 7. Workflow with GitLab CI. Reprinted from GitLab Documentation. [43]

17

As illustrated in Figure 7, GitLab CI is closely integrated in GitLab platform and forms a
complete solution for development process. A close relationship also allows you to distribute runner-servers between your projects, automatically view the current status of the
release in the repository, and store the artifacts of the builds with the code that created
them. [42]

3.4.7

CircleCI

CircleCI is a fully ready continuous integration solution that requires minimal configuration. It is a cloud based tool that has free (only one container instance is available) and
paid versions. CircleCI can be integrated with GitHub or BitBucket. With CircleCI, it is
possible to access projects, builds, and artifacts using the REST API. CircleCI caches
third-party dependencies, which helps to avoid the constant installation of necessary environments. The artifacts are stored on the CI servers and it is possible to access them
via SSH (Secure Shell). [44]

3.4.8

Codeship

Codeship is another hosted continuous integration tool, similar with CircleCI and Travis
CI. It supports GitHub and BitBucket repositories [44]. It has only basic setup, no encryption of secret variables and Docker support only in Pro version. There are Pro and Basic
paid plans and a free plan with up to 5 private projects and up to 100 builds per month
[45].

3.5

Continuous Testing

If a company in the process of software development is guided by the principles of TDD
(Test Driven Development) or at least uses tests to cover the main functionality of the
application, most of these tests can be automated. With the help of CI tool, it is possible
to automate unit tests, component tests, system tests, functional acceptance tests. However, usability and exploratory testing remain manually implemented. [46]

Automated testing provides several big advantages to developers. CI tools will run tests
in the background in a different environment, so team can focus on other tasks. When
working with some feature, the developer can overlook that this feature breaks some

18

other part of the project and by mistake submit this toxic code. With test automation, all
tests suites will be launched at the time of the push to the repository and if any of the
tests fail, the developer will receive a notification and be able to fix it before it merged
and deployed to production. [47]

3.6

Current Tech Stack

The case organization of this study is EasyAntiCheat Oy. The company provides a holistic anti–cheat service for computer games, using hybrid anti–cheat mechanisms to
counter hacking and cheating. The author of this thesis works in the company as a web
developer in the web development team. The responsibilities include development and
maintenance of frontend for the internal and customer portals and dashboards.

The Docker container platform is used to run the project both in production and locally
for development. The project has a main image from which the new instance can be
started. The consistency of the environment for developers and for production is maintained. Therefore, it can be said that the principles of DevOps configuration management
are applied.

Nevertheless, most of the tasks during the process of development and deployment are
made manually. The current development workflow includes the following steps:
•

First, the developer implements some new feature.

•

Next, he runs the tests locally to make sure that everything is working correctly.

•

Then, he pushed new code to the repository and makes a merge request to the
master branch.

•

Another developer does the code review, pull the code locally, run tests and
checks the new feature with the local development server.

•

After that he accepts the merge request and pulls updated master branch.

•

Then he runs the command to build Webpack bundles.

•

After the bundles are built, they are sent to the production server and copied to
the production container.

•

And the last step, Docker container is restarted, and new release is complete.

19

This whole process takes a long time to proceed and has a number of project-specific
aspects. Therefore, there is a need to start using a continuous integration tool to automate the process of testing and deployment. It is planned to set up the CI and transfer
all scripts there so any member of the team can easily make the release.

3.7

Chosen Architecture and Technologies

The company security policy requires a self-hosted version of any CI tool. Also, since
the GitLab git repository manager is used for version control, the second requirement for
the continuous integration tool is to be compatible with GitLab. Considering these two
requirements, Travis CI, GoCD, CircleCI, Codeship and Bamboo can be excluded from
the list. Jenkins, TeamCity and GitLab CI are remaining. Jenkins is a free, open-source
and highly customizable CI tool with considerable number of plugins available. Moreover,
it is already used in company by other departments. TeamCity provides helpful metrics,
pre-testing before committing, shared resource management for testing and deep integration with many IDEs, but it is not entirely free, the free plan is limited and most of the
team uses text editors as Atom or Visual Studio Code instead of IDEs. GitLab CI is already built-in in GitLab and does not have any additional costs. Even though it does not
have all the configuration options that Jenkins has, it has all the features that will be
needed for integration will the current project setup. Finally, it has a clear and understandable user interface.

GitLab CI was chosen as the most suitable tool for the project needs continuous integration tool and the next chapter covers the process of integration of GitLab CI with the
project.

20

4

4.1

Implementation

Integration with GitLab, Test Automation

To set up GitLab CI, GitLab runner is needed. GitLab Runner is a tool build by GitLab
which is used to run user jobs. It is preferable to install GitLab Runner on a separate

server, not on the same one on which the GitLab itself is running. GitLab Runner can
be installed and used on all most popular operating systems (GNU/Linux, macOS,
FreeBSD and Windows) and also can be installed using Docker. It was decided to
use Docker.

To install a runner, Docker should be installed, and gitlab-runner container should be
mounted from Docker Hub. It is a multi runner, that will be used to register private
runners and store their configuration. The installation was done by establishing SSH
connection to the server, that will be used for continuous integration, and running
Docker console commands [48]. After the necessary software is installed, the private
runner can be registered. GitLab Runner utility provides a console command, that can
be used to register a new runner [49]. Figure 8 depicts the process of registering a new
GitLab Runner using console.

Figure 8. GitLab Runner setup.

21

As shown in Figure 8, after running command, user is asked for GitLab instance URL
(Uniform Resource Locator), GitLab token, runner description and some other project
specific parameters through command line interface to make a basic setup.

Since the company’s GitLab instance is hosted locally, its IP address is needed to be
added to extra hosts. It is possible to modify runner configuration and add additional
parameters after registration. Configuration for all registered runners is located in
config.toml file and can be viewed and modified. Figure 9 represents an opened
GitLab runner configuration.

Figure 9. GitLab runner configuration.

As shown in Figure 9, there are one runner registered now and using GNU nano text
editor [50], which is usually built-in in Linux distributions, new parameter extra_hosts
was added.

Then the SSH connection can be closed and all the following steps can be done using
GitLab web interface. The runner is available in settings under the Pipeline tab. Figure
10 represents how the registered runner is shown in GitLab interface on GitLab pipelines
configuration page.

22

Figure 10. Registered runner on GitLab pipelines configuration page.

As can be seen in Figure 10, the status of the runner is indicated by the color circle
before the runner id. Green circle means that runner is active. If for some reason the
circle is red, it means that the runner is offline. In such cases it is needed to check
whether the CI server is up and running and the GitLab Runner process is running. It is
also possible to assign tags to the runner to make clear for which jobs this runner can be
used.

When there is at least one runner and it is active, the pipeline for the project can be
established. The optimal way to do it is to create a new branch from the master branch
to do all the setup, commit changes, check if everything works properly and then make
a merge request back to the master branch. It can be named gitlab-ci. One of the
advantages of GitLab CI is that only one file with configuration is needed to start the
pipeline and run jobs. It is possible have different configuration files in different branches
and what is most important, those changes will not affect the old branches. The configuration file should be placed in the root directory of the project and named
.gitlab-ci.yml [51]. The configuration file is in YAML. This file should include all the
pipeline. Figure 11 shows GitLab file editor interface with .gitlab-ci.yml

file

opened. It has simple templates for different environments, so it is easy to pick one as
starting point.

23

Figure 11. GitLab CI config initialization, with built-in templates for different environments. Nodejs template.

Listing 1 presents a simple pipeline configuration file that was added to the project. It has
one job, which is to go to the frontend folder, install all the dependencies and run unit
tests. The commands are run using Yarn package manager [52] command line interface
[53] which is used in the project to manage dependencies and run predefined scripts.

image:
node
stages:
- test
test:
stage: test
script:
- cd front
- yarn install
- yarn test

Listing 1. GitLab CI initial configuration.

24
When the changes are committed and pushed to the GitLab, the new job with “running”
status will appear on Pipelines page. The runner pulled all the code for current branch
and started the job. Figure 12 shows GitLab CI job with running status.

Figure 12. GitLab CI job with running status.

There is also the possibility to see console output by clicking on job status. When the
runner finished, it sends a response back to GitLab and the job status changes to
“passed”, which means that the job completed successfully. Figure 13 depicts GitLab CI
job with passed status.

Figure 13. GitLab CI job with passed status.

GitLab Continuous Integration is fully integrated with GitLab. And if any branch or commit
has pipeline configuration and requires to run any jobs, it will be indicated with a small
icon every time the branch or commit is mentioned in the GitLab interface. Figure 14
shows small indication of pipeline status, that can be visible from branch page.

Figure 14. Indication of pipeline status on a branch page.

After every new push to the repository, the runner pulls new code and runs scripts. The
next step is to configure stages and add other important parameters to the configuration.
First, caching should be added. Since the project has a lot of dependencies, the process
of downloading all the dependencies can be very time consuming. It is not effective to
download them every time the new pipeline starts. There should be a way to download
the dependencies only once and then update if necessary, the same way as in the local

25

environment during development. GitLab configuration has a cache option for this purpose [54]. The project dependencies are located in node_modules folder. To add this
folder to cache, path to the folder should be added to cache paths. Listing 2 shows how
to add node_modules folder to runner’s cache.

cache:
paths:
- front/node_modules/

Listing 2. Adding cache to GitLab CI configuration.

If the same scripts are needed to be run before or after every job, there are
before_script and after_script GitLab options [54]. The scripts that written in
before_script, will be run before all jobs, including deploy jobs, but after the restoration of artifacts. The scripts from after_script will be run after every job. The project
does not require any scripts to be run after the jobs, but there is one command that
should be run before each job. Listing 3 shows setup of before_script for the project.

before_script:
- cd front

Listing 3. Adding before_script option to GitLab CI configuration.

As presented in Listing 3, the command to go to the frontend folder were moved from
test stage script to before_script, because all the frontend tasks are run from this
directory.

4.2

Deployment Automation

The setup for automated testing is ready. The next step is to set up Continuous Delivery.
This process includes build and deploy stages. Also, to make the pipeline clear, the
test stage from the previous configuration is divided into install and test stages.
The pipeline can be described as follows: install or update dependencies, then if the

26

dependencies were installed successfully run tests, then if all tests passed build production bundles, then ship those bundles to production server. In GitLab configuration, jobs
and stages can be named differently and stage can have multiple jobs, which are run in
parallel. Listing 4 shows new install stage, which has yarn-install job and new
build stage.

stages:
- install
- test
- build
yarn-install:
stage: install
script:
- yarn install
test:
stage: test
script:
- yarn test
build:
stage: build
script:
- yarn build
artifacts:
paths:
- dist/

Listing 4. New install and build stages.

As shown in Figure 4, build stage contains artifacts option. When building bundles,
a new file for every bundle is generated and saved to the dist folder. Then those files
should be transferred to the server. All the files generated during the job are accessible
only inside this job. To make them accessible from outside the job, path to the files or list
of file paths are specified under the GitLab artifacts option. The artifacts will be available to all later jobs and also for download on the Pipelines page. After pushing new
changes of the configuration file to GitLab, the pipeline status of the branch updates.
Figure 15 shows updated representation of the pipeline.

27

Figure 15. GitLab pipeline interface.

As presented in Figure 15, now GitLab pipeline includes three stages in order that was
described previously in stages parameter in Listing 4.

The production servers are run using Amazon Web Services. The project backend is
written in Python and it uses awscli Python tool to connect to the Amazon instance.
The same tool is used to transfer frontend production bundles from artifacts folder to
Amazon instance. For this job, a different image should be used, because Python is not
available in the node image. It is possible to specify different image in the GitLab configuration. The image parameter with a new image name should be added under the
job. Listing 5 shows deploy stage configuration.

stages:
- install
- test
- build
- deploy
amazon-deploy:
image: python
stage: deploy
script:
- pip install awscli
- aws s3 cp dist/ s3://<bucket_name>/ --recursive

Listing 5. Deploy stage.

28
As presented in Listing 5, the updated configuration includes new deploy stage and
amazon-deploy job, which uses python image. To get access to the Amazon instance, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY should be provided.
They can be added using variables section in configuration. Listing 6 shows how variables can be defined in GitLab CI configuration file.

variables:
variable1: value1
variable2: value2
...

Listing 6. Definition of variables in GitLab CI configuration.

As illustrated in Listing 6, any variables can be added using variables section. But it is
not recommended to use this section for secret variables as it is not secure [54]. Secret
variables should not be stored anywhere in the repository. GitLab has a special place for
storing secret variables. They can be added in Pipeline settings. Figure 16 shows GitLab
interface for adding secret variables.

Figure 16. Interface for adding secret variables.

Before the GitLab CI configuration updates were pushed to GitLab, it should be specified
that build and deploy stages should be triggered only for the master branch. GitLab
has only and except parameters, that define whether to run a specific job or not. It can
be defined by passing keywords, regex or just branch name to those parameters [54].
Listing 7 shows what should be added both to build and deploy stages.

29

only:
- master

Listing 7. Adding only option to GitLab CI configuration.

When a merge request is merged to master branch, it not always needed to deploy immediately to production. With GitLab CI it is possible have postpone a job, so it will be
waiting for pressing a play button to run. To apply this behavior, when GitLab parameter
is used. It can specify whether to run job on success, on failure, always or manually. In
the project, this parameter is set to “manual”, so when some feature branch is merged
to master, it installs the dependencies, runs tests, builds production bundles and then
wait for user interaction to deploy everything to production. Figure 17 depicts GitLab CI
manual job.

Figure 17. GitLab manual deploy.

As can be seen in Figure 17, the job is skipped and shown on Jobs page with “manual”
status. It has play button from the right side, so it can be run directly from the GitLab
interface.

After adding all the necessary stages and setting the parameters, the configuration can
be merged to the master branch. Listing 8 represents the result version of GitLab CI
configuration file.

30

image: node
before_script:
- cd front
stages:
- install
- test
- build
- deploy
yarn-install:
stage: install
script:
- yarn install
test:
stage: test
script:
- yarn test
build:
stage: build
script:
- yarn build
only:
- master
artifacts:
paths:
- dist/
amazon-deploy:
image: python
stage: deploy
script:
- pip install awscli
- aws s3 cp dist/ s3://<bucket_name>/ --recursive
when: manual
only:
- master
cache:
paths:
- front/node_modules/

Listing 8. Result version of GitLab CI configuration.

As illustrated in Listing 8, the complete GitLab CI configuration for the project includes
four stages: install, test, build and deploy; specifies cache paths, the order of
stages and in which conditions each job should be run.

31

When all the changes are pushed to GitLab and merge request to maser is created, it
can be noticed that the merge request page has new elements and looks slightly different
in comparison with previous ones. Now the merge request page also shows the status
of the pipeline. Figure 18 depict merge request page with the running pipeline.

Figure 18. GitLab merge request: running status.

As shown in Figure 18, the page shows pipeline status and different submit button. Instead of asking to merge immediately, it asks to merge only when the pipeline succeeds.
After the pipeline succeeds, the merge request page is updated. Figure 19 illustrates
merge request page with passed status.

Figure 19. GitLab merge request: passed status.

32

As can be seen in Figure 19, after all stages are finished, it is indicated in the interface,
that the pipeline is passed, and the branch can be successfully merged. But what if some
breaking changes to the feature branch are pushed? Figure 20 shows merge request
page with error status.

Figure 20. GitLab merge request: error status.

As illustrated in Figure 20, if there are some breaking changes, the status of the pipeline
is changed to “failed” and submit button becomes red. It is still possible to accept such
merge request, but the developer and the code reviewer are warned that this merge is
undesirable, and it will be better to fix the errors first.

4.3

Integration with Other Services

GitLab CI can be integrated with different services. There is some built-in support for
popular messengers, issue trackers, other CI tools, and webhooks for other services.
GitLab webhooks allow to send a POST request with data to the webhook URL if there
is any specific event happens. It supports GitLab events such as pushes, merge requests, as well as GitLab CI events such as pipeline status updates. [55]

33

Mattermost messenger [56] is used in the case company for internal communication. To
integrate GitLab with Mattermost, an incoming webhook integration should be added in
Mattermost settings. After that, on GitLab Integrations page, Mattermost pipeline notifications can be enabled by activating Pipeline Trigger. Figures 21 and 22 shows possible
Mattermost messages received from GitLab CI.

Figure 21. Mattermost success message.

Figure 22. Mattermost fail message.

As can be seen from Figure 21 and 22, the message includes the pipeline status and the
name of the branch. Additionally, the pipeline status is indicated by color: green for
passed pipelines and red for failed pipelines. The message also includes the name of
the user, who created the branch or made the merge request, so he gets a notification
immediately after any pipeline status change. It can be helpful especially in the case
when a pipeline fails, then the user can quickly start working on fixing bugs and update
the branch with fixes.

34

5

Results

As a result, automation of testing, building and deployment were achieved. The company’s web-services GitLab repository is now integrated with GitLab CI. The continuous
integration pipeline was setup for the project, which allows to improve and simplify the
flow of development and shipping changes to production.

5.1

Description of New Workflow

In comparison with the earlier workflow, the delivery process is simplified by removing
manual tasks and describing the entire procedure with all the necessary stages and commands in the configuration. The configuration is stored in one file in master branch. Now,
when a developer creates a new feature branch, he will have a configuration file included.
During the development, on every push to the repository, GitLab CI will start pipeline and
run tests. The pipeline will be also started on merge request to master branch when the
feature is ready. If the pipeline is passed, another developer will make a code review and
accept the merge request. After merging the feature branch to the master branch, on
Jobs page, there will be a play button available to run deploy stage and ship the new
feature to production.

5.2

Possible Improvements

The main improvement would be to add a staging environment. It will require a separate
server. GitLab allows creating different environments [57]. Staging can be configured two
ways. One way is to have one staging branch that will be automatically deployed to the
staging server. Thus, every feature branch will be merged to the staging branch and only
after undergoing tests staging branch will be merged to master branch. And the second
way is to have staging for every feature branch. The second way is preferable, but it
requires more resources.

Another improvement can be integration with Mattermost slash commands [58]. It will
add additional interface to perform common tasks, and it will allow to respond faster if a
problem is detected and rollback is needed.

35

During this project, a new major version of GitLab was released. This version includes a
new product called Auto DevOps [59]. Auto DevOps is built on top of GitLab CI and
includes auto build, auto test, auto code quality, auto review app, auto deploy and auto
monitoring functionality out of the box. If Auto DevOps is enabled in project settings, then
GitLab CI will automatically detect which language is used for application and which tools
are used. For example, if there is a Dockerfile in the repository, then it will use docker
build command to create a Docker image. Currently, this feature is in Beta and not
recommended for production use. But it might be an interesting solution and worth
switching after it gets stable, because it uses best practices of CI/CD configuration.

36

6

Discussion

The current study describes the DevOps principles and workflow. The results of the study
prove that the implementation of the DevOps practices makes the development process
more understandable and effective. The principles of DevOps can be applied to any
team, since the principles do not depend on the language, and the tools used for continuous integration and continuous delivery, support various languages and technologies.

Eight CI tools were described and compared in the study. The main contenders were
Jenkins and GitLab CI. Even though Jenkins has more functionality and it is more customizable, GitLab CI was chosen because it has better integration with the company
GitLab, a set of required options, a simpler setup, and user-friendly interface.

After completing the practical part, the changes were evaluated. It was noticed by the
team that less time is spent for testing and it becomes easier to do code reviews, because GitLab CI runs all the tests in background and indicates their status on merge
request page. Also, the CI tool helps to keep track of current changes. After some amount
of work is done and several commits are pushed to the repository, it notifies in the messenger whether all the tests have passed successfully. Another benefit is that the CI tool
helps to avoid mistakes, a person can miss something, but the machine works automatically.

Before the continuous integration tool was added to the project, Docker and Vagrant
were already in use. All the developers had the same development environment on their
working machines, but the testing and deploy processes were done manually. By using
GitLab CI, it was possible to achieve automation and this gap is filled.

The integration of the continuous integration tool and the configuration of the pipeline
made a significant impact on the development process of the company's web services.
Earlier, the deployment process was complex and required multiple manual tasks. Now
all the settings and scripts are stored directly in the project’s GitLab repository and any
member of the team can make a release. This is especially important in connection with
the fact that the company is growing, and new developers are joining the team.

37

7

Conclusions

The goal of the final year project was to integrate continuous integration system into the
ongoing project to provide continuous testing and continuous delivery. The objective of
the project was met successfully. CI tool was integrated with the version control system
and a continuous delivery pipeline was configured. Although there are still opportunities
for further enhancements of the pipeline, such as adding a staging server and improving
the test coverage.

This study shows how the use of the DevOps principles can change the workflow in the
company. Even though the release process itself takes the same amount of time, this
time is not taken from developers, but the process is running on background on a CI
server and the team get a notification when the release is ready. Thereby developers
can spend more time on implementing new features. It also affects product stability because the new version will never be released if there are any test failures. All this together
allows the company to optimize the development process, and react more quickly to
changing markets and customer demands.

38

References
1

Mike Loukides. Revisiting “What is DevOps” [online]. O’Reilly Radar; 2014.
URL: http://radar.oreilly.com/2014/06/revisiting-what-is-devops.html
Accessed 10 May 2017.

2

Richard Rapaport. A Short History of DevOps [online]. Rewrite Digital Magazine;
2014.
URL: https://www.ca.com/us/rewrite/articles/devops/a-short-history-ofdevops.html
Accessed 10 May 2017.

3

6 Problems DevOps Helps to Solve [online]. Datical; 2015.
URL: https://www.datical.com/blog/6-problems-devops-helps-solve/
Accessed 28 May 2017.

4

Ernest Mueller. What Is DevOps? [online]. The agile admin; 2017.
URL: https://theagileadmin.com/what-is-devops/
Accessed 12 May 2017.

5

Gene Kim, Jez Humble, Patrick Debois, John Willis. The DevOps Handbook.
Portland, OR: IT Revolution Press; 2015.

6

Scott Ambler. The Principles of Lean Software Development [online]. The Disciplined Agile (DA) Framework; 2016.
URL: http://www.disciplinedagiledelivery.com/lean-principles/
Accessed 12 May 2017.

7

Scott Ambler. Examining the Agile Manifesto [online]. Ambysoft; 2014.
URL: http://www.ambysoft.com/essays/agileManifesto.html
Accessed 12 May 2017.

8

Key features of Waterfall and Agile development methods [online]. M&S Consulting; 2017.
URL: http://www.mandsconsulting.com/key-features-of-waterfall-and-agile-development-methods
Accessed 21 May 2017.

9

Ashton Scheshan Gangadeen. What is DevOps? [online]. Supinfo; 2016.
URL: https://www.supinfo.com/articles/single/3652-what-is-devops
Accessed 21 May 2017.

10

Nick M Loghmani. Continuous Integration vs Continuous Delivery vs Continuous
Deployment [online]. LinkedIn; 2015.
URL: https://www.linkedin.com/pulse/continuous-integration-vs-delivery-deployment-nick-m-loghmani/
Accessed 21 May 2017.

11

CAMS [online]. DevOps Dictionary; 2015.
URL: http://devopsdictionary.com/wiki/CAMS
Accessed 25 May 2017.

39
12

John Willis. DevOps Culture (Part 1) [online]. IT Revolution; 2012.
URL: http://itrevolution.com/devops-culture-part-1/
Accessed 25 May 2017.

13

Gene Kim. The Three Ways: The Principles Underpinning DevOps [online]. IT
Revolution; 2012.
URL: http://itrevolution.com/the-three-ways-principles-underpinning-devops/
Accessed 27 May 2017.

14

Adam Bertram. The Three Ways: Core principles of DevOps [online]. InfoWorld;
2016.
URL: https://www.infoworld.com/article/3090137/devops/the-three-ways-coreprinciples-of-devops.html
Accessed 27 May 2017.

15

Sven Malvik. Top 3 DevOps Practices for Operational Stability [online].
DevOps.com; 2015.
URL: https://devops.com/top-3-devops-practices-operational-stability/
Accessed 28 May 2017.

16

Pete Goldin. 25 Advantages of DevOps - Part 4 [online]. DEVOPSdigest; 2016.
URL: http://www.devopsdigest.com/devops-advantages-4
Accessed 28 May 2017.

17

Pete Goldin. 25 Advantages of DevOps - Part 2 [online]. DEVOPSdigest; 2016.
URL: http://www.devopsdigest.com/devops-advantages-2
Accessed 28 May 2017.

18

Scott Johnston. DevOps Improves Time to Market — and Revenue [online]. Puppet blog; 2013.
URL: https://puppet.com/blog/devops-improves-time-to-market-%E2%80%94and-revenue
Accessed 28 May 2017.

19

Automation for DevOps [online]. Chef; 2016.
URL: https://pages.chef.io/rs/255-VFB-268/images/automation-for-devops.pdf
Accessed 2 June 2017.

20

Patrick W Roach. Dice Breakers: using DevOps principles and nerdery to reimagine Team building [online]. DevOps.com; 2015.
URL: https://devops.com/dice-breakers-using-devops-principles-nerdery-reimagine-team-building/
Accessed 2 June 2017.

21

Jim Bird. Change control in DevOps [online]. O’Reilly; 2016.
URL: https://www.oreilly.com/ideas/change-control-in-devops
Accessed 2 June 2017

22

Mirco Hering. Continuous everything in DevOps…what is the difference between
CI, CD, CD…? [online]. Accenture Technology; 2015.
URL: https://www.accenture.com/us-en/blogs/blogs-continuous-everythingdevops
Accessed 10 August 2017

40
23

What is Continuous Integration? [online]. Amazon AWS; 2017.
URL: https://aws.amazon.com/devops/continuous-integration/
Accessed 10 August 2017

24

Srini Penchikala. Interview and Book Review: Continuous Delivery [online]. InfoQ;
2011.
URL: https://www.infoq.com/articles/humble-farley-continuous-delivery
Accessed 10 August 2017

25

Martin Fowler. ContinuousDelivery [online]. Martin Fowler blog; 2013.
URL: https://martinfowler.com/bliki/ContinuousDelivery.html
Accessed 14 August 2017

26

Lianping Chen. Continuous Delivery: Huge Benefits, but Challenges Too [online].
InfoQ; 2015.
URL: https://www.infoq.com/articles/cd-benefits-challenges
Accessed 14 August 2017

27

Christopher Null. Infrastructure as code: The engine at the heart of DevOps
[online]. TechBeacon; 2015.
URL: https://techbeacon.com/infrastructure-code-engine-heart-devops
Accessed 17 August 2017

28

Alex Pott. Principles of Configuration Management - Part One [online]. CHAPTERTHREE Blog; 2014.
URL: https://www.chapterthree.com/blog/principles-of-configuration-management-part-one
Accessed 17 August 2017

29

Dan Radigan. Continuous integration, explained [online]. Atlassian; 2017.
URL: https://www.atlassian.com/continuous-delivery/continuous-integration-intro
Accessed 18 August 2017

30

Vladimir Pecanac. Top 8 Continuous Integration Tools (2017 edition) [online].
Code Project; 2017.
URL: https://www.codeproject.com/Articles/1080526/Top-Continuous-IntegrationTools
Accessed 18 August 2017

31

Alex Blewitt. Hudson Renames to Jenkins [online]. InfoQ; 2011.
URL: https://www.infoq.com/news/2011/01/jenkins
Accessed 18 August 2017

32

Plugins Index [online]. Jenkins; 2017.
URL: https://plugins.jenkins.io/
Accessed 18 August 2017

33

What is Jenkins and Use of it? [online]. Selenium Easy; 2016.
URL: http://www.seleniumeasy.com/jenkins-tutorials/what-is-jenkins-and-advantages-of-jenkins-continuous-integration-tool
Accessed 18 August 2017

41
34

Buy TeamCity [online]. TeamCity; 2017.
URL: https://www.jetbrains.com/teamcity/buy/
Accessed 23 August 2017

35

Features [online]. TeamCity; 2017.
URL: https://www.jetbrains.com/teamcity/features/
Accessed 23 August 2017

36

Kevin Deisz. Best Practices and Common Mistakes with Travis CI [online]. LocalyticsEng; 2017.
URL: http://eng.localytics.com/best-practices-and-common-mistakes-with-travisci/
Accessed 27 August 2017

37

ABS. Continuous Delivery Pipelines: GoCD vs Jenkins [online]. HighOps; 2014.
URL: https://highops.com/insights/continuous-delivery-pipelines-gocd-vs-jenkins
Accessed 27 August 2017

38

Ken Mugrage. Part 2 - It's Not CD if You Can't Deploy Right Now: Add Security
Testing to Your Deployment Pipelines [online]. Go; 2016.
URL: https://www.gocd.org/2016/02/08/not-done-unless-its-done-security.html
Accessed 27 August 2017

39

Kishanthan Thangarajah. Bamboo and Jenkins – Continuous Integration [online].
Kishanthan's Blog; 2011.
URL: https://kishanthan.wordpress.com/2011/12/18/bamboo-and-jenkins-continuous-integration/
Accessed 27 August 2017

40

Job van der Voort. GitLab 8.0 released with new looks and integrated CI! [online].
GitLab Blog; 2015.
URL: https://about.gitlab.com/2015/09/22/gitlab-8-0-released/
Accessed 27 August 2017

41

Margaret Rouse. YAML (YAML Ain't Markup Language) [online]. TechTarget;
2017.
URL: http://searchitoperations.techtarget.com/definition/YAML-YAML-AintMarkup-Language
Accessed 27 August 2017

42

Pierre de La Morinerie. Building our web-app on GitLab CI [online]. GitLab Blog;
2016.
URL: https://about.gitlab.com/2016/07/22/building-our-web-app-on-gitlab-ci/
Accessed 27 August 2017

43

GitLab Continuous Integration (GitLab CI) [online]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/ce/ci/
Accessed 27 August 2017

44

Ben Dougherty. Bamboo Vs. Travis CI Vs. Circle CI Vs. Codeship [online]. IT
Central Station; 2016.
URL: https://www.itcentralstation.com/product_reviews/travis-ci-review-32073-byben-dougherty
Accessed 27 August 2017

42
45

Alex Gorbatchev. Continuous Integration in the Cloud: Comparing Travis, Circle
and Codeship [online]. StrongLoop; 2015.
URL: https://strongloop.com/strongblog/node-js-travis-circle-codeship-compare/
Accessed 27 August 2017

46

Jez Humble. Continuous Testing [online]. Continuous Delivery; 2016.
URL: https://continuousdelivery.com/foundations/test-automation/
Accessed 3 September 2017

47

Ely Hechtel. Top 10 Benefits of Automated Testing [online]. SauseLabs; 2015.
URL: https://saucelabs.com/blog/top-10-benefits-of-automated-testing
Accessed 3 September 2017

48

Run GitLab Runner in a container [online]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/runner/install/docker.html
Accessed 11 September 2017

49

Registering Runners [online]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/runner/register/index.html
Accessed 11 September 2017

50

The GNU nano homepage [online]. The GNU nano; 2017.
URL: https://www.nano-editor.org/
Accessed 12 September 2017

51

Getting started with GitLab CI [online]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/ce/ci/quick_start/README.html
Accessed 12 September 2017

52

Yarn package manager [online]. Yarn; 2017.
URL: https://yarnpkg.com/lang/en/
Accessed 12 September 2017

53

CLI Introduction [online]. Yarn; 2017.
URL: https://yarnpkg.com/en/docs/cli/
Accessed 12 September 2017

54

Configuration of your jobs with .gitlab-ci.yml [online]. GitLab Documentation;
2017.
URL: https://docs.gitlab.com/ee/ci/yaml/
Accessed 12 September 2017

55

Project integrations [online]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/ee/user/project/integrations/
Accessed 14 September 2017

56

Mattermost [online]. Mattermost; 2017.
URL: https://about.mattermost.com/
Accessed 14 September 2017

57

Introduction to environments and deployments [oneline]. GitLab Documentation;
2017.
URL: https://docs.gitlab.com/ce/ci/environments.html
Accessed 1 October 2017

43
58

Mattermost slash commands [oneline]. GitLab Documentation; 2017.
URL: https://docs.gitlab.com/ee/user/project/integrations/mattermost_slash_commands.html
Accessed 1 October 2017

59

Mike Bartlett. GitLab 10.0 Released with Auto DevOps and Group Issue Boards
[online]. GitLab Blog; 2017.
URL: https://about.gitlab.com/2017/09/22/gitlab-10-0-released/
Accessed 1 October 2017

Mobolaji Sulaimon Kudaisi

Web Applications Content Management System

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
5 May 2017

Abstract

Author(s)
Title
Number of Pages
Date

Mobolaji Sulaimon Kudaisi
Web Applications Content Management System
32 pages
5 May 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Web Software Engineering

Instructor(s)

Kimmo Saurén, Senior Lecturer

Content management systems (CMSs) are World Wide Web platform software, developed by communities of web programmers, to develop a website and enable web
contents management such as animations, videos, text, audios and image. CMS has
made web development very easy and fast, even for a person with little or no
knowledge of web programming. The choice of selecting the right CMS is important,
because there are different types of CMSs designed and developed for different purposes.
The methodology used in this project is the Drupal software. Drupal is one of the best
and most used CMSs to develop website and managing web contents. Using Drupal
gives this project credibility about the challenges encountered while using this CMS
and how the challenges were solved.
During the project a sports website was developed using Drupal. Using Drupal is
flexible as it gives possibilities to develop any type of website, manage its contents
and customize the website themes.
This project has helped to simplify the basic features to help in selecting a CMS to
meet the desired need of an intended CMS administrator and users using Drupal as
a case study. Also, the challenges of maintaining a CMS become easier with this
project.

Keywords

Content Management Systems, Drupal, web, internet,
computers.

Contents

1 Introduction

2

3

1.1

History of the Internet

2

1.2

History of the World Wide Web

4

1.3

Internet Technologies

5

1.3.1

Computers Communication Over the Internet

7

1.3.2

Working Techniques of the Worldwide Web

12

Content Management Systems

14

2.1

Types of Web Contents

15

2.2

Content Management Systems Services to All Other Professions

16

2.3

Types of Content Management Systems Software

17

2.4

Drupal

20

2.4.1

Working with Drupal.

21

2.4.2

Features of Drupal

21

2.5

Managing Content

23

2.6

Choosing the Correct Content Managements Tools

23

Sustainability of Content Management Systems

25

3.1

Securing Content Management Systems

26

3.2

Cost of Running Content Management Systems

27

3.2.1

Cost of Hosting

28

3.2.2

Cost of Employing Information Technology Personnel

30

3.2.3

Cost of Upgrading

31

3.3
4

1

Efficiency of Content Management Systems Software

Conclusion

References

32
33
37

1

1 Introduction

There are hundreds of CMS software that are up and running, but they all work differently. Hence, this project using Drupal as a case study, has helped in simplifying the
features a proposed CMS user needs to know to help them make a correct choice selecting a desired CMS. Also explained in this project is the purpose of employing the use
of a CMS as to the types of website that a proposed CMS user’s desires, which is used
to help streamline the correct CMS to choose from. The general challenges encountered,
how to notice and handle the challenges when using any of the CMS are also explained.

Management of information is a vital aspect of information technology thus managing of
information is as important as gathering it. Data can be processed, transformed into information and can be broadcasted through several media platforms. The world-wide web
media platform, which is a broadcasting platform displays processed information and the
information displayed on this platform is referred to as web contents.

Among several digital media platform technologies, which are employed in presenting
contents, the worldwide web has taken centre stage in the information and media industry by managing and distributing contents as well as displaying these contents on a single
computing platform. The web is one of the new media and it has expediently been able
to embed many multimedia into it, thereby challenging the conventional media to its acceptability and flexibility. The most dynamic websites have immense multimedia technologies embedded in them. Thus the need to use a content management system arises.

CMS (Content Management System) are software that are used in managing digital and
web contents. They are all web-based software and they give different experiences and
services as to managing digital contents. Some allow multimedia integration while some
limit and control the number of multiple media they can take. They also give different
services, controls and users managements. The web and internet technologies on which
the CMS operates, are old and they have evolved with time.

This chapter gives an insight into how web, internet, media and information processing
technologies have evolved with time. One of the pronounced breakthroughs was turning
around media broadcast from a single conventional media platform to being a multimedia

2

platform and how they have developed to accommodate CMS to manage web contents.
First the history of the internet and other technologies that support web applications,
managing web contents and how they evolved over the years since their inception.
1.1

History of the Internet

The internet has gone through several phases of development, starting from a small
idea, visions and implementation to something achievable. Up till date the internet is still
evolving. There are several inventions that have led to the actualization of the internet
and have brought changes in several fields, such as telecommunications, commerce,
manufacturing and media. These inventions have helped in modifying the way these
fields operate, the traditional way of operations of these fields gave space for machines
and helped to define the industrial, business and communications revolution.

The postulation and invention made by Hans Christian Oersted, a Danish scientist, who
demonstrated the association between magnetism and electricity. Hans postulation was
that electric current generates magnetic field, this hypothesis leads to the invention of a
Galvanometer in 1822, Electromagnet in 1825, using these electronic inventions the first
Electric

Telegraph was developed by Carl Gauss and W.E weber at the university of Göttingen,
Germany in 1825. The development of the electric telegraph continues, and in1837 Samuel Morse developed a widely used single wired electric telegraph with fast signal compared to the multiple wired European telegraph. [1, 8.] Telegraph gives rise to the mass
communication technology, with this technology people, could pass messages almost
immediately over a long distance.

In 1866 in the quest to make a formidable communication link between northern America
and Europe, in order to have a transatlantic Telegraph. A submarine telegraph cable was
laid in the Atlantic Ocean. The cable was laid from Valentia Bay, Ireland, to St. John’s
Newfoundland, and spanned distance of approximately 4,000 kilometres. The cable core
was made up of twenty-seven interwoven copper wires surrounded by an insulating layer
of gutta-percha. It also had an outer sheath of woven iron strands covering the core. [1,
10.]

In 1951, a new ground was broken when Claude Shannon an electrical engineer in Bell
Telephone Laboratory outlined the principle of transferring information through noisy

3

channels. It was in his theory called “A mathematical theory of communication” where
the term “bit” was first introduced to represent the mathematical unit for information. [1,
30.]

In the late 1950s to 1960s, competition between the Soviet Union and the United States
spurred the invention of the satellite. In 1957, the Soviet Union launched Sputnik the first
man-made satellite weighing 184 pounds, to space sputnik 2 was launched same year.
This made the USA to embark on massive funding on technological research in conjunction with the academics, scientists, engineers and researchers, which give birth to ARPA
(Advanced Research Projects Agency) in 1958 for exploring computers and information
processing.

National Aeronautics and Space Administration (NASA) was later created from ARPA to
handle space exploration. It was part of the privately funded aspect of ARPA that Larry
Robert a computer scientist who proved that computers far away from each other could
exchange messages with his invention, by connecting his computer in Boston through a
phone line with another computer in California. This technology was named ARPAnet.
Larry came up with a working principle (Interface Messaging Processor) sketch, of the
ARPAnet showing how messages are routed from a source to their destination. This
marked the beginning of the internet.

Paul Baran a computer scientist who worked for the United State of America military in
1962 came up with a concept that the government of the United States needed to set up
a distributed communications system that could withstand a nuclear attack. In his presentation he came up with reasons on how information could be sent over many routes
instead of one pathway that is used in sending information from one destination to another. This idea brings about the internet concept known as redundant routing and his
idea of distributed communication give birth to packet switching.

A similar idea came up in Joseph C. R Licklider in his writing, a psychologist who later
joined ARPA.In 1963 he proposed a network that can allow people to connect and communicate together through their computers across geographical spaces. It was also
within the late 1950s to 1960s that the modem (modulator-demodulator), which is an
important device in the internet world, was developed. It was built in 1958 by communi-

4

cation engineers in the Bell laboratory. In the 1960s, Ted Nelson, a great thinker, theorized and suggested that documents stored on computers can be linked together. His
theory give rise to hyperlinks and hypertext used on the World Wide Web. [1, 33-62.]

1.2

History of the World Wide Web

The history of web is dated back to the 1990s. where the web was introduced to the
populace and for commercial usage. Basically, the web was confined to some communities such as top universities, research laboratories and was not made public.

In 1991 software architecture for the world-wide web and the first GUI browser was completed by Tim Berners-Lee called “World Wide Web” (WWW). The English-born Tim
Berners-Lee a physicist who joined Centre Européan pour la Recherche Nucléaire
(CERN) in the effort of improving real-time- data acquisition system, started out by asking
CERN to fund the development of his idea of a shared information space, the hypertext
system which he proposed in 1989.This idea leads to the development of the web of
hypertext documents with which people can communicate with each other with the help
of a computer.
Inventions are born out of solving problems. Tim Berners-Lee’s idea was developed out
of the need to solve the problem of exchange of data due to the difference in encoding
and networking the data. It was with this problem of compatibility he developed the web
so that exchange of data can be easy and compatible with different languages and operating systems.

From 1991 to 1994 WWW grew in awareness and people started reorganizing its potentials. Tim Berners-Lee’s idea took another turn due to the running out of funds to continue
his project at CERN (Centre Européan pour la Recherche Nucléaire). His idea was introduced to the internet communities to see how they can make the web idea become
better, this particular proposal gave birth to different browsers, which enables people to
read and navigate hypertext documents on the WWW. Several browsers were developed
due to this open proposal such as Erwise, Midas, cello and ViolaWWW.

Other applications seen on the web today were developed when the WWW was thrown
open to the public for dynamic development. Lots of programming companies and programmers took advantage of this, to key in to Tim Berners-Lee’s idea such as the web

5

having animation and audio aside the initial text format. That was the work of Sun Microsystems which was founded in 1982.After Tim Berners-Lee’s idea, all other components of the web have been developed to make the web more powerful and user-friendly
such as the web laws and copyright law, other programming languages that run or can
be used in developing the web.

In 1993, a graphical browser called the Mosaic Web browser was developed by Marc
Andreessen at the National Centre for Supercomputing Applications (NCSA). Also in
1993, the Inter Network Information Centre (NIC) at the U.S department of Defence assigns Domain Names to the collection of addresses of computers connected to ARPAnet.
In 1994, a law was passed by the United State Congress “The national communications
competition and information infrastructure Act” that allows for telecommunication companies to provide equal and available services to any person willing to pay for the service.
In October 1994, Tim Berners-Lee gave directives to form the World Wide Web Consortium to foster standard and interoperability. This consortium persuaded institutions, researchers, and academics, to discuss and revolutionize the web. The same year the first
international World Wide Web conference was held in Geneva, Switzerland where topics
on different bowsers, software, web security, multilingual text, web privacy and web
search were deliberated on and solutions were proposed. By 1998, seven of this conference have been held. [1, 162-164.] The 26th World Wide Web conference was held in
Perth Australia from 3rd to 7th April 2017.

The history of developing the internet and the web has been a good example of how
ideas, visions and competition turn into realities, these achievements and ground-breaking inventions paved way for international network for commerce, dissemination of news,
surfing the internet through World Wide Web. The World Wide Web and the internet as
an aspect of communication technology have made the world a global village.

1.3

Internet Technologies

The Internet like a tree, has a trunk, branches and leaves. The branches are smaller
clusters of connected computing devices within an area, country or any location, the
leaves are computing devices attached to the branches and the Internet is the tree trunk,
which connects the branches. The leaves get their nutrients from the branches via the
tree trunk and then the leaves grow and become green, in this context Internet supplies

6

a network to the branched computing devices so they can communicate with other similar
branches sharing the same trunk.

The Internet is a huge and popular computer network in the world. It can be technically
referred to as the network of networks and the process of networking computers and
other devices electronically, in order to make communication, sharing of information,
software and hardware between these connected devices easy. The process of connecting several computers together is referred to as computer networking. Computers connect and access each other by connecting to servers, belonging to an Internet service
providers (ISPs), this ISPs serve as gateways to the Internet.

ISPs is a company that makes available Internet services to their subscribers for a fee.
ISP connects small groups of network computers which can be referred to as regional
networks to a major high speed network within a country called a backbone network and
these backbone network are connected to other countries’ backbone networks which
forms a huge and formidable network called the Internet. [2,30-33.] ISPs can provide
wireless and wired connectivity using any of the access technologies such as Digital
Subscriber Line (DSL), cable, WIFI, Fiber To the Home (FTTH), Worldwide Interoperability for Microwave Access (WiMAX) and cellular. [2,41-50.]

The World Wide Web is a collection of documents called web pages; these web pages
are stored and can be accessed, from a computer called web servers. A webserver can
host one or more web applications or servers and they store web pages on their hard
drives. These servers are always connected to the Internet for easy accessibility to the
web pages with a computer or other devices that allows access to a web.

Apart from the webserver which is very important to this topic and report there are other
types of servers with different functionalities such as application server, catalogue, communication, computing, fax, file, game, mail, media, database, proxy, print, sound servers. Some of these servers work independently while some work with other servers for
example the web server and the database server can both be used on a dynamic website. Most websites are now multimedia websites with different servers supplying them
contents.

As stated above, the web server is a host and the host includes desktop computers, and
mobile computers connected to the Internet. The word “host” originated from the fact that

7

these computing devices allow software applications to run on them, thereby hosting
applications. The host can also be referred to an “end system”. The host can be divided
into two categories: clients and servers. Literally clients are indirectly connected to the
server via the ISPs such as our Personal Computers, Personal Digital Assistants and
servers are referred to as a machine that stores resources or information for further distribution. These resources could be data in a database server, web pages in a webserver, or emails in a mail server.

Both client and servers have programs/applications that run on them and they communicate and provide services to each other over the Internet. [2,37-38.] Apart from accessing
the contents of webpages, it is also proper to highlight that there are several activities
that are done via the Internet such as sending and receiving electronic mails, and Instant
Messages (IMs).

1.3.1

Computers Communication Over the Internet

There is a structured layer model used in representing the protocols on the Internet. This
model simplifies how computing devices can process and send packets (data) to each
other without interference and delays over the Internet. It is a global network model designed by the Organization for Standardization (ISO).

This model is called OSI (Open Systems Interconnection) reference model. This model
has seven layers, Application, Presentation, Session, Transport, Network, Link, and
Physical Layers.
The OSI model is still in use only that it has been simplified to what is now called the
TCP/IP model. The TCP/IP model terminologies and protocol are the same with the OSI
model only that it becomes simplified and efficient by merging the layers in to four. Application, Transport, Internet and Network layer.

8

Table 1 The OSI Reference model with seven layers and the TCP/IP model with four layers

Application
Presentation

Application

Session
Transport

Transport

Network

Internet

Data Link

Network interface

Physical

As showed by table 1, the OSI’s Application, presentation, session layers are merged
into TCP/IP’s Application layer while the OSI’s Datalink, Physical layers are merged into
TCP/IP’s Application layer. The OSI’s Network layer is now the Internet layer in the
TCP/IP model. Transport layers remain unchanged in both models. Both the OSI and
TCP/IP model have protocols that guide the activities of each layers in them and the
collection of these protocols is called the Internet protocol stack.

The internet protocol stack shows and tells what happened when a destination host receives packets and how it sends packets (source-host) in the Internet. It tells what protocol(s) is or are used and at what stage of the model the protocol springs to action and
what services are provided at each stages of the model layers. A protocol layer can be
implemented in a hardware or software or on both at the same time. These protocol
layers are present in both the source host and the destination host, and they work such
that messages or packets are encapsulated down through the layers in the source host
to the network and decapsulated up the layers in the destination host.

The application Layer is available in a multiple end systems (both the source and destination host) which eases the exchange of packets of information between application
layers in these multiple-end systems. This layer has many protocols such as HyperText
Transfer Protocol (HTTP) which help in delivering web documents, Simple Mail Transfer

9

Protocol (SMTP) which helps in the transferring of email messages, and File Transfer
Protocol (FTP) which helps in the transferring of files between end systems.

The transport Layer makes sure application-layer messages are transported between
applications end points with the help of its TCP (Transmission Control Protocol) or UDP
(User Datagram Protocol). It also makes sure there is a speed match when sending
messages between end points.TCP in this layer breaks long messages into smaller segments, and also organizes, maintain a congestion message control mechanism.
Transport protocols function in the end systems not in the network router.The transport
layer packet can be referred to as segment. [2,224.]

The network Layer contains the IP protocol and other routing protocols. This layer makes
sure that datagrams which are network layer packets move from one host to another.
This layer provides the service of making sure the transport layer’s segment be delivered
to the transport layer in the destination host.

The Link Layer, is saddled with the responsibility of traversing datagram through several
links from the source to the destination. Examples of link layer protocols are WiFi, Ethernet, and point-to-point protocol. The link layer packets can be referred to as frames.

The physical layer moves bits within the frame from one host to another. The protocols
in this layer depend on the transmission medium such as twisted copper wire, single fibre
optics of the link thus Ethernet has several physical protocols, one protocol for fiber,
another for twisted pair copper wire etc. [2, 76-79.]

Apart from connecting and easing communication between computing devices, the Internet can also be seen as a service provider to applications such as instant messaging,
VoIP (voice over IP), electronic email, web surfing, video streaming, peer to peer file
sharing, remote logging and many more. These applications operate and work on hosts
and they are connected to other hosts using the same or related applications with the
help of the packet switches. One of the aims of developing applications that run on our
computing devices are to share data, and for this to happen, these applications should
be compatible. The hosts attached to the Internet provide an Application Programming
Interface (API) which sets the rules to which data are shared between hosts via the API

10

sockets. There are different sockets on the Internet that is why when developing an Internet application, one of the Internet’s service designed for the application type has to
be chosen.

It is also important to look at the technologies that connect remote computers and host
together. These connections are made possible with the help of the access networks
and the network core they connect computing devices together all around the world.
Access networks consist of the telecommunication technologies ranging from household
telephone line appliances, modems and wired telephones, to base stations and they are
used in connecting to the Internet via an ISPs.

Local wired telephone infrastructure, dial-up modems are used in connecting to the Internet. Digital subscriber lines and cables, is a broadband connection for residential
apartments, this technology is more prominent in Europe and it is better than the dial up
Internet access, in speed and services.

Television Internet cable using an existing cable television infrastructure with the help of
coaxial cables as amplifiers to provide network for households, this network technology
uses an external modem for connection with the television company that provide the
cable Internet access. Fiber-to-the-home uses optical fibers instead of coaxial cable or
twisted paired wires to connect homes. This technology provides high transmission rate
for home Internet.

Ethernet is the most used technology for cooperate and higher institution networks, Local
Area Network(LAN) is used to connect hosts to the edge router.The first router in the
access network is a refer to as edge router. WIFI provides a wireless Internet connections and there are two types of wireless Internet access. There is the Wireless Local
Area Network(WLAN) and Wide Area Wireless Access Networks(WAWAN). Wireless
Local Area Network(WLAN) works in such a way that there is an access point that provides the wireless service and the users connected to the wireless access point have to
be within a few tens of meters of the access point while the Wide Area Wireless Access
Networks(WAWAN) make use the phone cellular infrastructure to provide access to base
stations that are tens of kilometres away.

There are also some important technologies under physical media such as twisted-pair
copper wires which are mostly used for residential Internet access, because of its low bit

11

rate transmission, people have to opt for fiber-optic technology. Fiber optics can support
huge bit rates. It is used for long distance links, secured, free from interference. There
are also the terrestrial radio channels, they require no physical wire, they transmit signals
in electromagnetic spectrum thus carry signals to long distances.

The Satellite Radio Channel which consist of communication satellite that links two or
more ground stations. There are two satellites involved in this technology they are Geostationary Satellites which is permanently stationed above the earth surface and LowEarth Orbiting satellites is closer to the earth surface, rotates round the earth surface
and communicates with ground stations. However as good as these access networks
technologies are, they have draw backs such as interference, multipath fading, path loss.

In the Core of network system, the major aim is to make sure data moves from one host
to the other via network of links and switches. There several types of communication
links with different physical media such as copper wires, coaxial cable, radio spectrum,
fibre optics. When one computing device wants to send data to another computing device, these data are packaged and are called packets.

Just like postal mail a packet contain header as it address. In the header, there is an
address which tells the packet destination. When a packet arrives at a router (helps in
distributing and forwarding the packets) in the network, the router checks the packet for
its destination and with the routers forwarding table which is a map of destination addresses the router prepares the packet to it appropriate outbound link. There are two
processes that makes sure this happens, they are circuit switching and packet switching.

Circuit switching provides an end to end connection between two or more host. Thus, for
these host to communicate and share data a circuit has to be reserved. Packet switching
on the other hand uses store and forward transmission meaning that the switch receives
all the packets by storing them at its input before it starts transmitting the packets of
course, this causes delays however packet switching is efficient in that it allocates link
use on demand.

Some of these technologies have been upgraded while some are obsolete and no more
in use. Some have drawbacks such as slow services, mode of operation, transmission
rate, downloading rate. Notwithstanding they have helped in connecting devices to the

12

Internet and they have helped shaped the Internet world by connecting people and businesses together. [2, 30-60.]

1.3.2

Working Techniques of the Worldwide Web

Web application can be access via a browser such as Firefox, Internet explorer, safari,
google chrome. These browsers are used for surfing the Internet. The web servers host
web applications. The web browser can be called a web client; it is used to communicate
with the webserver and they both use protocols for easy communication. There are several protocols the web client uses but the most popular one is the HyperText Transfer
protocol or HTTPS, which is a secured version of the protocol used by mostly commercial
sites that deals in secured transaction. There is a process, a computer gets a web page
from the server, but first an overview of what formulates the whole server.

Servers basically are hardware and computers with data, they are connected to the Internet and they should be able to handle traffic such as processing data request sent to
them from other computers. Servers are host, so they have OS (Operating System) running on them. The OS running on the servers have web services. If the OS is windows,
it is likely that IIS will be it web service and if it is Linux the web service is likely to be
Apache.

Several coding languages are deployed in running the web server such as HTML, PHP,
PERL, ASP, C, C SHARP etc. and these languages help to process any request send to
the server. CMS also run on these servers, which helps without having to know how to
program with the languages listed above or how they work. The illustration below states
how world-wide web connects to the server using protocols as a means of communication which is the working techniques of the world-wide web.

Scenario:

Computers communicate with each other over the Internet using IP addresses. Here is
a scenario where a computer is connected to an Ethernet cable connected to an Ethernet
switch, which is then connected to a router. The router is connected to an ISPs.The DNS
(Domain Name System) server is inside the IS Providers network. since computers access each other via IP addresses which are rather too long for the Internet users to

13

remember but with the help of DNS which keeps directory of Domain names and translate them into IP addresses and vice versa. Domain names are easy to remember. The
connection and interaction of a computer trying to fetch a web page is grouped into two
phases:

PHASE ONE CONNECTION:

When a computer is connected to the Internet, it need to initiate a DHCP (Dynamic Host
Configuration Protocol) in order to obtain an IP address with other information from the
local DHCP server. During this process, the computer gets its IP address, the IP address
of its DNS Server and the default gateway for forwarding its IP (gateway router). A networking components have been initiated with this process and the computer can now
surf the Internet.

PHASE TWO CONNECTION:

When the URL (Uniform Resource Locator) string (for example www.joy.com) is entered
into the web browser. A DNS query message, which contain the URL string entered into
the web browser, is sent with the DNS IP address gotten from PHASE ONE connection
via the gateway router to the DNS server. The computer IP address is also attached to
this query, so that when the address is resolved by the DNS server it can send the response back to the computer that made the query.
When the URL string gets to the DNS server’s database which interprets, check the
URL string and find the DNS resource record that contain the IP address for the url string,
then the DNS server generate a reply message including host name-to-IP address mapping which is sent through the router to the Ethernet switch then to the computer.The
computer then extract the IP address of the server where the URL string is domicile, from
the DNS message. Then the computer is now ready to connect to the URL string server.

The web browser initializes a TCP connection with the server, once the initialization is
done, both the server and the browser processes access TCP via their socket interfaces.
The TCP in the computer must perform a TCP synchronization with port destination, port
80(HTTP). This synchronization message contains the computer IP address; the MAC
address of the gateway router are forwarded to the URL string network via the router.

14

The message is received by the port dedicated for the TCP connection between the URL
string HTTP server and the computer.

A TCP synchronization acknowledgement message is sent back to the computer dedicated socket. The socket is now connected. The computer browser then generates the
HTTP GET message, which contains a URL request to be fetched. This message is
written into the socket and it is sent to the URL string network through the dedicated port
and socket. The server at the URL string receives and reads the HTTP GET message
from the TCP socket and in return generates HTTP response message which contain
the requested page content in it body to the TCP socket an it is returned back to the
socket interface of the computer. The computer then uses the client (front end) software
installed on it, to read and extract the html page from the body of the HTTP response
message and the web page is displayed to the web browser. [2,531-536.]

2

Content Management Systems

Content management system (CMS) are web development frameworks, and they are
being developed by communities of web programmers and designers with the purpose
of developing and managing a website and its contents.These frameworks make available the platform where web contents can be presented, edited, shared and used by several people. Thus, the choice of selecting the right CMS is important, because there are
different kinds of CMS and they come with different purposes, technicalities and problems.

These CMS are designed and developed such that non-IT professional from all works of
life and of different ages across the world will be able to develop their own websites to
meet their needs and desires. These non-IT professionals do not need to know the basics about web development and programming, with these CMS, they can be able to
develop their website with ease. All that is required from them is to learn how to use the
tools on the CMS software and they are ready to develop their websites and also manage
the contents on the website.

The CMS users or somebody planning to use any of the CMS, need to know the right
CMS to use to suit their purpose. CMS have lifted the burden of coding websites to what
I called “drag and use”. The frame works are there, predefined functions, themes and

15

application that are ready to be used, also most of these content management systems
gives the freedom to customize or develop themes, modules (functions) to use for a
website, which requires knowing how to program on the web or having knowledge about
web programming.

As easy as these CMS have made web development easier so are the problems encountered using them but with the help of the CMS’ community of programmers there is
nothing to worry about, because they are always there to help with any difficulties encountered by the users of their CMS. There is more to developing a website, by making
sure the website and its contents are dynamic, in other words, having a robust and dynamic websites with good contents goes a long way to define how attractive the website
will be appealing to the users of the website. The more attractive and better a website is,
the more users and patronages it gets.

2.1

Types of Web Contents

It will be good to know what contents these CMS supports which is a head start to knowing the type of CMS to choose from or work with. It is amazing to know there are standards for any type of contents on a web page. There was once a time when web pages
are just text without images and videos, they are just static with large chunk of text, which
are so boring, as the web evolves so does it contents, the need to attach and publish
contents, such as images and videos arises as well as managing them.

Right from the design of these CMS the designers will have to outlined what content will
be supported by their frame work. However, most CMS supports contents such as both
static and animated text, images and videos. Another factor that determines the content
on the webpages of a website is the purpose of the website, which determines the type
of content that will be on the site.

Entertainment Websites is a group of website type. The purpose of these type of website
is to provide amusement, recreation and relaxation. In this kind of website group, the
contents will be videos, animation, and audio.

Intranet website is an organizational information system which can be accessed through
browsers. This requires password and it is not accessible to the public. For example,
Helsinki Metropolia University of applied science tuubi portal which can only be accessed

16

by the school workers and students. They allow sharing of data, transaction process, file
upload and easy communication within an organization. The kind of contents will be text,
images.[A1]
[A2]

E-Commerce website is a business to consumer, business to business group of site.
Most of this type of sites’ aim is to sell products and services, and link chain of businesses
together. The content of this kind of websites will be images, videos, text.

Information website is a type of websites which is used in creating awareness and it is a
vast type of site. [5,10-12.]

CMS allow it users (administrators) which are the owners of the sites developed from
CMS to have total control of the website. Thus, the administrators have the power to add
contents to his or her website and also manages all the affairs of the website. There are
two ways to generate content using CMS, CMS allows generating and developing own
personal content such as uploading your own videos, pictures, writings and all sort of
allowed contents on a site or using a module call the aggregator which is a default and
pre-installed module on most downloaded Drupal software used in getting syndicate contents from other website with the RSS (Rich Site Summary) feeds.

2.2

Content Management Systems Services to All Other Professions

CMS have help to bring the web programmer, designer and all people from different
walks of life that need the services of the web together, giving them the power to own
and control their websites and its contents. Companies both profit making and non-profit
making, now have a new way of presenting their products and ideas. They have moved
from the traditional means of presenting their ideas, services and products to the web
platform, which has made web one of the best media platform to do business. The burden of time wasting transaction of business has been removed and people do businesses without delays. Professionals, entrepreneurs from all walks of life are employing
the services of CMS, for business, leisure, political and social purpose. Financial institutions, airlines, government parastatals, online shops have also started employing the use
of CMS.

Explaining further, in the business world, there are lots of competition and what makes
one business stand out from the others is the customer service. Customer service is

17

making sure your customer get what he or she wants and on time. This can be achieved
with the help of the web platform’s content management systems. The world is a global
village therefore business and service can be done with different people, of all works of
life all around the world.

Employing the use of CMS for business or businesses is a step that makes the business
standout, furthermore, rendering services has to be professional. How a website and its
contents look like or presented on a website will determine patronage the owner of the
website will get. CMS gives the power to enhance businesses and services to a desired
level or achievement.

Finally deploying CMS to help in business and services will bring about availability, commitments, satisfaction and of course income between people of all works of life, business
owner and customers.

2.3

Types of Content Management Systems Software

There are hundreds of CMS, and they have different purposes and functionality, however
amongst them there are few that are used more frequently and they have strong community of programmers that keep updating and inventing new ideas and functionalities
for their various CMS systems. Most of these CMS are free open source applications but
they have some advanced packages and chains of products, that charges planned fee
to use them. Some of them have clouds storage space they sell or rent out to their users.
Virtually all these CMS have developers’ communities and forums where discussions
about everything ranging from usability, flexibility, availability and security of the CMS.
This community have programmers who are responsible for updates and for security
patches of the CMS.

Most of these CMS official website specifies that their CMS are secured. Nevertheless,
any system can be considered secured if it has not and never been attacked. As long as
there are human deficiencies and error factors, there will always be loopholes or vulnerabilities.

18

Table 2. Purposes of some CMS with the type of frame work programming language used
in developing them.

CMS
Joomla[7][8]

FRAMEWORK TECHNOLOGY
PHP framework

DotNetNuke[9]

.NET framework

TextPattern[10]

PHP framework

Umbraco[11]

ASP.NET framework

ModX[12]

PHP framework

Word press[13]

PHP framework

RefineryCMS[14]

Ruby on Rails(Rails)

TinyCMS[15]

PHP framework

Magnolia[16]

Java framework

Liferay[17]

Java framework

PURPOSES
Used to develop any kind of
site and online application
Used in developing different
website and intranets.
It has a browser -based interface in over 40 languages
and used for any type of
websites and content publishing.
It is used for developing media sites and it has an enterprise package for developing
a commercial website.
Good for marketing websites
with a robust support and
storage facility to withstand
heavy users traffic
Used to develop blogs and
any type of websites.
Used in developing websites
and it available in 30 languages
It is does not use databases,
it storage mechanisms are
simple text files thus it does
not support many pages
however it is extremely fast
and easy to use. That is why
it is called Tiny.
It is an enterprise CMS.for
developing commerce and
business sites. It allows its
users to publish contents
from their smart phones and
tablets. It has different layout
to choose from, for your contents.
It is an open source enterprise frame work,for developing a robust business and
commerce website

19

Ametys Liferay[18]

Java framework

Ph7CMS Liferay[19]

PHP framework

Used in developing social
websites, business and real
time blogging, a shared business tool web applications
such as schedule calendar,
document sharing.
This is used in developing
dating and social network
websites.

Table 2, shows that CMS can be used to develop virtually all types of websites thus CMS
is the new software technology for web development.

Table 3. The number of active users of several CMS, their year of establishment and
how secured they are.

CMS

Year

users

Joomla[7][8]

2005

27,000,000
downloads
750,000powered
website

DotNetNuke[9]
TextPattern[10]
Umbraco[11]
ModX[12]
Word press[13]
RefineryCMS[14]
TinyCMS[15]
Mongolia[16]
Liferay[17]
Ametys CMS[18]

2003
2004
2005
2004

401,858 active
installation
13,892 users

1,800 Enterprise
customers
Over 3 00000
users

Developer
Community Supports
yes

open
source(free)

secured

yes

yes

yes

yes

yes

yes
yes

yes
yes

yes
yes

yes
yes
yes
yes

yes
yes
yes
yes

yes
yes
yes
yes

yes

yes

yes

yes

yes

yes

According to the table 3, the developer Community Supports column shows that most of
these CMS have community of programmers that help with upgrading, updating and also
helping users on how to go about using the CMS. These community of programmers are
on standby and they use the CMS official website to attend to their users, subscribers.
Some use google plus, GitHub to share files and updates and to help check bugs. Some
even use social media such as tweeter and Facebook for feedbacks and help.

20

These CMS make their money from their chains of products and packages they sell to
their users. They allow the use of their CMS but for extra functionalities such as some
advance functionalities, themes, more storage system, add-ons for a website comes with
charged fees or they give trial version which last for a particular duration of time.
Table 3, shows that most of these CMS are open source application that can be downloaded for free and most of these CMS have been in existence for a decade, which
means that they are growing and there are still rooms for improvements.

2.4

Drupal

Drupal is a free downloadable software used in web publishing. It is one of the thousand
software for people to publish contents online such as blogs, news, photos, products,
documents, events and more. Drupal has been around for more than a decade, since
year 2000 and it is being upgraded by a huge and formidable community of developers
and these developers are volunteers.

People at Drupal make their money by selling services, themes, modules and more to
Drupal users. Modules are files containing functionalities and they are written with Hypertext pre-processor (PHP). Some of these themes and modules are free and while
they are making their money via sales made on Drupal platform they also keep the Drupal project up and running.

Drupal was created by Dries Buytaert.He is still the leader of Drupal till date. Drupal is
being used by people of different career background, experience, age, business, Nonprofit organizations and governments.

Drupal has many built in features, with just a click, and without writing a code allows it
users to do more with the tools in developing their desired websites. It gives the user a
total control of their website and it is cost free, nonetheless at some point money might
be involved, perhaps when buying modules or themes. It allows it users to also develop
their own themes or modules. [3,2-5.]

21

2.4.1

Working with Drupal.

Drupal software is free to download and use from Drupal official website. It has several
features to choose from, giving it users the feel of designing their own ideal website.
However, there are other designs, themes that can be download for free and some have
price tags on them. [3,3.]

After downloading the Drupal files, the file is extracted to a preferred computer and as
stated in the previous chapter, that Drupal just like any other CMS are been downloaded
on a computer. During the installation of Drupal on the computer, it will ask for details of
the installer who will be the Administrator/owner. Also, details such as the administrator
name, password to be used, site name to be used, email address for feedbacks, database name and type to be used with the CMS.

All these details are important for security reasons and for the proper management of
the site by the owner/administrator. Having both the administrator name which is also
the username and the password set during the installation session. Thus, this credentials
will be used to login to the downloaded and installed Drupal frame work software to start
developing a website and its contents. [3,26-48.]
2.4.2

Features of Drupal

There are common features that can be found in any Drupal version. These features
have been developed, updated and upgraded through several versions of Drupal. Drupal
like every CMS make use of access control mechanism for authorization to control and
secure any Drupal powered CMS websites.

What this means is that there is an administrator who can be the owner, or IT personnel
of a company that manages the website. The administrator will determine what happens
with and on the website. The administrator accepts users, customers, fans signups, feedbacks and response and he or she will also be responsible for updating the website
remember, Drupal gives its owner or users’ the total control over their website.

Drupal allows getting content from any source provided the source gives the permission
to use their contents meaning Drupal is not responsible for copy right infringement. The
administrator is responsible for that, he or she checks if it is allowed to copy a content

22

from a source or not. The administrator also give other users or owners of other CMS
the permission to copy or not to copy his or her own contents (materials).

Drupal allows it users to customize their own themes although, there are some themes
that belongs to Drupal, free to download and use, and there are some that are not free
they come with fee charges. Drupal allows it users to create their own theme and put it
up for sale.Drupal gives hints of new and upgraded modules (functions), security patches
and it also gives access to updating them for free. Also, Drupal has a robust community
of programmer that helps its users with any problem related to using Drupal CMS applications.

Drupal, makes it possible for it users to create media contents. These media contents
convey information related to the website as regards the services rendered by the website contents such articles write up, videos, images, to back the services up. It allows the
sharing of contents on any of the social media such as Facebook, twitter and many others.

Drupal gives it users the freedom to determine how the content on a website will be
positioned, how the front page will look like and the subsequent pages on the site because Drupal has several blocks (layout) that can be chosen from, to use in the positioning of contents on a website. Drupal makes it possible to create roles for the users of a
website for example a team of web programmer in a company can be assigned roles in
managing the company’s website. It is like creating a department with task for managing
and accessing the website.

Drupal official website is an information bank for Drupal users, with this official website
Drupal is easy to use. The team of developer at Drupal are all engaging and are always
there to help grow the Drupal community and help other Drupal users with whatever
issue they have using Drupal. This is not only possible in Drupal alone, all other CMS
have community of developers that help to develop their various CMS.Information and
documentation about new modules (function) can be found on Drupal official website,
these modules are documented such that the documentation will state what function the
modules are meant for, the date of release, previous version, the reason for having the
new module.

23

2.5

Managing Content

Giving a user an outstanding experience and impression during and after visiting a website does not require extraordinary procedure or much effort other than as content manager, he or she has to be creative also know what and how he wants his content to be
managed and presented. There are somewhat skills and logics needed when managing
contents. When managing contents, users of the web need to be considered during the
website’s development planning.

As specified in the previous section there are different contents that the CMS accommodates. As flexible as these CMS are, managing their contents are important, and also as
easy as CMS are to get or generate content so it is easy to get into trouble because
these contents are gotten from many sources. Drupal like most of these CMS uses user
permission control, to allow or deny contents post, in order not to get in to trouble of copy
right infringement.

Some companies have an in-house software programmer that helps in monitoring and
publishing their web content while some outsource this job to an external programmer or
the CMS developer to help manage the contents on their website and some users do
manage their contents by themselves. It all depends on the user’s (company or individual) priority or desire.

2.6

Choosing the Correct Content Managements Tools

Processes are required in any system, with this fact choosing the right CMS requires
processes and with any processes there is always a planning stage. Choosing the right
CMS. The processes can be done in several ways depending who is the owner of the
website, the most likely scenarios are IT personnel’s having a meeting with a proposed
owner of a site to determine what his desired website will look like or an individual which
could be anybody also aiming to employ the services of a web platform for his or her own
purpose will think of how he or she wants his or her website to look like.

Firstly, outlining what will be the aim and achievement of the new website. Specifying
the contents that will be present on the website, such as the logo, the slogan, the name
of the website, mission statement, and the services the site will and should perform.

24

There is a software engineering diagram called the use case diagram that can be used
in specifying the service of the website, use case helps with the diagrammatic analysis
of relationship between the web functionalities and it users.

Next is the users experience, how can the user of a website have good experiences
through the users’ interface. Grouping the contents in a CMS is also essential because
it brings about orderliness and clarity of the website. Most of these CMS give the opportunity, to customize a website to suit it owner and to give the users of the website developed from this CMS the feel and the wonderful experience while visiting the website.
These experiences ranges from sizing and positioning the web content, text formatting,
image size and positioning, background colour for easy clarity, drop down menu, bread
crumb for easy navigation.

A brief and closer analyses of how these processes affects the website. Browsing
through a website should be fun with the navigation system of the website. So, making
a website navigation system to be complicated might be a turn off for it users and imagine
if it is an ecommerce website like a shopping site the company will lose customers using
a complex navigation layout. For example, Drupal has what is called “the bread crumb”
which are hypertext words which shows where a user has visited within a website and
the user can navigate to the previous places he or she has visited in the website. This
helps the user of the website to retrace where he or she has visited on the site and it
also eases users’ movement around the website with ease.

Proper presentation of the web contents such as the text is very important. It has to be
bold and the colour of the text should depend on the background of the site but the main
success of these is that the users of the website should be able to read clearly the text
without stress or strain to the eyes. Most of these CMS gives the opportunity to choose
text type and resize them.

Background colours come with some logic in web development and users interface. Colours depicts a lot and the users’ target matters a lot in choosing a background picture
and colour. Most website use colours or background pictures that are clear in order for
the users of the sites to be able to read clearly the text on their websites.

25

More so, when considering a target group for example, a children educative website, it
will be nice to have colourfully, bright background images and colour, while the colour
are bright and colourful the text on the site needs to be visible for the children to see.

Making sure there is consistencies in the layout, patterns, navigations, back ground image, colours, texts, image size throughout the whole website, is advisable. Therefore,
the website users will not get bored or get tired while surfing through the website because
the website has been well presented. This can be likened to the experiences someone
get while travelling through a smooth and straight road or a bumpy road.

Most of the CMS are secured according to their individual official websites. However,
security of a system should be tightened, most especially a financial, e-commerce websites needs to be secured to avoid all sorts of theft, hacking while using the website for
transaction. So, a company can hire an IT security expert to help secure it website.

Once all these are discussed and decided on, will help in searching for the right modules
and themes to use for developing a desirable website. Next step is to search for the right
modules to download on the CMS to achieve and create a desirable website. The final
stage will be deciding on the hosting of the CMS website whether a free hosting company
or a payed one, this depend on the owner and purpose of the website. This will be discussed on the cost of managing a website in the next chapter.

3

Sustainability of Content Management Systems

Web and web applications comprises of three major components Presentation, functionality and contents. These are the three components that decides which Content Management System to use and it also depends on what the owner of the web wants on his
web. Some CMS are good for presentation while some gives the combination of presentation and functionality.

There are several types of Content Management System that are been actively used but
they all have limits and purposes. That brings us to the question of what kind of Content
Management system to use for a particular site and for what purpose.

26

3.1

Securing Content Management Systems

Most of the Content Management Systems are secured according of their official website. There is no crime in having multiple security system set up, to protect a CMS developed website and its contents. Security is one of the important aspect to inquire when
looking for the right CMS to use and it starts from the beginning of the website planning.

Before delving in to the security of CMS using Drupal as a case study, looking into what
brings about threat to CMS security. Most websites today are developed and put up
directly or indirectly for business purposes. Most businesses now take their services,
conveniences and ease of doing business to the web platform in order to satisfy their
customers and CMS have business powered CMS to cater for internet transactions.

Drupal has Drupal enterprise that helps it users to set up a commercial driven website.
Like Drupal most CMS also have this kind of capacity to develop a commercial website.
Drupal commerce is a customized commerce frame work developed by one of the main
developer of Ubercart.Drupal commerce contain sub modules that uses features of
online store thus it is used in for running online store. These sub modules are commerce
and commerce Users Interfaces, payment and payment UI, customer and customer UI,
cart modules. [6,351.]

Under the Drupal access control, the Drupal gives an option that when collecting sensitive materials over the Internet, sensitive materials in this context. It could be credit card
number or any money transfer or financial transfer materials can be done using the secure page module which allows specifying Drupal path that should be accessed, only
through HTTPS.Drupal has several financial and business modules that takes care of
the transaction or financial aspect of their users for example there is a module called
commercial shipping and commercial stock modules which is used on Drupal’s powered
commercial shopping website to calculate shopping rates of goods and while the other
module is used to keep tabs on the quantity of stock have left and gives alerts when the
stock of goods left is about to finish.[6,402.]

When checking the official website of these CMS, all these modules are believed to be
secured and they are being upgraded and updated to newer versions. All these transactional modules give birth to security threats from a competitor, hackers, online thieves
and scammers that might want to steal a company’s assets. Assets such as employee

27

contacts, company product recipe, customer credit card number and some things valuable to the company or business process.

There is also an Internet war fare such as espionage. Espionage is one of the greatest
cyber space crime, this happens when putting and presenting product for sales online
and there are huge patronage and customer base through the website, with a financial
turn over. Then competition sets in, with rivalry, competitors and enemies tries to pull the
product or website down, defame or steal the website owner valuable assets such as
customer data.

Thus, there comes the need to have a strong website with backups and updates if not
the rivalry group or person might strike hard, by hacking the website and database, and
steal or manipulate the website and database to their own advantage. According to most
of the CMS official website, these CMS are secured. These CMS, their modules, themes
are developed by communities of developers and they are being upgraded and updated
at all time.

Most of these CMS allow the administrator to authorize and assign roles to the users of
a website this will enable the administrator to monitor what each users do when using
the site. The administrator can be the IT security personnel of a company or any individual that own a website developed by a CMS. This is a controlled access from the frontend interface of the CMS website. Constant updating and upgrading the CMS version
and security patches can give the attacker tough time in trying to learn about the new
version to look for vulnerabilities.

3.2

Cost of Running Content Management Systems

Costing is done before the website is developed and there are several costs incurred
when a CMS’ website is up and running. These costs are inevitable; however, they can
reduced be depending on the how the running of the website is planned. Security and
upgrading are very important when planning for web costing because a website is as
good as useless if it is not secured and updated thus securing, updating and upgrading
a CMS website starts from the website development stage.

28

3.2.1

Cost of Hosting

Hosting of a website is important because that’s how a website can be accessed. As a
CMS owner, there are two options available for hosting a CMS’ website, the first one is
out sourcing the website hosting, to a web hosting company and the second one is to
host the website on a personal computer or dedicated server. The former option also
comprises of set of dedicated computers connected together as servers, kept in a secured and well monitored environment.

When out sourcing the hosting of CMS website, the server in this method can be either
a physical server or virtual server. These two methods have both their pros and cons
and this will be discussed with respect to cost and security.
Websites files are stored on the hard drive of a web server and this web servers are
being run and monitored by the web hosting companies however a web server can also
be a small personal computer located in a room or office space.
The web hosting companies’ help in hosting websites, CMS developed websites inclusive, they have all the facilities to host a websites for a fee and they have different packages to cater for how big the website is and how frequently the website will be or is
accessed. In this method employing an IT security personnel to help in checking the web
hosting company, whether they have good technical support, the type of database system they use, do they have good updating, upgrading and security plan, ample disk
space, data transfer rate, and reliability is also necessary.

Using the web hosting services is easy because there is no need to worry so much about
security of the website however that does not mean the website cannot be compromised
but to some extent the website is still secured. Apparently, with this method, the security
burden of the site is on the web hosting company. Only the services of hosting and securing a website will be paid for.

The amount paid for these services varies with different websites, there are some factors
like how big is the size of the website file, what type of contents and services the website
will render determines how much money, to be paid to the web hosting company. So, a
lot of money is involved with this method, huge amount has to be paid to secure and host
the website.

29

The second method is to host the website on a personal computer at home or in an office
space has a lot of disadvantages than advantages. This method has so many bottle
necks as to it configuration. Starting from the setting and configuring the firewall to allow
web server to connect to port 80.making sure there is a high-speed Internet connection
to the server, a Domain Name System (DNS) host name for the home Internet must be
secured, getting a static IP address for the personal computer. All these setting and configurations requires an experienced person. If this server is not properly configured and
it can be attacked or manipulated by hackers to send spam mail. Thus this act could lead
to the website been blacklisted and will not be able to be accessed. This is similar to
denial of service.

More so, this kind of method requires an IT security personnel that will help in monitoring
the security, updating and upgrading of the server. This is costly because the IT personnel will be on a pay roll and it is more difficult monitoring the security of the server. However, it can be difficult if intending to secure a server as an individual with no IT security
knowledge or background.

It will be advisable to use this method with a manned IT security personnel most especially if the website has grown to a big website, with a lot of important data to manage
and receives a lot of traffic. This method is always prone to vulnerability due to both
human and computer errors. During upgrading there might be errors or mistakes such
installation of software that is a spyware or malware vulnerable, mistakenly deleting application files, executing malwares from the client which is a web application that access
the server, software and hardware errors and break down.

There must be twenty-four hours, seven days of Internet services on this computer to
avoid Denial of Service problem. The computer must have a lot of memory space to
accommodate the updating and upgrading of the CMS’, these factors enhances speed,
performance and accessibility of the CMS website. The personal computer must be protected from some physical damage such as theft, flood, and power outage, all these are
extra cost for this method.

The advantage of this method is that the individual has total control of the website and
its data. There is a sense of assurance that the data is with the owner not at the mercy
of a web hosting company or on a server with the hosting company that might get attacked.

30

The individual running this method must well knowledgeable on IT security as to what
security soft wares to run on the personal server and how easy to update these soft
wares and it security patches, recovery plans, must be able to install several multi-level
security system and monitor their behaviours to decipher any form of attack. He or she
must also know a lot about the frame work the company site is operating with in order to
check and checkmate any form of attack from an attacker that also have a knowledge of
how the frame work works.

Cloud based system server, is different from other servers because it is a virtual server
not a physical server. It can also be attacked like the others. Most of the web hosting
companies and CMS have this cloud hosting facilities for their users for a fee. This
method of hosting is good because the website data is stored in a cloud so it reduces
physical set up of hardware and in the case of theft, environmental or electrical disaster
of the physical server the data on it are still retrievable because they are stored on a
cloud for backup. It is also flexible because it allows the sharing of files with a secured
channel within an organization.
These three methods can be used concurrently such that company’s customer contacts
and product files can be hosted on personal computer at the company’s headquarters
and may be product prices and asset files can be stored on a cloud server and the contacts of the employee and employers can be stored with a web hosting company.

In conclusion a website must be hosted in order to be accessed, therefore when running
a CMS’ website with any of this method of hosting, cost will be incurred, the different
comparison stated above with these hosting methods is not all about cost only because
using any of the methods, cost will still be incurred for either services or personnel or
both, but what is most important is to have a secured website with a nice and memorable
users’ experiences whenever they visit the website.

3.2.2

Cost of Employing Information Technology Personnel

Employing Information Technology (IT) personnel to help with updating and upgrading
the website. Most big companies employ IT experts comprises of a software engineer
and IT security expert in manning the company’s website. These competent professionals will be able to oversee the management and security of the website.

31

Be it per term or full term payment, the IT personnel will be paid and this cost is incurred
by the company however there are other CMS website owners that might do or want to
everything by themselves but as the company grows and the need to have a good dynamic and robust website, that needs updating and upgrading arises, then also the need
to employ an IT or IT security personnel is indispensable. The IT security expert will help
in overseeing the security aspect of the website such as helping in forestalling the efforts
of attacks and also help in response and recovery issues relating to the website and the
company’s host and database system.

3.2.3

Cost of Upgrading

As a website increases in its contents files such as videos, images, database as well as
functionalities the more server space it will need for proper and fast loading of the website
when accessed by users. Time is money while doing business or rendering web services,
thus delays in loading of a website or denial of service can be annoying and can result
to the users getting tired of the website services which also affects the business and
service presented on the website. Therefore, the website users might migrate and do
business with another company running and offering the same kind of online product and
services.

The solution to this is to increase the size of disk space assigned to the website by the
web hosting service provider and if it is a personal company or individual server they
must make sure the server that runs their web application has a large memory space to
accommodate the content files as they increase in size. The operating systems, security,
any other software that enables the server to run properly also need upgrading and updating which comes with a cost. Newer versions of security and other soft wares are
released and they are put up for sale so the IT security personnel have to purchase them
to upgrade the security system of the server.

Also, when using a cloud base services and the memory space allocated to a company’s
website is used up due to contents, database and functionalities upgrading, then the
need to increase the memory space arises and that comes with a bigger fee. No matter
the kind of host company or method of hosting used in running the CMS website there
will always be a cost incurred. Relying on the CMS security is good but it is better when
using multiple security system most especially when a websites has developed to be a
very big website.

32

3.3

Efficiency of Content Management Systems Software

Most CMS are efficient but some are more efficient than the other and that makes them
standout. There are so many major qualities that is present in all the CMS that makes
them efficient. These qualities have made them still very available for users to use them
and trust them.

Having an efficient content management systems software lies with defining the purpose
of having the CMS. Efficiency in this context is the fulcrum that balances cost and services, that is maximizing the cost spent on setting up a web content management software and getting the value for the money spent. Having the correct CMS website that
can be reliable and upgradable means a lot in that when there is a reliable and trustworthy service, the demand for that service will increase and this yield to dynamism and
competition.

CMS have to be efficient in that they have to stand the test of time and reinvigorate
themselves to a new demand. The web developers of this content management system
need to be commended as they are always striving to bring dynamism into the CMS they
handle. A CMS or CMS website that does not have the capacity to grow with the demand
of it users will not be patronized. Efficiency of a website is a process that starts from the
beginning of the design of the website using CMS.

Users are very important when discussing about efficiencies. They are the last on the
consumer chain. Hence their satisfaction is very paramount, by making sure they are
able to enjoy the services rendered by a website or CMS. Most users want to interact
with their preferred website, so knowing the users’ targets wants and needs are essential, this will increase the services to render to them and this also increases efficiency.
Therefore, with this the content will be stream lined to meet what the targeted users
wants and these contents need to be correct, updated and reliable.

Efficiency grows with the increase of users, the demand for new services, this will be
determined if the CMS can be able to deliver on the new demand. A good example is
having a CMS that can be globally accessible, CMS that has option of several language
whereby people of different race can be able to understand your website presentation

33

and what services the website is rendering. Thus, selecting a CMS to help deliver new
demands is good.

An efficient CMS should have the function of allowing the CMS owner to be able to link
with other social network users in form of marketing their product and services. This is
most common with news and blog websites they always like to link up their news and
blog to attract people to their website from the other social media websites. Making sure
the administrator and users, are able to use the CMS software to generate, and present
legible and understandable web contents to their users.

Most of these CMS come with their default setting for contents. However, they give room
for adjusting the setting so that the administrator of the CMS website can customize the
default content to make it presentable to the users of their websites. A CMS should be
mobile responsive. Most recent websites are mobile responsive, allowing their users to
view their favorite website via small and handheld electronic devices just like using their
home desktop or personal computer on a small device. That brings out the efficiency of
a website where the users of a website can also access their website conveniently using
their PDAs and other mobile devices.

The users must know how current a content is and it source, this function is available in
most of the CMS and that is a good way of giving the users the latest and reliable contents therefor increases efficiency of the website and its contents. For example an ecommerce website having a payment functionality, a customer have the right to know
and trust the payment method before they interact with the website.so sources of the
payment method is important for them to trust the payment facility, otherwise they will
never interact or patronize with the website.[5,150-151]

4

Conclusion

The goal of this project is to provide guidance on the suitable CMS to use in developing
and managing of a website with its contents. On this concluding part of this project most
of these features highlighted are needed to help guide in selecting a preferred CMS.
Having use a couple of these CMS as well as the challenges encountered while using
them.

34

On an average, the minimum years of establishing most of these CMS is ten years and
they are still in existence. Although some of them are not functioning any more perhaps
due to some reasons or the other. While some are not been updated from time to time.

Most of these CMS are unique and they are designed for particular purposes. Thus, there
are some important features to look out for when selecting a CMS regardless the complexity of the CMS. Using Drupal which I worked with as a case study which falls under
a semi-complex CMS status and very powerful which can be used to develop different
kind of websites and to generate contents.

Drupal and majority of these CMS have good frame works for proper grouping of content
types. Thus, with proper contents grouping frame works, web administrators will be able
to arrange it contents properly and the users of the web developed by this CMS will be
able to access these content types with ease.

Drupal CMS updates for modules and themes are easy to download and applied immediately. However, this makes it tempting to download more modules and themes. The
reality is that the more module downloaded for use on a CMS website the bigger the file
of the CMS will get which might slow its uploading when accessed, and the owner of the
website will have to deal with high cost of hosting and getting more memory space to
sustain the large CMS file generated.

Drupal has a default and several consistent website layouts to choose from. It gives room
to customize web contents and websites layout. There are settings in most of these CMS
where the CMS administrator can customize web contents and its navigation links and
buttons to be consistent for proper presentation of the web contents. These contents are
assigned to block of layout for proper positioned and presentation when the website is
hosted. This helps the web users to navigate through the website without any difficulties.

Drupal like most of these CMS have good navigation process such as bread crumbs in,
menu, links for proper navigation around contents. This is one of the users’ experience
a good website need to have, there is nothing more fun as the experience for users of a
website or CMS to be able to navigate and locate a content on a website with ease which
also saves time.

35

The major similarities with these CMS is the power given to the web owner to take total
control of managing their website and its contents starting from managing the users that
register to the website, what contents the users are allowed post, the services they seek
from the website, assigning roles to the users, administrator control, customizing the
website theme, replying feed backs and follow ups. However, this total control can be
abuse if not careful, that does not mean that the default standard will be compromise but
the owner that has a total control, such as the adumbrative control might be tempted to
overdo things with the CMS such as designing a poor looking website with unnecessary
modules and customized theme, disconnecting users by not replying to users complains
and feedbacks, not accepting sign up request from users.

Majority of these CMS, Drupal inclusive have the multilingual facilities such as changing
of languages of presenting contents which is good at least different people across the
world can access my website in their own country language aside English language
which most of the CMS have as a default language.

Most CMS offers additional services such as security, hosting and storage facilities. They
have chains of other CMS or advanced version of a CMS for example Drupal has Drupal
Enterprise which is an advanced CMS and it comes with a fee. They also have products
that comes with a fee, trial and discount their users. For example, Cloud database to
help monitor and secure databases and valuable contents.

When working with preferred CMS such as Drupal there are several challenges encountered. These challenges and other types of challenges are also in existence with the
other types of CMS. However, these challenges vary based on the complexity of the
CMS.

One of such challenges is that on the official website of most of these CMS It was made
to believe that the use of a CMS is easy to learn and use almost immediately but the
reverse is the case. After downloading and running CMS on a preferred computer, it
takes couple of weeks to months to be able to work and understand the users interface.
I encountered this challenge when running and working with a Drupal CMS. It took me a
month to learn and how to use the tools on it to develop a website and generate contents.

Another challenge is the downloading aspect of these CMSs. There are requirements
that are needed for some of the CMS to operate optimally such as the type of database

36

software to use with the CMS.Without these requirements some of this CMS will not work
properly and these CMS stylishly forces you to buy database space that supports the
CMS. Some of these CMSs also makes it users to install a trial version software without
notification, and afterwards compel the users to pay, just to upgrade and allow them to
use a complete or advanced version of the CMS, or to use more of their modules and
themes.

Proper caution is needed when trying to manipulate the CMS files that is used in customizing theme in order not to delete or overwrite the main source file. It is advisable to
duplicating and rename the file before working with it to develop a customized theme.

Understanding the newer version becomes difficult. Drupal like most of these CMS are
been upgraded and every newer version of the CMS comes with it complexities and it
takes time to get use to them likewise new modules and some modules and functionalities in the older version might not be compatible with the new update. Mostly the user
interface is changed and makes it difficult to locate favourite tools and sometimes the
name of the particular tool is changed the most used tools of the user in the older version.

CMS have change the face of Web development over the years and they have made
web development so easy and they made it possible to generate all kinds of web contents. However contrary to the made believe that after installing a CMS software developing a website and managing a content is immediately is false. How to use the software
tools then developing a CMS website, generate contents and managing the users of the
website, all these takes time to learn, but it worth the time devoted to learn how to use
the CMS.

Afterwards it easy to use and other CMS also have general structures such that it can
be easy to adjust to a new or other CMS. In the course of this project, I noticed that not
all the CMS work the same way. Although they share some similarities with their structure
and basic tools. But they differ in the functionalities and the services they rendered.
Some are just for blogging which means they can only accommodate text and images
as contents while some are complex and are used for developing several types of advanced websites. However, this depend on the purpose of the choosing a CMS.

37

References
1

Christos JPM,Hilary P,Tami S,Theresa MS. History of the Internet. California:
ABC-CLIO, Inc.; 1999.

2

James FK, Keith WR. Computer Networking: A top down approach. 5th ed.
United states of America: Pearson Education; 2010.

3

Stephen B,Cindy M. Drupal 7 Explained: Your Step by Step Guide. United states
of America: Pearson Education; 2013.

4

Gilbert H. A practical guide to content Delivery Networks.2nd ed. United State of
America: CRC press; 2011.

5

Jonathan L. Web usability: A user-centered design approach. Boston: Pearson
Education; 2005.

6

Angela B,Addison B,Bruno D. Using Drupal 2 nd ed. United State of America:
O’Reilly Media Inc.; 2012.

7

About Joomla [online] URL: https://www.joomla.org/about-joomla.html Accessed

March 2017
8

About Joomla [online] URL: https://www.joomla.org/announcements/general-

news/5396-joomla-2011.html?highlight=WyJkb3dubG9hZHMiXQ== Accessed
March 2017.
9

DNS Software [online] URL:http://www.dnnsoftware.com/products Accessed

March 2017.
10

For Content Publisher[online] URL: https://textpattern.com/features/338/for-con-

tent-publishers Accessed March 2017
11

The Umbraco CMS [online] URL: https://umbraco.com/about-us/ Accessed March

2017.
12

The MODX story [online] URL: https://modx.com/company/ Accessed March

2017.
13

About Us [online] URL: https://wordpress.com/about/ Accessed March 2017.

14

About [online] URL: http://www.refinerycms.com/about Accessed March 2017.

15

What is TinyCMS [online] URL: http://www.tinycms.eu/ Accessed March 2017.

16

Products [online] URL: https://www.magnolia-cms.com/about Accessed March

2017.
17

Subscription Services [online] URL: https://www.liferay.com/subscription-ser-

vices Accessed March 2017.

38

18

About Us [online] URL: http://www.ametys.org/community/en/about-us.html Ac-

cessed March 2017.
19

Ph7 Social Dating Software [online] URL: https://ph7cms.com/ Accessed March

2017.

Appendix 1
1 (1)

Appendix 2
1 (1)

Sunil Maharjan

Markeplace web application with Foglab
(Foglab with Marketplace)

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Bachelor’s Thesis
11th August, 2017

Abstract

Author(s)
Title

Sunil Maharjan
Foglab with Marketplace

Number of Pages
Date

30 pages
11 August 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor(s)

Janne Salonen, Title (Thesis Instructor)

The purpose of the project was to create a web based application to make it easier for students to look for jobs and internships and employees to post their vacancy announcement.
It is a job portal web application that is a part of the Foglab website of Metropolia. As part of
the project also includes the redesigning the pages of the Foglab website with a new and
innovative design as well.

The project was carried out by using two of the most popular javascript framework available
combined with the powerful database to manage data which is popularly known as the
MEAN stack. AngularJS is one of the most popular and powerful javascript framework for
designing a web application. NodeJS is a powerful backend server framework that is entirely
based on javascript which makes programmers easy to use. Also add on the new concept
of saving data on a database in the form of objects which is perfectly done by the MongoDB
database. Now, combine all these three ingredients and you get a super powerful recipe or
tool known as the MEAN stack which was used to create this dynamic web application.There
are various other tools and packages used alongside these frameworks to make the application better in terms of size, performance and management.

Keywords

Web application, IoT, MEAN stack, portal, Angular, NodeJS,
HTMl, Javascript, frontend, backend, open-source, bootstrap,
Jquery

Contents
1

Introduction

1

2

Theoretical Background

2

2.1

Frontend Technologies

2

2.1.1

3

2.2

2.3

3

Backend Technologies

6

2.2.1

NodeJS

7

2.2.2

ExpressJS

7

Database

8

2.3.1

MongoDB

8

System Design and Implementation

8

3.1

Marketplace web application

9

3.2

Installation

9

3.3

The backend API

11

3.3.1

The app.js

11

3.3.2

Models

12

3.3.3

Routes

14

3.4

4

Angular 2

The frontend

14

3.4.1

Module

18

3.4.2

Components

19

3.4.3

Services

20

3.4.4

Guards

20

Result

22

4.1

Testing

22

4.2

Errors and Solution

26

5

Foglab

27

6

Conclusion

30

References

31

Abbreviations
MEAN

MongoDB ExpressJS AngularJS NodeJS

HTML

HyperText Markup language

CSS

Cascading Style Sheet

SQL

Standardized Query Language

IoT

Internet of Things

ES6

ECMA script 6

JSON

JavaScript Object Notation

API

Application Program Interface

NPM

Node Package Manager

CLI

Command-Line Interface

MVC

Model View Controller

SMTP

Simple Mail Transfer Protocol

1

1

Introduction

The advancement in technology is one of the greatest achievements in human history.
It has made lives of people easier, faster and brought the world closer. One of the most
popular product of technology is the internet and the devices or other elements that can
access data through the internet are known as the Internet of Things (IoT). Different
products and services that we use today are all due to the advancements made in the IT
sector or specifically in the field of web services and technologies.

Web technologies are growing in such an exponential scale that it has become hard to
catch up to the new technologies in the market. There is a huge supermarket of technologies that one can use to create different types of application or services. This has all
been available just a few years back. Before, that web technologies were simple, with
some static content to show to the user and making boring old websites. Now, the technology has been very advanced and developers has been able to integrate a full-fledged
working application that works in a web page.

The technology industry is growing so rapidly that it has become hard for web developers
to keep up to the web world with new languages and frameworks surfacing every day.
This has been even harder to the new comers who have just entered the web development field with technologies that they studied a year back has been changed with newer
technologies.

The project consists of creating a web application, a job portal which would be integrated
in to the foglab website of Helsinki Metropolia University of Applied Science. Apart from
the web application, the project included the redesigning of the foglab website itself with
changes done as instructed by the supervisor. The project was completed using one of
the most popular combination of technologies that is used to create simple yet powerful
dynamic web app, the technologies and methods of which are discussed further in the
report.

2

2

Theoretical Background

The web application is created by using the MEAN stack framework combination. Every
letter has a technology involved in it, the “M” stands for Mongo which is a database
service. “A” stands for AngularJS, which is a popular and powerful javascript framework
that is used to create the user interface or the front-end part of the application. The “N”
stands for NodeJS, which is a powerful javascript framework that is used in the server
side for creating API’s or also known as the back-end part of a web application. Finally,
“E” stands for ExpressJS which is a web application framework created on top of NodeJS
which makes coding in the backend a breeze.

Figure 1 – Web Application Architecture

In a web application, there are two layers in the software architecture, the one that the
user sees is known as the presentation layer i.e. front-end and the layer where all the
functionality and services occur in the back or the server is known as the access layer
i.e. back-end. There are different technologies involved in both the front-end and
backend, such as HTML, CSS and Javascript are used for the former whereas technologies such as PHP, python, SQL are used for the latter.

2.1

Frontend Technologies

The frontend technologies or referred to as the presentation layer of a web application is
the view layer of the application. In other words, the layer which the user can view and

3

interact with. The most basic and most important technologies used in the frontend are
namely HTML, CSS and Javascript in which Javascript is the one with a wide range of
variety in terms of features and uses. Javascript, with new plugins and framework surfacing everyday, has changed the way people view content in the internet.

Figure 2 – The frontend spectrum

As shown in Figure 2, the most popular Javascript framworks are Angular, React, Ember, vue, Jquery, etc. The frontend technologies that have been used in the project are

2.1.1

Angular 2

Angular 2, one of the most popular javascript framework and loved by frontend developers, was first designed by Misko Hevery and Adam Abrons in 2009 and is officially maintained by Google. AngularJS version 1.0, also known as AngularJS was released in 2012
as a add on feature like jQuery to create dynamic web applications. It was later transformed dramatically after 2 years of research and created a full working framework. The
AngularJS version 2.0, also known as Angular 2 was released in September, 2016.

4

Figure 3 – Most used frameworks and technologies

According to the survey done by stackoverflow in 2017, NodeJS and AngularJS are the
most commonly used technology in web development. The primary focus of AngularJS
is to provide the best functionalities for server-side rendering for a perfect user interface. Angular2 was created over angularJS to overcome many issues that had been
prominent with the angularJS. The benefits of using Angular2 over AngularJS are:


Angular2 provides much better performance over AngularJS by using less
memory and using superior template functionalities.



Angular2 has advanced and powerful templating features giving better runtime
and faster error detection.



Angular2 focused on smooth server side rendering to the user interface and is
dedicated to data capturing with the web works.



Angular2 supports multiple platforms helping to make a fully functional native
mobile UI on both IOS and android platforms.[4]

5

The basic building blocks of angular 2 are:
2.1.1.1 Typescript
Typescript is a open source language developed by microsoft on top of javascript to
make it similar to a object oriented programming language like java. Typescript code can
be easily written by a programmer and it should be compiled to javascript code on
runtime by the browser. Angular 2 uses ES6 standard javascript language and typescript
supports ES6 and is also recommended by angular 2 developers to use type script as
opposed to others.

2.1.1.2 Modules
Module is a group of code that combines all the components, directives, pipes and services that are connected to each other. This combination helps to create an application.
Modules can be public or private making the former visible while the latter’s implementation details are hidden. The modules can export elements which then can be used by
other modules. The elements of a module that can be exported should have a public
attribute.
2.1.1.3 Components
Components are the building blocks of an angular2 application. Everything written in an
angular app is a component. Like we build a house laying brick on top of another brick,
components are stacked together to create a angular app. Component is a set of code
that does a specific simple task and combining all these components together an angular
application is created. Component in angular2 is the combination of Directive, controller
and scope in AngularJS.

2.1.1.4 Services
Service in angular2 is just a simple class with a decorator injectable, meaning that it can
be injected to other components as a dependency injection. Services are created with a
specific purpose to perform a specific task. It can injected in a component all inside the
application. The code in a service is normally to send or retrieve data to and from the
server. That is why it is needed to be kept separate from the application for easier testing
and debugging and for dependency injection.

6

2.1.1.5 Templates
Templates are basically the HTML code that is displayed in the web page. Templates
are enclosed in the ‘ or “ mark which is also considered as a string. Also in ES6, templates
have been made even easier by making it possible to write multiline code using the back
ticks. Almost all the the HTML code is a valid syntax in a angular2 template. The template
represents the view part of the view and controller model that was used in angularJS.
Templates also help separating the view and the logic in a component.
2.1.1.6 Metadata
Metadata are the decorators for a class that is used to configure the behavior of the
class. It allows developers to configure a class by setting different metadata on them
which gives them a specific category. Metadata are built in in angular2 framework and
can detect its own particular element by the help of metadata. The most commonly used
metadata are @component, @pipe, @service, etc. So, if we want to make a class a
component, we simply put the decorator @component in front of the class.

2.1.1.7 Data binding
The most prominent and powerful feature of angular2 is data binding. Data binding is a
feature that helps to bind values of variables between the view and controller layer. There
are four types of data binding in angular2. They are interpolation, event binding, property
binding and two way binding. This new data binding feature helps a lot during coding in
javascript and reduces a lot of code needed to be written to just simple few lines of code.

2.1.1.8 Dependency Injection
Dependency injection is also a new feature which allows to inject a dependency in a web
application in the form of a service. By doing this, the service layer of the application can
be created and debugged separately and used by dependency injection. Furthermore, it
helps to reduce code duplicity because same service can be injected multiple times anywhere in the application. This approach helps to make the code flexible and make unit
testing easier.

2.2

Backend Technologies

The backend technology used in a web project is known as the service layer of the application. In a web application, the frontend is the beauty, whereas the backend is the

7

brains. About 90% of the code that is required for an application to work successfully is
done in the backend. Backend code runs on the server so the backend developers need
to have a good understanding of the programming language and the databases as well
as the server architecture. If an application constantly crashes, gives error or is really
slow, it is always problem with the backend that is why backend development is the most
important part in a software application.

There are many different backend programming languages. The most popular ones are
ruby, Python, Sql, NodeJS, etc. NodeJS is growing to become one of the most popular
Javascript backend development framework and also is one of its kind.

2.2.1

NodeJS

NodeJS is an open-source, cross platform Javascript runtime environment for executing
Javascript code server side[5]. NodeJS is increasingly becoming one of the most popular
and most used backend language. It enables javascript to be used for server side scripting and has a event driven architecture thus making it able to perform tasks asynchronously which is also one of the powerful feature that only NodeJS provides. NodeJS also
uses different plugins or add-ons known as packages to be directly embedded to its
application and be used for a specific purpose. It has its own package manager called
NPM(Node Package Manager) which helps to install and manage all the packages installed in a web application.

2.2.2

ExpressJS

ExpressJS is a NodeJS web application framework or a package that is built on top of
nodejs that provides different new features with minimum code for mobile and web applications. Even though NodeJS is very powerful and useful, coding in it is very long and
cumbersome and doing simple tasks can require a lot of code. This is where ExpressJS
comes in with its minimal code structure that does exactly what needs to be done without
a big hassle. It is the most popular framework of NodeJS which is used 90% of the time
by Nodejs developers.

ExpressJS is very popular because it provides a layer of fundamental features in a web
application without obscuring Nodejs Features. There are many Frameworks based on

8

ExpressJS as well. ExpressJS also lets developers to have full customizability over its
application unlike other languages like Ruby and Python.

2.3

Database

The main source of information in an application is the database. It is the core of a dynamic web application. An application doesn’t have any value if it has no information to
provide. The database gives life to an application. The database of an application should
be well structure otherwise it becomes a huge mess to handle. There are different types
of databases available now a days. There are traditional forms of databases such as
MySQL, Postgre, etc. this application uses a new form of data storing called NoSQL
database. MongoDB is one of them.

2.3.1

MongoDB

MongoDB is a cross-platform open source document base database which is totally different from the traditional realational database that has been used as the main form of
data storage since a long time. It is a kind of NoSql database, meaning that it uses JSON
like document structure rather than the table based structure used in relational databases
such as MySQL. These type of databases are useful for certain type of application making them faster and easier to use. It is high performance, high availability and easy to
scale. Also, deployment to large and complex multi-site from a single server is easy [6].

3

System Design and Implementation

The main goal of the project was to design a web application that could be used as portal
for the employers and students to post and apply for jobs. So basically a job portal. Since
this is a web application, not just a simple web site, dynamic web technologies were used
to create a full-fledged web application with a backend API support. To complete the
project, one of the popular web technologies were used namely Angular2, NodeJS, Expressjs and MongoDB. Different other technologies could be used but these technologies go hand in hand and work together and are compatible with each other so these
technologies were chosen.

9

Also, there was some extra work included with the project. It was to update the already
created foglab website with the above application integrated and some minor touch ups
to make it better. For updating the foglab website, the already used wordpress framework
was used and changes were made with the support for both Finnish and English language. The first section is about the design and implementation of the marketplace web
application and the second section is the description of the foglab update.

3.1

Marketplace web application

The marketplace web application was created using the popular MEAN stack framework.
The application is used as a mediator between the students and employers. Both user
groups, the employer and the student, have a different page where the employer can
post and delete jobs whereas the student can only search and apply for jobs. At first you
have to register with you name and other information in the form and choose if you are
an employer or a student and submit. After registering you have to validate your email
and then you can login to the application using your username and your password.

3.2

Installation

To develop the application, all the required programming software has to be installed.
The installation process and the versions of the software are given below:
Since all the languages and framework used are mostly based on packages, first a package manager should be installed. NPM provided by node is easy and faster to use and
comes built in with NodeJS installation.


NodeJS - Version 6.9.3

To install NodeJS, we have to first go to the official node website which is
www.nodejs.org and download the software related to their respective Operating
System and follow the instruction. After installation, go to terminal if it is in linux
or command prompt if it is in windows and check the version by typing the command

10

node -v


Angular-cli – Version 1.0.0-beta.31

Angular-cli is the command line interface of angular2 which helps to create an
angular application from scratch using a single command. It is currently in beta
version when developing. Angular-cli can be installed in the computer by typing
the following command in the terminal
npm install –g @angular/cli

You can also check the version of the angular-cli by using the following command
in the terminal
ng --version


MongoDB – Version 2.6.10

The features and use of MongoDB can be directly used by adding a package in
the NodeJS package.json file. However, the shell version, in which you can view
all the data and make queries, can be installed by downloading and installing the
.msi file for windows and .deb file for linux.


ExpressJS – Version 4.15.2

Since ExpressJS is a package used in the NodeJS, it is fairly easy to install and
use in the application. There are two ways to install expressJS in the application.
The first process is by editing the package.json file of the node application and
adding express and its version in the dependencies section. Another way is to
install Express through the terminal by using the command
npm install –save express

This command however installs the latest version of express rather than the version that you wanted which may later run to compatibility issues or issues related
to deprecated code.

11

3.3

The backend API

The API of the application is the core of the application. The API contains all the relevant
data and all the processes that run with it. It is very important to structure the code perfectly so that it runs as expected. The API of this application is divided in three sections.
The first section deals with all the necessary stuffs that need to be carried out like initialization and dependency injection, creating paths and creating servers. The other two are
the sub sections of the first one which are dedicated codes to work to create the model
of the data to be stored and the other one for the queries of the database API.

3.3.1

The app.js

The app.js file is the main entry point to the application itself. This file controls all the
route handling of the application. Here, all the basic things are coded such as initialization, route handling, dependency injection, Database connection and server creation.

The whole API is created as a NodeJS application. The app.js file needs to be initialized
by using the “npm init” command and complete all the required instructions. Dependencies to the Node application can be installed using the command “npm install”. The package.json file that contains all the required information about the application and its dependencies is listed below:
{
"name": "marketplace",
"version": "1.0.0",
"description": "app to post and apply for jobs",
"main": "app.js",
"scripts": {
"test": "echo \"Error: no test specified\" && exit
1",
"start": "node app.js"
},
"author": "Sunil Maharjan",
"license": "ISC",
"dependencies": {

12

"bcryptjs": "^2.4.3",
"body-parser": "^1.17.1",
"cors": "^2.8.1",
"express": "^4.15.2",
"jsonwebtoken": "^7.3.0",
"mongoose": "^4.9.1",
"nodemailer": "^4.0.1",
"passport": "^0.3.2",
"passport-jwt": "^2.2.1"
}
}

Listing 1. Package.json file of NodeJS application

The dependencies section on Listing 1 shows all the dependencies of the backend API.
The name of the dependency and its required version is also displayed. The file shown
on listing 1 is very important since it has all the information about the dependencies which
can later be easily installed by using the command “npm install”.
“bcryptjs” is used to encrypt the password field of the database that is given by the user
which would be encrypted when loading in the database. “body-parser” helps to easily
parse the form data provided by the frontend. “jsonwebtoken” is used to transfer tokens
between the front and back. “mongoose” is a useful dependency required to work with
the database. “nodemailer” is used to send emails and “passport” and “passport-jwt” are
used for secure authentication.

Apart from this, the app.js is used to install all the middleware. It is also used to create
all the routes or links that can be used to access the API. It also creates an initial route
that redirects to the homepage and it also creates a server to host the application and
make it available as well.

3.3.2

Models

Models are the section of the API that determines what type of data can be stored in the
system and how they can be stored. The model section helps to filter the data collected

13

from user forms and store in the database. The models also contain functions that can
be used to store data and retrieve data based on certain specific queries and also can
be used for verification as well.
var UserSchema = mongoose.Schema({
name: {
type: String,
required: true
},
email: {
type: String,
required: true
},
contact: {
type: String,
required: true
},
username: {
type: String,
required: true
},
password: {
type: String,
required: true
},
status: {
type: String,
required: true
},
verified: {
type: Boolean,
required: true,
default: false
}
});

14

Listing 2. UserSchema from models folder

Listing 2 shows code for a typical schema for a user entry. The schema describes what
type of data should go to which field and is it a required attribute or not. The schema also
offers an additional option to give a default selection if there is no data provided whatsoever.

3.3.3

Routes

The routes section of the backend application is used to communicate with the frontend
with the user request and responses, taking the request from user and respond with a
specific route associated with it. The routes section is the API of the system, it gives the
response coded in the application when the user tried to access the specific route. For
instance, there is a route in the routes section called ‘/register’. When the user triggers
this route from the frontend view when he/she is trying to register for the web application,
since it is a post route the data provided from the form template is first checked if correct
type of information is provided or not. Then, the route is configured to save the data in
the database. The routes section is used to access the database of the system which is
predetermined to what and which aspects can be accessed by who, which in addition
provides some security as well.

3.4

The frontend

The frontend, also known as the design layer or display layer of the application, was
created using one of the most popular Javascript framework known as AngularJS. The
newest version of Angular known as Angular2 was used. Angular2 is build using a modular structure, stacking bricks on top of bricks to create a house. These bricks are known
as components. The subsections of this topic discusses about all the components and
other features of angular that are used and how they are used.

Angular2 is a Javascript framework with a large scale of applications and it has different
packages for different features and purposes. Thus, different features are bundled to
different packages and only the packages that are necessary are to be included and thus

15

used. This makes angular very powerful because despite being so vast it can retain its
size depending on the type of application and the features that are needed. Since, it also
uses packages NPM helps on this section as well and there is also a package.json file
that keeps in check all the dependencies and the information that are needed.
"dependencies": {
"@angular/animations": "^4.0.1",
"@angular/common": "^4.0.1",
"@angular/compiler": "^4.0.1",
"@angular/compiler-cli": "^4.0.1",
"@angular/core": "^4.0.1",
"@angular/forms": "^4.0.1",
"@angular/http": "^4.0.1",
"@angular/platform-browser": "^4.0.1",
"@angular/platform-browser-dynamic": "^4.0.1",
"@angular/platform-server": "^4.0.1",
"@angular/router": "^4.0.1",
"angular2-flash-messages": "^1.0.5",
"angular2-jwt": "^0.2.0",
"angular2-moment": "^1.3.3",
"core-js": "^2.4.1",
"ng2-datepicker": "^1.8.3",
"ng2-order-pipe": "^0.1.3",
"ng2-pagination": "^2.0.1",
"ng2-quill-editor": "^2.0.0",
"rxjs": "^5.0.1",
"ts-helpers": "^1.1.1",
"typescript": "^2.2.2",
"zone.js": "^0.7.2"
},
"devDependencies": {
"@angular/cli": "1.0.0-beta.31",
"@angular/compiler-cli": "^2.4.0",
"@types/jasmine": "2.5.38",
"@types/node": "^6.0.42",
"codelyzer": "~2.0.0-beta.1",

16

"jasmine-core": "2.5.2",
"jasmine-spec-reporter": "2.5.0",
"karma": "1.2.0",
"karma-chrome-launcher": "^2.0.0",
"karma-cli": "^1.0.1",
"karma-jasmine": "^1.0.2",
"karma-coverage-istanbul-reporter": "^0.2.0",
"protractor": "~5.1.0",
"ts-node": "1.2.1",
"tslint": "^4.3.0",
"typescript": "~2.0.0"
}

Listing 3. Dependencies for the angular2 app

Listing 3 show the different dependencies or the packages that are required for the application to perform smoothly. Most of the dependencies are built in when creating the
app through the angular-cli since those are the core elements of the application. But
other dependencies are added as we need more feature and functionality in our application.
For instance, the “ng2-pagination” dependency is required to auto create a pagination
for the listing of the jobs that are displayed in the application. “ng2-quill-editor” dependency allows to add a powerful text editor with heavy features in the application with just
a few lines of code. In Listing 3, there are two different set of dependencies namely
“dependencies” and “devDependencies”. While both of them are necessary, the latter is
only used during the development phase of the application.

Angular2 used uses a superset of Javascript known as typescript. In Typescript, coding
is easier and powerful features can be implemented using simple code. This makes coding in typescript much easier and more powerful. But, the browser cannot understand
typescript. So, typescript code needs to be compiled into plain Javascript code during
rendering.

17

import { Component, OnInit } from '@angular/core';
@Component({
selector: 'app-home',
templateUrl: './home.component.html',
styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
constructor() { }
ngOnInit() {
}
}

Listing 4. Code written in Typescript

/* tslint:disable:no-unused-variable */
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { DebugElement } from '@angular/core';
import { HomeComponent } from './home.component';
describe('HomeComponent', () => {
let component: HomeComponent;
let fixture: ComponentFixture<HomeComponent>;
beforeEach(async(() => {
TestBed.configureTestingModule({
declarations: [ HomeComponent ]
})
.compileComponents();

18

}));
beforeEach(() => {
fixture = TestBed.createComponent(HomeComponent);
component = fixture.componentInstance;
fixture.detectChanges();
});
it('should create', () => {
expect(component).toBeTruthy();
});
});

Listing 5. Code written in Javascript

Listing 4 and Listing 5 illustrate the difference in using typescript over plain javascript.
Listing 5 has 20 lines of code whereas to perform the same task the code from Listing 4
was used which is a mere 7 lines of code. This demonstrates how write less do more
strategy works great with typescript.

3.4.1

Module

The module of the application is the app.module.ts file that is used to bootstrap the application. In other words, make the application run. In this file, all the typescript files such
as the components, services, guards needs to be added to the file with its location. All
the files need to be addressed because this gives access to the files in the application
and any file at any time could access other files through this main module. Module is a
structure that holds all the angular pieces together.

Angular is mainly used to create single page applications. This means that the application has multiple pages but acts as a single page since all the other pages are dynamically added to a single page. This helps in many things. One is that it becomes a light
application since it doesn’t have to load every time a new page is visited. Other is that
the links become easier to manage since all the link redirect back to the same location.

19

To create this single page links angular uses something called routes giving each page
a specific route to trigger and associating a specific route with a specific component. This
route function can also be added in the module file.

3.4.2

Components

Since components are the building block of the application, each piece of the design has
its own component. There is one component for each one of the pages of the application
and also two or more components combined for a single page of the application. There
are components such as Home component, register component, login component, reset
component.

Components can be easily created through the angular-cli using the command
ng generate component [name]

Using the generate command automatically generates the components and its required
files and also adds it to the module as well. The generate command generates a typescript file, a HTML file, a CSS file and a javascript file which is automatically compiled
and run. The logic of the component is written in the typescript file and the HTML and
CSS is written in their respective file.

Angular uses a MV* architecture as opposed to the normally used MVC architecture. The
model, logic layer and View, display layer are both connected via the controller but in the
MV* architecture the model and view is automatically combined which saves a lot of code
and the code becomes much more less and simple. In angular2, the HTML file is displayed to the user and content are dynamically added or removed in the view using the
model or the typescript file which is compiled to javascript in runtime.

For instance, in the register component there are 4 files namely register.component.ts,
register.component.spec.ts,

register.component.html,

register.component.css. The

names follow the angular naming convention since it is created using the angular-cli. The
register.component.html file contains the new user register form where user can register
by inputting the required information. Then the register.component.ts file handles the
data that comes from the form of the html file and sends it to the backend route for further
processing and saving to the database.

20

3.4.3

Services

Services in this angular2 application are the files that are the bridge between the frontend
and the API. Writing huge lines of code is cumbersome task and if some error occurs it
is even harder to debug. Moreover, the code that needs to be used many times should
not be written over and over again. Code repeat is a huge red flag in a web application
since it takes a lot of time to write and manage.

Thus, services are used. Services can be imported in the module and can be used by
any component. Services in this application are mostly used to communicate with the
server or to check data.
//user authentication
authenticateUser(user){
let headers = new Headers();
headers.append('content-type',

'applica-

tion/json');
return

this.http.post(this.server+'/users/authen-

ticate', user, {headers: headers})
.map(res => res.json());
}

Listing 6. Code from authentication.service.ts

Listing 6 shows how a typical service is coded. Services have different function written
mainly to communicate with the server. As shown on Listing 6, the code is used to authenticate a user who has just tried to login by sending the information with the required
types and headers to the API ‘/users/authenticate’.

3.4.4

Guards

Guards in angular2 is used to prohibit access to certain content of the application without
authentication. Guards are very useful for preventing unauthorized access. This is done
by adding guards to the components that needs to be protected. For instance, a user

21

who has not been registered or does not have the login credentials that match with the
database cannot access the dashboard of the application.
import {Injectable} from '@angular/core';
import {Router, CanActivate} from '@angular/router';
import

{AuthenticationService}

from

'../services/au-

thentication.service';
@Injectable()
export class AuthGuard implements CanActivate{
constructor(private

authService:

Authentication-

Service, private router: Router) {}
canActivate(){
if(this.authService.loggedIn()){
return true;
} else {
this.router.navigate(['']);
return false;
}
}
}

Listing 7. Code from auth.guard.ts

Listing 7 illustrates the code of a typical guard component. These files have a injectable
decorator since they need to be injected to another file to have access or work. The code
in listing 7 creates a AuthGuard class that implements the CanActivate feature of angular
which lets the incoming request to navigate to that section if the user is authenticated,
otherwise the access is denied.

22

4

Result

After starting the project from scratch, the application was finally developed. After development, the application needs to be tested for different errors and bugs in the system.
This section discusses how to application works, what errors occurred and how the errors
were solved. During the development phase, the node application and angular application both run in their own server so a package called cors was used to connect between
these two servers. In the testing phase, the angular code is embedded in the node application so the need for a mediator disappeared. The application was uploaded to heroku after testing.

4.1

Testing

After typing the web address, the homepage of the application is displayed which has
the option to either login or register. First, one must register before they can access their
account. After clicking the register button, it directs to a new page that displays a form.
The user has to enter all the required information in the form and an option in the form
gave the user two user options, first option to create account as a student and second
option to create account as an employer. Two different user groups have two different
dashboards. After submitting the form, the application checks for already used
usernames and emails and if both are unique then an account is created for the user.
Still, the account is not activated. To confirm the user hasn’t entered a fake email, an
email is sent to the users email address with a verification link to verify his account and
after that the user can login.

Having two user groups, two use cases occur and the application is created to handle
both the use cases.

23

Figure 4 – use case diagram for marketplace application

The use case of the student group includes searching for a job in the portal, getting
more information and applying for the job whereas the employer group can post a job
in the system that the students can view, look at all of their posts and even delete them
if wanted.

Since different user groups need to have different pages displayed, this section is handled by the dashboard component which is further divided into the student component
and the employer component.
<div *ngIf="user">
<div *ngIf="user.status == 'student'">
<app-student></app-student>
</div>
<div *ngIf="user.status == 'employer'">
<app-employer [employer_id]="user.id"></app-employer>
</div>
</div>

Listing 8. Code to differentiate user groups

Listing 8 illustrates how to dashboard is created to display pages targeted to specific
user groups. “ngIf” which is a if statement in angular2 determines the status field of the

24

user coming from the server and if the status of the user is student, it directs it to the
student page and if the status is employer, it is directed to the employer page.

Figure 5 – Job listing from the marketplace application

Figure 5 displays the page as seen by a student who has logged in. the student can
see all the jobs that has been posted, click read more to get more information about the
job such as the requirement, the deadline and more. And apply for the job if the user is
interested.

The page for the employer user group is totally different. The user can add a new job
post to the system and view all of the user’s own post.

25

Figure 6 – List of posted jobs in the marketplace application

Figure 6 shows the page displayed in the employer group. The page has listed all the
jobs that the user has posted with an option to delete each one of them. Also on the top
right corner aligned with the my jobs text, there is a plus sign that directs to the add job
link when clicked.

Also, the guards were tested for unauthorized access. Due to use of token based authentication and using passportJS for authentication, the security of the application has
been really good. Without logging in, any user would not be able to access either the
student or the employer page of the application.

Apart from the user verification system, there was also an added feature in the application which is also very important as well. The feature that helps user reset their password in case they forget it back to their email. The user goes to the application and
uses the forgot password link and asks for the email that was used during registering.
An email is sent to that address giving them access to change their password through
a link. The link expires in a few hours to ensure security. This feature gives the user the
convenience to access own account in case the user forgets the password to his account.

26

There were also few problems due to the email sending service for verification as well
as password reset. There were many SMTP service providers but each one had its
own problems. Some were paid providers, some were not been able to set up and
some were pretty much useless. The one used on this application is known as
Nodemailer which is a package in NodeJS as well. It was tried and not working before
during development. Later during testing phase, the school’s email address was used
and the host and port were changed and it worked correctly.
let transporter = nodemailer.createTransport({
host: 'smtp.metropolia.fi', //smtp service
port: 465,
secure: true,
auth: {
user: 'sunilma@metropolia.fi',
pass: '**********'

//user
// password

}
});

Listing 9. Code for email service prodiver initialization

Listing 9 shows the initialization of the email service provider using the nodemailer
package in NodeJS. The host smtp server and the valid port is provided to make it
work correctly. The auth field used to give a authentic user valid on that server whose
account is used to send emails.

During the testing phase, there were few errors that were encountered. The details of
the errors and its solution are discussed in the next section.

4.2

Errors and Solution

There were a few errors that were encountered during testing. One of the first errors was
with browser compatibility issues. The application was solely developed and tested in
Google Chrome web browser. Google chrome web browser is the most popular choice
as a browser for most users as well as testing platform for most developers as well.
There are different features added to google chrome such as the inspection mode, developer options and most features already added that makes development easier.

27

Google chrome is also constantly updating itself and more so often than other browsers
in the market.

The good features were overestimated while developing the application. While posting
the job as an employer, there is a input field named deadline which is of date type. This
date type was easily processed and there was a date type input field during testing in
the chrome browser. But when it was tested in Mozilla firefox browser, this resulted in a
blank input field. Many different options were tried. The solution was to use a third party
plugin that was tried and worked across all browsers.

Another hindrance encountered was when there was issues with the user verification
and the password reset feature. Both of these features were relied on the same data
field of the user information named id. Since id field was already being used by the verification section, there was need for a different form of identification for the password
reset feature.

The problem was solved by using a different schema named token which would create
a unique token for a specific user when a password reset request is made and associate
that token to that particular account and use it as identification. Thus having two different
forms of identification for two different features, it worked like a charm.

5

Foglab

Foglab is a different section of Metropolia’s official website. The link to the website is
http://fog.metropolia.fi/ and it contains information about IoT. To describe the website, it
is a single page website meaning all its content are in the same page and the links are
just anchors to different sections. The first section is the landing page, after it comes the
information about IoT page. Then there is a news section and after that contact information are given. The foglab webpage had been made using the wordpress plugin and
all its content were written in wordpress.

For the project, the foglab website had to be updated and the marketplace application
had to be linked to the website. The update in the website included changing the Fog
laboratorio page, change the contacts page, link the marketplace web application to the

28

website and add two language features in the website namely English and Finnish, which
previously was only available in Finnish.

Figure 7 – IoT page of foglab metropolia

Figure 7 illustrates the design and layout of the foglab page after it has been updated.
Figure 7 gives the description of the IoT page that was update. The links on the right side
are clickable and after clicking it slides down the information on that particular section
and clicking again reverses the action. This feature was achieved by using the JqueryUI
plugin. JqueryUI is a added feature that has to be downloaded separately that can be
easily used to add functionality to a particular section. This particular feature used is
known as the accordion in jqueryUI.

Since the webpage was created in wordpress and the new sections was an integral part
of it. It was recommended to update the website using wordpress to keep the new section
intact. The contact page was updated with the new maps feature provided by google that
pin points the exact location of the Metropolia campus located in Leppävaara, Espoo.

29

Figure 8 – Marketplace linked to the foglab website

Figure 8 shows how the marketplace web application was added to the foglab website.
The news section was divided into two sections. One which would displays the current
news and the other one had links related to the marketplace application. Clicking on
either login or register link would redirect the user to the marketplace web application
where the user could use all the features of the application.

The feature to translate the webpage was quite challenging to do in the wordpress. It
was achieved by using two different classes for different languages and the classes
would be displayed only when their specific link was active. For instance, if the finnish
link active, the content in the finnish class would be displayed and the other would be
hidden and vice versa. This process made the translation process easier and even very
fast because it would not load another page to translate the content, rather it would directly translate using the same content which is very much faster.

30

6

Conclusion

There were two different goals of the project. The first one was to create a job portal web
application that could be used to be a medium between the employers and students to
exchange information about new jobs and its requirements. The other one was to redesign the foglab website to embed the previous application to this website. Both of the
goals were achieved successfully. The web applications API was developed and the
application was fully tested. The same API could be used again in different areas where
the same information can be used. The application was also linked to the FogLab website
of Metropolia.

With the increase in interest and the huge growth in the Internet of Things and being a
student of Information Technology, it is necessary to give information about the internet
and its applications to new students. The web is rapidly increasing and developing creating vast application in every field available. Everything now can and is done in the web.
Banks, hospitals, companies all have their own website and web applications for its customers. Web applications are getting more popular and more useful and its complexing
is increasing every day. Thus creating a huge demand for web developers that can fulfil
the growing need.

Thus creating these types of simple applications helps to get knowledge and experience
in the web application development world which benefit for future endeavours where one
show his work and impress the employers. The demand for Angular and node developers
are high so increasing your skills in this particular field is very likely to land a good job
and also create powerful applications and make the life to many people a bit easier.

31

References
[1]

Korolova,

Luliia.

(2016).

Frontend

vs

Backend

web

development.

https://www.aog.jobs/blog/frontend-vs-backend-web-development-whom-do-you-needfor-your-project

[2]

Ribeiro,

Joao.

(2017).

The

Front-end

Web

Developer

Spectrum.

http://joaoperibeiro.com/the-front-end-developer-spectrum/

[3]

Developer survey results. (2017). https://insights.stackoverflow.com/sur-

vey/2017?utm_source=so-owned&utm_medium=social&utm_campaign=dev-survey-2017&utm_content=social-share

[4] AngularJS. Angular 1 and angular 2 integration. http://Angularjs.blogspot.fi/2015/08/Angular-1-and-Angular-2- coexistence.html

.[5] Wikipedia, The free encyclopedia. NodeJS. https://en.wikipedia.org/wiki/Node.js

[6] Technopedia. MongoDB. https://www.techopedia.com/definition/30340/mongodb

[7] Bhardwaj, Rachit. (2017). Basic building blocks of Angular 2 Architecture.
https://dzone.com/articles/components-of-angular2-architecture

[8] what is angular?. Angular 2 Documentation. https://angular.io/docs

[9] Nwamba, Chris. (2015). Seamless ways to upgrade Angular 1 to Angular 2.
https://scotch.io/tutorials/seamless-ways-to-upgrade-angular-1-x-to-angular-2

[10] Simons, Eric. (2017). A better way to learn Angular2. https://thinkster.io/tutorials/learn-angular-2
[11] Nemeth, Gergely. (2017). What’s new in NodeJS 8.5?. https://blog.risingstack.com/whats-new-in-node-js-8-5/

[12]

Weiss,

Manuel.

(2017).

The

https://blog.codeship.com/node-js-tutorial/

absolute

beginners

guide

to

NodeJS.

Appendix 1
1 (1)

Title of the Appendix
Content of the appendix is placed here.

Appendix 2
1 (1)

Marc-André Leprohon

ECMAScript 6 and the evolution of JavaScript
A deeper look into the language’s new features

Helsinki Metropolia University of Applied Sciences
Bachelor Degree
Information Technology
Thesis
18 April 2017

Abstract

Author(s)
Title

Marc-André Leprohon
ES6 and the evolution of JavaScript

Number of Pages
Date

35
18 April 2017.

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor(s)

Kimmo Sauren (project supervisor)

The thesis covers the evolution of the JavaScript programming language from its inception
up until the ECMAScript 6 iteration of the standard. The goal of the thesis was to analyse
the language’s new features and to explain how they affect its structure, purpose and nature.
The project was carried out mostly through exhaustive literature review and as a technical
analysis of the new features. The latter was often executed by comparing the ES6 features
with their old ES5 equivalents. Code examples were added anywhere relevant in order to
explain and support specific claims.
As a result of the technical overview of ECMAScript 6, the thesis intends to prove how the
new iteration of the standard is developing the language further by introducing new innovative features thus allowing programmers to build powerful applications more simply and
efficiently. Moreover, the structural changes of the languages were taken into consideration and their impact analysed.
In conclusion, the ECMAScript 6 standard certainly tries to redefine the language itself,
mostly with the inclusion of classes. While JavaScript was considered a functional programming language, it is safe to conclude that it has started to move towards objectoriented principles in the recent years. With its increasing popularity, it is reasonable to
expect an acceleration in the redefinition of the language.

Keywords

JavaScript, ES6, ECMAScript 2015

Contents

1

Introduction

1

2

Brief history of JavaScript

1

2.1

From hypertext to graphical browsers

1

2.2

Netscape Navigator and Brendan Eich

1

2.3

Fighting a bad reputation

2

2.4

Microsoft

2

2.5

Standardisation

2

2.6

The long road to ECMAScript 6

3

3

ECMAScript 6

3

3.1

Transition period with transpilers

3

3.2

New features

3

3.2.1 const and let

3

3.2.2 Scopes

4

3.2.3 Arrow Functions

6

3.2.4 New parameters and operators in ES6

7

3.2.5 String manipulation: template strings, interpolation, tags and raw
strings 10

4

5

3.2.6 Modules

11

3.2.7 Classes

15

3.2.8 Promises

23

JavaScript as an object-oriented language

28

4.1

Shared states

28

4.2

Race condition

29

4.3

Advantages of a OOP approach

29

4.4

Best of both worlds

29

4.5

Performance improvements

30

Conclusion

References

30
32

1 (35)

1

Introduction

The web is becoming more and more complex and the applications running behind the
scene are growing in terms of functionality and complexity. In 2017, JavaScript is at the
heart of it all. All browsers can interpret JavaScript code and most of the dynamic nature of web pages is made possible because of JavaScript. In the recent years, the
language has spread even further, expanding to the server side with technologies such
as Node.js. This thesis covers the birth of JavaScript, putting it in context with its predecessors, and its evolution to this day. Then are introduced the core concepts of ECMAScript6 and the new features it brings to programmers. Finally, an attempt is made
to explain how this iteration of the ECMA standard will develop the web further for
years to come.

2
2.1

Brief history of JavaScript
From hypertext to graphical browsers

JavaScript itself was created in 1995, but it is useful to examine the time before this to
understand the context in which it was born. While the communication over a network
go as far as the 1960s, the Internet as we know it really started to develop in the 1980s
and 1990s. The JavaScript discussion really becomes relevant when browsers start to
emerge on the Internet as a way to access web pages over the HTML protocol. In its
infancy, the Internet was a mean for researchers and scholars to exchange information.
It was the National Center for Supercomputing Application (NCSA) who developed the
first graphical web browser [1]. Its predecessors, such as ViolaWWW and Lynx, were
purely textual browsers and while they are an integral part of the development of the
Internet, they never gained mainstream traction. The creator of Mosaic was Marc Andreessen who would later join Netscape and work on the Navigator product. The release of Netscape Navigator is pivotal for the history of JavaScript and the web in general.

2.2

Netscape Navigator and Brendan Eich

In 1995 Netscape started supporting Java but soon faced the problem that web designers and developers were generally not Java developers or even acquainted with
the object-oriented principles. A smaller-scale, purpose-built language was needed. In
1995, the company hired Brendan Eich, who was tasked to develop a language that
would allow both web administrators to connect and interact with the database and web

2 (35)
developers to interact with the web pages in the browser and make them more dynamic [2, 46]. Already in its inception the language had both a client and server purpose. A loosely-typed scripting language was born under the wing of Eich and was
called Livescript. In the same year the language was renamed JavaScript, a marketing
move that was supposed to exploit Java’s momentum, but would eventually lead to a
lot of confusion substantial confusion among the general public and new programmers.
[3] [4]

2.3

Fighting a bad reputation

The evolution of JavaScript from its humble beginning to today is quite remarkable. In
its early inception, it was considered by many a hobbyist scripting language, much different from fully fledged and tooled languages such as Java. However, its purpose-built
nature allowed it to grow and be adopted overtime by other browsers. According to
Shannon Horn, the language went from a phase of enthusiasm to a phase of distrust
(partly because of security issues) followed by a renaissance in the more recent years.
[5, 36]

2.4

Microsoft

Microsoft recognized the potential for JavaScript and created its own implementation of
the language called JScript. The language, which was first released in Internet Explorer
(IE) 3, was very similar to JavaScript but with a few IE-specific features. Over the next
few years, both Netscape and Microsoft would continue developing their own version of
the language. The languages remained very similar, but the discrepancies between led
to the two led to a will to standardize. [6, 27]

2.5

Standardisation

In 1996, as JavaScript grew in popularity, it was taken to ECMA for standardisation.
ECMA is an organization founded in 1961 whose focus is to provide and publish standardisation in the IT and ICT field [7]. In a press release, Netscape said that “to enable
interested parties to review the JavaScript proposal, Netscape is posting the JavaScript
specification on its Internet site [8].”
The first edition of the standard was ready in June 1997 and published under the codename Standard ECMA-262. The report, entitled ECMAScript: A general purpose,
cross-platform programming language, officially defines for the first time the web scrip-

3 (35)
ting language called ECMAScript. While ECMASCript is a language and a standard of
its own, JavaScript, JScript and ActionScript are implementations of the standard [9].

2.6

The long road to ECMAScript 6

The most important update to the standard came in 1999 when ECMAScript 3 was
released. It introduced a large numbers of new concepts such as do-while, regular expressions, exception handling and several string methods. The next version (4), called
Harmory, was eventually abandoned. According to Brendan Eich, the creator of
JavaScript, “Some ES4 proposals have been deemed unsound for the Web, and are
off the table for good: packages, namespaces and early binding.” [10] We had to wait
until 2008 for ECMAScript 5 to be released. It includes features like strict mode, getters
and setters and JSON support. The most recent implementation is now ECMAScript 6
which was accepted in June 2015 and is slowly being supported by browsers. Most of
the code written by web developers still uses ECMASCript 5 syntax and concepts but
more and more ECMAScript 6 features are being used by developer and integrated
into JavaScript frameworks. The next section is the core of the thesis and will discuss
the new concepts introduced by the new standards. It will do so by explaining their
structure and purpose. On a more global level, this thesis attempts to explain how
these new features will promote the language and move the web forward [11, 45].

3

ECMAScript 6

3.1

Transition period with transpilers

Transpilers, in the most generic sense, translates

code into a different standard. In

the context of ES6, transpilers are very useful for programmers to write code that is not
yet fully supported by all browsers. It allows the web developer to write next generation
JavaScript already today and have it translated into code that browsers fully comprehend. The two most popular ES5 to ES6 transpilers today are Google Traceur and
Babel (formerly 5 to 6). As more and more features are supported by browsers, the use
of transpilers will become irrelevant. The next section of the thesis will cover the different new features of the language.
3.2
3.2.1

New features
const and let

ES6 is introducing the const and let keywords. let allows the programmer to declare a
variable which only exists within a block. It is similar to the var keyword which scope

4 (35)
extended to either the function or globally, depending where it is declared. The let keyword allows for more control over the scope of the variable.
function testingLet() {
let x = 100;
if(x < 150) {
let x = 200;
console.log(x) // 200 (inside the block)
}
console.log(x); // 100 (initial value because we
existed the block)
}
Listing 1. Code example for let
In the example above, the result would be different if we used var instead of let. This
very simple example shows the potential for using the let keyword instead of var if we
want to manipulate the value within a block only without changing the value of the variable within the function.
Constants are being introduced through the const keyword. The purpose of a constant
is to allow for maintenance and immutability. They are used to set the value of a variable that should essentially never change. In the exceptional cases where you would
change the value of a constant, it remains easy to do. Usually declared on top of the
file, the constant value can be changed in a single location and let the application use
the new value throughout its code [12].

3.2.2

Scopes

As we have seen with the let keyword, ES6 provides more flexibility when it comes to
scoping. In ES5, variables could only be globally available or valid only inside a function. ES6 introduces the concept of block scoping to the language.
Block scope
A block can have different shapes, for example: an if block and a for loop are both considered as blocks. The following example shows how a constant can be defined within
a for loop and changed on every iteration. The value is still immutable but since the

5 (35)
scope is limited to the block, it is reset on every iteration. Trying to redefine a constant
in the same block will create an error.
function constScope() {
for(var i=0; i<arguments.length; i++) {
const OUTPUT = arguments[i];
console.log(OUTPUT);
}
}
constScope('first', 'second');
Listing 2. Code example for block scope
In ES5, the language has a function-level scope. Variables cannot be block-scope variables per-se. It is, however, possible to emulate block-scoping by writing the following:
function foo() {
var x = ‘hello’;
if (x) {
(function () {
var x = ‘world’;
}());
}
// x ‘.
}
Listing 3. ES5 block score emulation
Listing 3 is a good example of how ES5 emulation drove the language forward. Many
of the new features introduced by ES6 have been executed in ES5 through a series of
hack and third party code.
Hoisting and temporal dead zone
The variables declared with let are considered to be in a ‘temporal dead zone’ from the
start of the block until the actual variable declaration. This means that if the variable is
called before it is declared, a TypeReference error will be thrown. This is important to
keep in mind since it differs from how var variables are treated. A var variable will be
hoisted to the top of the block so it will be made available before it is actually declared.
This is possible because the JavaScript interpreter does two passes on the code. In the
first pass, it hoists the variable to the top of the block. Hence, they are available in the

6 (35)
second pass when other operations are processed. Let variable do not get such treatment.

3.2.3

Arrow Functions

To understand the new arrow functions, it is best to look at a comparison example between the ES5 and the ES6 nomenclatures:
function(x, y) { return x + y; } // ES5
(x, y) =>

x + y // ES6

Listing 4. Comparison between a regular ES5 function and a ES6 arrow function

Essentially, arrow functions allow programmers to avoid typing the function and return
keywords, the curly brackets and the semi-colon. This makes the code much easier to
read and maintain. Let us consider the following arrow function:
values => values[0];
Listing 5. Simple arrow function
As Listing 5 shows, the return statement of a single-statement arrow function is implicit.
Moreover, since we have a single argument, we can drop the parentheses. In this
case, the function returns the first value of the values array. In other programming languages, these single-statement functions are usually called Lambdas.
Arrow functions and this
The this keyword has always been slightly problematic in JavaScript since it behaves
differently than other languages. In PHP for example, this refers to the instance of a
class: the current object. In JavaScript however it refers to the function it sits in. Every
function creates its own context.
Contrary to traditional functions, the arrow function does not create its own this instance. It simply inherits it from the scope surrounding it. In regular functions, the fact
that every single function comes with its own scope can create problems. Let us consider the following code:
function testThis (service) {
var that = this;

7 (35)
that.foo = 'Hello';
service.execute(function (response) {
that.foo = response;
});
}
Listing 6 Storing this value in ES5
Listing 6 illustrates a fairly regular ‘hack’ in JavaScript. Upon entering the inner function
whose role is to execute a function of the service, we encounter a scoping problem
where this has a new value. For that reason, we store the value of the outer function
into the variable that and use it in the inner function. With arrows functions, this problem is solved. Note that the problem above could also be solved with bind(), another
relatively verbose alternative. In ES6, the arrow functions allows us to do the following:
function testThis (service) {
this.foo = 'Hello';
service.execute((response) => this.foo = response);
}
Listing 7. Arrow function and this
The inner function can use this directly without having to first store its value in a temporary variable. This is extremely useful when dealing with inner functions as it simplifies
the syntax greatly which in turn leads to a less error-prone code. This is most likely the
most useful feature of the arrow function in ES6 [13] [14].

3.2.4

New parameters and operators in ES6

Several new types of parameters and operators are introduced to the language with
ES6. The following section will introduce the rest and default parameters as well as the
spread operator.
Rest parameter
Rest parameters are denoted with the ellipsis (...). In ES5, when wanting a function
containing an undefined amount of arguments, programmers can use the arguments
keyword which is an array containing everything that was passed to the function. Let us
compare ES5 and ES6 codes.
// ES5
function hobbyComparer(myHobbies) {

8 (35)
for (var i = 1; i < arguments.length; i++) {
var hobby = arguments[i];
if (myHobbies.indexOf(hobby) === -1) {
console.log(false)
return false;
}
}
console.log(true);
return true;
}
var myHobbies = ['volleyball', 'painting', 'fishing'];
hobbyComparer(myHobbies, "volleyball", "painting");

// ES6
function hobbyComparer(myHobbies, ...yourHobbies) {
for (var yourHobby of yourHobbies) {
if (myHobbies.indexOf(yourHobby) === -1) {
console.log(false);
return false;
}
}
console.log(true);
return true;
}
var myHobbies = ['volleyball', 'painting', 'fishing'];
hobbyComparer(myHobbies, "volleyball", "painting");
Listing 8. Use of the rest operator in ES6
The sample function in Listing 8 checks if both parties share all of the same hobbies. In
the ES6 code, it is made clearer that the function is expecting both my hobbies (commonly referred as the haystack) and your hobbies (referred as needles). We do not
have to rely on the arguments keyword since everything that comes after it is considered as being part of the same argument and stored into an array. In ES5, the arguments keyword contains all of the arguments passed to a function while the rest parameter only contains the last one. One more difference is that the rest parameter is an
actual array, which allows you access to all native array methods in order to manipulate
it.

9 (35)

Default parameter
Default parameters are a feature already available in several traditional programming
languages such as Java or PHP. It is finally being included in the language as part of
ES6. It can alleviate issues related to undefined variables within a function. The following code snippet clearly shows the usefulness of default parameters.
// ES5
function greet(name) {
var name = typeof name !== 'undefined' ?

name :

'visitor';
console.log('Hello '+ name);
}
greet();
// ES6
function greet(name=’visitor’) {
console.log('Hello '+ name);
}
greet();
Listing 9. Default parameters in ES6
With the new syntax, there is no more need to check if the argument passed is undefined. It is done on the argument level directly by assigning it a default value in the case
of an undefined value. Even in the case of an argument specifically set to ‘undefined’,
the default value will be used.
Spread operator
As with the rest parameter, the spread operator uses the ellipsis to represent a single
entity that could be separate entities. It is most often used as an example replacement
for the Function.prototype.apply() approach utilised in ES5.
// ES5
array = [1, 2 ,3];
function.apply(null, array);
// ES6

10 (35)
array = [1, 2 ,3];
function(...array));
//ES6
var numbers = [3, 4];
var numbers2 = [1,2, ...numbers 5,6]; // [1,2,3,4,5,6]
//ES6
numbers2.push(...numbers); //[1,2,3,4,5,6,3,4]
Listing 10. Array manipulation with the spread operator
As Listing 10 shows, it is possible to insert an array within another array with the help
of the spread operator. It also allows for array easy array pushing. Spread operator
makes array manipulation easier and cleaner.

3.2.5

String manipulation: template strings, interpolation, tags and raw strings

Template strings are string literals allowing for simpler multi-line strings. By using the
backtick character ( ` ) around strings, it is possible to easily output multiline strings. A
perhaps more useful feature is the possibility to interpolate, or substitute a variable
directly within a string without having to rely on the concatenation operator.
//ES6
let x = 5;
let y= 6;
console.log(`You are ${x * y} years old`); //Will output: You are 30 years old
Listing 11. Interpolation in ES6
The tagging functionality of template strings allows the programmer to further customize the output of a string by allowing for manipulation within a function.
let x = 30;
function templateFunction(strings, ...values) {
console.log(`${strings[0]}${values[0]}
${strings[1]}`);
return 'Processed!';
}

11 (35)
console.log(templateFunction`You are ${x} years old`);
//You are 30 years old
// Processed!
Listing 12. String manipulation with tags
In the example code of Listing 12, we use a function to manipulate the passed string by
using interpolation. The function itself also returns a string that we output. This is a useful feature of the language when it comes to developing a user interface where, for example, the current username needs to be output within a predefined and hardcoded
string.
Raw strings are an additional string feature offered by ES6. It is a very straightforward
and allows for easy access to the string without escaping any characters or interpreting
characters such as backslash.
//ES6
let

‘rawString

=

String.raw`First

line

\n

Second

line`;
console.log(rawString); //First line \n Second line’;
Listing 13. Example of raw string usage in ES6
We can use this functionality shown in Listing 13 within a tag function as well with
string.raw[x]. There is no such equivalent in ES5.

3.2.6

Modules

Prior to ES6, modularisation was not possible with pure JavaScript. To circumvent the
problem, standards such as CommonJS Modules and Asynchronous Module Definition
(AMD) were created. They allowed programmers to load JS files (modules) within other
JavaScript files. The main advantage to working with modules is code organization and
dependency management.
With the advent of ES6, modules are supported at a language level and are denoted
with the module keyword within the script tag. Both regular scripts and modules use the
same .js file extension, but while regular scripts are loaded synchronously by the
browser, modules are loaded asynchronously.

12 (35)
Exporting
The first step in creating modular JavaScript is to export code that can be used by
other modules.
// ES6
// myExporterFile.js
export function myExportedMethod() {
console.log(‘Hello from the exported method!’);
}
// Export simple variables
export let myExportedVar = {};
// Export whole classes
export class myClass {}
Listing 14. Example code for export functionality in ES6

As seen in Listing 14, it is possible to export just about anything, ranging from simple
data so full fledged classes. This is the first step in making JavaScript truly modular.
Importing
The counterpart of exporting is the import keyword. After exporting a block of code, it
becomes possible to import it and use the contained methods directly. The following
code example shows different ways to import code.
Import

{

myExportedMethod

as

myRenamedMethod

}

‘./myExporterFile’;
myRenamedMethod(); // Hello from the exported method!
//Import everything
Import * as imported from ‘./lib.js’;
//Import whatever was defined as default
import imported from ./greet.js
//Importing both default and non-default
import myDefault, { someNonDefault } from ./myfile.js
Listing 15. Different ways to use imports in ES6

from

13 (35)
It is also possible to import a whole module by using the star ( * ) symbol as depicted in
Listing 15. This imports the whole file as a single object and allows for easy access,
using the dot notation, to all of the file’s methods and variables as regular object properties. This type of import is called namespace import [15].
When it comes to importing default values, the syntax is very simple. Contrarily to the
regular, non-default, exports, it does not require any curly braces. The import is named
import will import whatever was set as default export within greet.js. It is even possible
to export/import both default and non-default bindings. When importing, one simply
needs to separate them by a comma. They are easy to differentiate since the default
import has no curly braces surrounding it.
Restrictions regarding exports and imports
Both modular expressions are meant to be fairly static. This means that it is not possible to export a variable inside a conditional expression. Similarly, one cannot import
anything with a function or statement. In that sense, the modules feature of ES6 is not
dynamic [16].
Default exports
It is also possible to define default exports anonymously. There can only be one default
export per file. There are several ways to export something by default. One example is
to use the renaming scheme using the JavaScript default keyword within it:
function greet (name) {
return ‘Hello ‘ + name;
}
export { greet as default };
Listing 16. Default exports in ES6
Loading modules in the browser
The traditional and most common way to load JavaScript in a webpage is to include a
<script> tag, to provide the location of the script in the src attribute and to set the type
as text/javascript. Loading a module in the browser is very similar except for the type
attribute that changes to module. This has the effect of excluding all of its content from
the global scope. It is encapsulated within the module unless it is specifically exported
and imported.

14 (35)

Differed loading
Perhaps the most important aspect of the new modular nature of ES6 is that there is no
need to load all of the code at once. This was already possible with technology such as
CommonJS and AMD which purpose was exactly to provide JS with a modular functionality. With ES6, however, this becomes part of the language itself.
By default, when including a module in a web page, the browser will load the code sequentially as it appears. In practice, if the first module that the browser encounters contains imports, it will recursively load all the dependencies. The recursive nature of the
loading means that the browser will go as deep as needed before coming back to the
top-level and load the second module directly included on the web page.

15 (35)
Figure 1. Module loading in the browser
Figure 1 depicts the way the modules are loaded within the browser. The execution of
the code follows a similar but slightly different model. Instead of loading the module 1
first, it needs to loads all the dependencies within it. This makes sense because the
higher level modules depend on the lower level ones; hence, they are importing them.
It is also possible to load modules using web workers. Web workers provide an API
that allows the loading of script to run as background tasks. It can help with page responsiveness since it does not have to wait and does not prevent other scripts or modules from loading. This thesis will not go into many details about web workers, but it is
good to note that it is perfectly possible for web workers to handle modules, just like
they do with regular scripts [17].
Overall, modules are a way to encapsulate logic. It is also a way to protect your variables and functions from being accessed if necessary. To make the code available to
other parts of the application, the programmer must make use of exports and imports.

3.2.7

Classes

It took much iteration of the standards for classes to arrive in the JavaScript world. Object-oriented languages like Java have had access to classes for a long time but it
never got included by default within the language. This never stopped third party library
developers from creating solutions that emulate classes. With classes come many important concepts such as inheritance, extension, polymorphism, etc.
Prototypal OOP and the constructor pattern
The traditional way to emulate classes in JavaScript is to use a prototypal approach.
First, you declare a function. Let us consider an Animal function:
// We declare the function
function Animal (color, size) {
this.color = color;
this.size = size;
}
// We add prototypal functions
Animal.prototype.describe = function() {

16 (35)
console.log(‘The animal is of size ‘ + size

+ ‘

and of colour ‘ + color;
}
//We create a new instance of the “class” and use it
var animal = new Animal(‘grey’, ‘medium’);
animal.describe();
Listing 17. Prototypal approach
Listing 17 shows the ES5 approach to class emulation. The function Animal acts as a
class with properties colour and size. Following the declaration, we added new methods via the prototype functionality of the language. Finally, we can create an instance
of the class and access its methods.
In essence, JavaScript uses prototypal inheritance to encapsulate all the characteristics of a class, namely its property and methods. There are other approaches than the
prototypal one, namely the constructor pattern. This pattern tries to emulate even more
closely the classical OOP approach by instantiating an object and calling a constructor.
The following example illustrates this approach:
function Programmer(name) {
Person.call(this, name);
}
Programmer.prototype

=

Ob-

ject.create(Person.prototype);
Programmer.prototype.constructor = Programmer;
Listing 18. Constructor approach
Listing 18 is a good example of a classic JavaScript malpractice because it throws
shade on the real language’s own implementation of OOP. In the words of Douglas
Crockford, one of the main contributors to the development of the language:
“JavaScript’s constructor pattern did not appeal to the classical crowd. It also obscured
JavaScript’s true prototypal nature. As a result, there are very few programmers who
know how to use the language effectively.” [18]

17 (35)
ES6 approach to classes
ES6 brings solutions to some of those problems and complexity by introducing classes
to the language. Let us re-create the simple code above in a more classical approach,
using the new ES6 classes.
class Animal {
constructor(color, size) {
this.color = color;
this. size = size;
}
describe() {
console.log(‘The animal if of ‘ + size

+ ‘

size and of ‘ + color + ‘ color.’;
}
}
let animal = new Animal(‘blue’, ‘small’);
animal.describe();
Listing 19. ES6 classes
In Listing 19 we have declared a class with self-contained properties and methods and
utilised it. One of the main differences compared to the ES5 approach to classes is the
disappearance of the function keyword within the class, prototype and method declaration. The new syntax is much more concise and in line with other object-oriented programming. This is, however, a superficial difference since JavaScript actually considers
classes a function; classes do behave differently than regular functions.
Primary characteristics of classes
Classes are not hoisted, meaning that they behave like a declarative let. In practice,
this means that functions that make use of a class cannot be called before the class
itself is declared and evaluated. Moreover, everything in a class acts in strict mode.
And commas between member declarations are forbidden [19].
Class declaration and expression
While the previous example class was named Animal, it is possible to declare classes
anonymously:
let myClass = class {

18 (35)
…
}
let instanceOfMyClass = new myClass(“foo”);
Listing 20. Alternative class declaration
Listing 20 shows that there is nothing required after the class keyword. The main difference with the first declaration resides in the fact that the anonymous class’ name
property is always empty. It is, however, possible to create non-anonymous class expressions by simply adding an expression after the class keyword.
Getting and setting values
The way to set the value of a property or retrieving its value is very simple. Let us consider a simple example with class foo:
class Foo {
constructor(name) {
this.name = name;
}
get name() {
return this.name;
}
set name(myName) {
this.name = myName;
}
}
Listing 21. Getter and setter example
In Listing 21 we declared a class with a constructor, a getter and a setter. Calling the
getter after instantiating the class will allow the user to get the current name set for the
object (done within the constructor). Alternatively, calling the setter will allow us to redefine the name property.
Concept of first-class citizen in JavaScript
Anything that can be passed as a value is considered to be a “first-class” citizen.
Classes are no exception to the rule in JavaScript. They can indeed be used as an
argument to a function.

19 (35)

Static method
Static methods do not depend on the objects but on the class itself. They can be called
directly on the class without the need to instantiate the class first. Let us create the Car
class with a setMake static method:
class Car {
...
static setMake(name) {
return new Car(name);
}
}
let car = Car.setMake(‘Ford’);
Listing 22. Static method example in ES6
If we try to call the staticMethod on an instantiated object in Listing 22, an error will be
thrown. To avoid the error, the static method should be called directly on the class. The
static methods can be used in subclasses as well. Static classes are mostly useful for
their utility purpose. For example, if we have a calculator class with methods offering
different mathematical operations, it does not make sense to create a new calculator
every time. We can simply use the class directly to execute the mathematical operation
needed. For small applications, the difference in execution speed is minimal. The following code example consists of a small test that shows the difference between the
two:
var t0 = performance.now();
class Car2 {
doSquareRoot(number) {
return Math.sqrt(number);
}
}
let car2 = new Car2();
let result2 = car2.doSquareRoot("123456789");
console.log(result2);
var t1 = performance.now();

20 (35)
console.log("Call to doSquareRoot took " + (t1 - t0) +
" milliseconds.")
var t0 = performance.now();
class Car {
static doSquareRoot(number) {
return Math.sqrt(number);
}
}
let result = Car.doSquareRoot("123456789");
console.log(result);
var t1 = performance.now();
console.log("Call to doSquareRoot took " + (t1 - t0) +
" milliseconds.")
Listing 23. Performance test for static methods
The first test in Listing 23 will yield a result of 1.535 milliseconds, while the second one
returns 0.585 milliseconds. The difference between the two is only one millisecond. For
larger applications, however, where the instantiated class needs to also instantiate a
bunch of objects, using static methods will result in less overhead and consequently to
more performing applications [20].
Generator methods
A generator allows you to iterate, exit and resume the execution of a function or a
method. In the ES6 world, just like with regular functions, the symbol used to denote
generators is the star symbol ( * ). An iterator method must contain the yield keyword.
Used alongside promises, generators allow programmers to write asynchronous code
by being able to pause the execution within an iteration [21]. The generators themselves are covered more in depth within another section of the thesis.
Subclassing
With the arrival of classes also comes the possibility to extend said classes and create
subclasses. The advantage of a subclass is that it possesses all the properties and
methods of the superclass, but can add its own methods and properties, without influencing the superclass. A subclass can also be called a derived class while the super-

21 (35)
class is usually referred to as the base class. Let us look at an example where we have
a Car base class and a ColouredCar derived class.
class Car {
constructor(make, model) {
this.make = make;
this.model = model;
}
stringify() {
return

this.make.toString()

+

this.model.toString()
}
}
class DatedCar extends Car {
constructor(make, model, year) {
super(make, model);
this.year = year;
}
stringify() {
return super.stringify() + ' was built in ' +
this.year;
}
}
datedcar = new DatedCar("ford", "taurus", 1998);
datedcar = datedcar.toString();
console.log(datedcar);
Listing 24. Subclassing in ES6
The derived class depicted in Listing 24 does not need to assign the values in the constructor since the base class already does it. It can simply use the keyword super
which in this case refers to the constructor of the base class. In its own implementation
of the stringify method, it also calls the stringify method of the base class.
It is important to note that calling the superconstructor is mandatory before being able
to use the keyword this or even before instantiating an instance of the derived class

22 (35)
with an empty constructor. In both cases, failing to do so with result in a ReferenceError [16].

Protecting class data
In certain programming languages, protecting data by setting them as private is done
via a keyword of the same name. All properties that can only be changed by the current
class will be formally denoted as such. To be able to access those properties from instantiated objects, the keyword public is used.
In ES5 this was accomplished by appending an underscore character to the variable
that should be considered private. However, while widely used, this offered no real protection as it is merely a naming convention and a guideline not to alter the data at
hand.
//ES5
Class MakeItPrivateES5 {
constructor(x, y) {
this._x = x;
this_y = y;
}
}
//ES6 with WeakMaps
let _x = new WeakMap();
let _y = new WeakMap();
class MakePrivateES6 {
constructor(x, y) {
_x.set(this, x);
_y.set(this, y);
}
...
}
//ES6 with Symbols
const _x = new Symbol(‘x’);
cont _y = new Symbol(‘y’);
class MakePrivateES6 {

23 (35)
constructor(x, y) {
this[_x] = x;
this[_y] = y;
}
...
}

Listing 25. Private properties in ES5 and ES6
The example in Listing 25 shows how to make properties private within ES5 and ES6.
For the latter, Weakmaps and symbols are utilised to accomplish the desired result.
The constructor sets its passed data to the WeakMap’s’ own private data, effectively
encapsulating it within itself. In a WeakMap, the keys are weak meaning that the references are cleared by the garbage collector [23].
The idea is the same with Symbols. This type of encapsulation however remains very
‘hacky’, but there are proposals being outlined to make the private keyword part of the
language. Yehud Katz from the ECMAScript’s TC39 standards committee, and cofounder of ember.js, is currently preparing such a proposal [24].

3.2.8

Promises

JavaScript has always been an interactive language because of its application on the
web. As users interact with a page, the language needs to be able to react accordingly
and effectively. As a result, functionality such as events and callbacks were created
and perfected throughout the language evolution.
The asynchronous nature of JavaScript
To understand why being asynchronous is important, it is relevant to have a look at the
concurrency model and the event loop. At runtime, JavaScript operates using the concepts of stack, heap and queue. The queue consists of a series of messages that are
lined-up in the memory, ready to be processed within the stack. Once the stack is
empty, the first message in the queue gets taken and a function stack is created. A
stack is created when going through the code. The global scope is first analysed and
each call to functions is pushed to the top of the stack as a separate frame. Once the

24 (35)
whole stack is executed, the next message in the queue is processed. The heap in this
case is a separate part of the memory used to store data.
One of the aspects that differentiate JavaScript from other languages is that it needs to
finish the whole messages before it starts to process a new one. If the message takes
too long to execute, most browsers present the user with a dialog warning about the
script’s excessive execution time, even allowing the user to stop the script completely.
The simplest example to illustrate this functionality is as follow:
function callback() {
console.log(‘Hi from the callback’);
}
setTimeout(callback, o);
console.log(‘Hi from the global space’);
The output in the console is as follow:
Hi from the global space
Hi from the callback
Listing 26. Simple callback example
Listing 26 shows that the callback function was added to the stack first, followed by the
output in the global space. Even without a timer (the value is set to 0), the callback has
to wait for the rest of the stack to complete.
Always completing but never blocking
One of the key features of the language resides in its I/O processing which never
blocks. It can process other inputs while waiting for events or callbacks to complete.
This is the essence of the asynchronous nature of JavaScript. In practice this means
that while the result of an operation is awaiting its completion in a callback or an event,
the application is free to continue executing the stack. When the operation in the callback terminates, the application is notified. The simplest example is a network request;
the application will not halt because a 3rd party API is not responding with the expected
data. The programmer is strongly encouraged to create asynchronous and sound code
but even in the event of a purposefully blocking code. For example, the browser will not
accept a synchronous sleep() method [25] [26].

25 (35)
Events and callbacks
Events and callbacks are a major part of JavaScript and should be recognizable to all
programmers familiar with the language. To illustrate the event model, let us consider
one of the most popular browser events: the click.
let el = document.getElementById('button1');
el.onclick = function(event) {
alert('clicked!');
}
Listing 27. Simple event example
In Listing 27, the onclick function is not added to the message queue until the user actually clicks the element in question. Events become verbose for more complex scenario and are usually reserved for user interactions such as clicks and taps.
Complex tasks are better handled via a callback function. Callbacks originate from
functional programming which makes use of functions as arguments as a basic principle. Here’s a basic example using the forEach method.
let myArray = ["hehe", "haha", "hihi"];
myArray.forEach(function (el) {
console.log(el);
});
Listing 28. Example with forEach and callback
The forEach method [27], part of the Array class, expects a callback as argument in
Listing 26. If successful, the callback then outputs the content of the array to the console. The callback itself, taking the form of an anonymous function, is not executed until
the forEach method itself is executed. The function can be either named or anonymous. For example, with a custom piece of code it is easy to simply have callback as a
parameter for the function declaration and let the implementation decide on the callback. As long as the callback is effectively executed within the function declaration, the
paradigm is valid [28].
This long-winded introduction to promises starts to take form when considering nested
callback. As an example, if a callback depends on the completion of another function
which also depends on the execution of a callback, we are required to use nested call-

26 (35)
backs. The classic example of callback hell (inspired by callbackhell.com) consists of a
function responsible for reading and writing to a file. It is composed of a series of callbacks to determine if the file actually exists, is valid, is readable and is writable. In essence, all these callbacks are necessary and valid, but in reality they create very complicated code which is prone to errors. The callbacks are also limitative for tracking
multi-operations process state. This is where ES6 promises shine and improve where
callbacks fell short [29].
Improved callbacks
After going through the evolution of asynchronous JavaScript, it is time to introduce the
latest and best instalments of the asynchronous world: the JavaScript promise. As the
name describes, a promise provide the expected result, at some point. The promise
lifecycle comprises of a few different steps. The first state of the promise is pending
and it occurs before it is either accepted or rejected. This image taken from the official
Mozilla documentation describes the lifecycle perfectly [30].
During the pending state, the application executes the asynchronous actions required
and subsequently enters 2 possible states: fulfilled or rejected. In either case, the code
will have to be able to handle the scenario. In the case of a rejection, the most logical
measure to take is to handle the error correctly, for example, by letting the user know
what went wrong. Before going any further, it is important to note the use of the then
method of the promise. This method allows the programmer to take action whether the
promise has been fulfilled or rejected. The recapitulate, a promise has 3 possible
states:
•

Pending

•

Fulfilled

•

Rejected

Then method
Each promise needs to implement the then method in order to be successful. The
method takes 2 arguments: a function to handle a successful promise and a function to
handle a failed promise. Let us consider a very simple and abstract scenario where the
code promises to do something.
let myPromise = doSomething(someParam);

27 (35)
myPromise.then(function(contents) {
// fulfilled, do something with contents.
}, function(err) {
// rejection
console.error(err.message);
});
Listing 29. Example with then
In the rare case where a programmer would only want to handle a failed promise, it is
possible to replace the then method from Listing 29 with the catch method. It is, however, not mandatory to handle the rejection of a failure [29].
It is also possible to chain the promises, meaning that you call an already settled
promise. This is due to the fact that then always returns a promise which can be reevaluated, for example to assign a different value to different objects. In chained promises, the errors are forwarded until a catch or an error handler is encountered.
Promise global object method
There are 4 methods which can be use to interact with promises.
•

Promise.all(iterable)

•

Promise.race(iterable)

•

Promise.reject(reason)

•

Promise.resolve(value)

Resolved() returns a resolved promise object. It can either go through the then chain
and resolve at the end of it, or else it will be fulfilled with the provided value. Let us
consider the simplest scenario where the resolve method is used.
let myPromise = new Promise(function(resolve, reject) {
console.log("This is a promise");
resolve();
//reject();
}).then(function() {
console.log("Promise resolved!");
}).catch(function() {
console.log("Promise unfulfilled!");
});

28 (35)
Listing 30. Example of resolve() function
When the promise of Listing 30 calls the resolve method, the promised is considered
fulfilled and resolved. However, if we were to uncomment the reject call and comment
resolve, the promise would become unfulfilled and the error would be caught by the
catch prototype method [29].
Finally, if a program needs to address several operations happening before doing
something else, then all method becomes useful. The method allows you to make sure
that all operations, for example, network requests, have been executed before executing something else. This enables easy concurrency and keeps the code short and concise. Overall, the main advantage of promises is that it allows for truly asynchronous,
non-blocking code to be executed. It also allows for cleaner code and better error handling than regular callbacks. One point to remember is that while callbacks are functions, promises are simply JavaScript objects [33].

4

JavaScript as an object-oriented language

In the words of Eric Ellitott, a leader figure in the JavaScript World, functional programming can be defined as follows: “the process of building software by composing
pure functions, avoiding shared state, mutable data, and side-effects. Functional programming is declarative rather than imperative, and application state flows through
pure functions.” [34] Functions accomplish all of the roles accomplished by classes and
objects in the object-oriented paradigm. More specifically, pure functions play a central
role in functional programming. They are defined by two rules: the function must consistently return the same value given the same input arguments and it should have no
side effects. They are independent, self-contained and are not affected by external
states. They are not affecting external states either. Traditional JavaScript code usually
includes a large number of pure functions; it is, consequently, at least partly a functional programming language.

4.1

Shared states

Object oriented programming (OOP), as its name implies, revolves around objects.
Objects are an instance of classes (a concept that is now part of JavaScript) that possess defined states and behaviours. In OOP, the complexity is broken down into
smaller chunks of manageable contexts; the classes. In opposition to functional pro-

29 (35)
gramming, OOP objects do alter external states. A class’ whole purpose might be to
change the value of a “master object” which lives outside of its own scope. This concept is called shared state and is omnipresent in OOP code.

4.2

Race condition

While shared state allows for a considerable amount of flexibility, it also contains many
caveats. One of them being the race condition problem. In an asynchronous program,
very popular concept all over the web, an operation on an object may occur while several other operations have been triggered on the same object. A good example of object being altered simultaneously could be a user profile on a website. Shared states
create a timing issue as well as an order of execution issue which can be mitigated by
pure functions in functional programming. This is one of the main arguments for proponents of a purely-functional approach to JavaScript programming.

4.3

Advantages of a OOP approach

While functional programming has a large number of advantages, there are several
reasons why the language has been making a shift towards OOP principles. A program
using classes can be much easier to understand; the state and behaviour are much
more clearly defined with class methods. Classes also help define “things” within our
applications. If you can put a name on a concept, it is most likely definable as a class
with its own set of properties and methods. In a sense, OOP is less abstract than functional programming as it tries to encapsulate a concept understandable by the human
within its own container. This has the advantage of being easily extendable when a
large amount of programming work on the same program, which is usually the case in
an industrial context.

4.4

Best of both worlds

JavaScript has traditionally been considered a functional programming language but
some of the changes brought by ES6 are starting to integrate more and more objectoriented principles within the language. In reality, the two concepts are not mutually
exclusive and both co-exist within most JavaScript code. Some programmers may prefer a functional-programming-oriented approach while others will choose the OOP
route, now more than ever with the inclusion of native classes within the language.

30 (35)
4.5

Performance improvements

According to a report entitles “Performance of ES6 features relative to the ES5 baseline operations per second”, [35] the performance difference between the new ES6
features and their ES5 equivalent varies considerably depending on which browser is
interpreting the code. Among the biggest surprise is that only map-set-lookups seem to
be faster on ES6 across all browsers. On the other side of the spectrum we find ‘mapset-object’ which is executing slower than its ES5 counterpart on all browsers. However, as browsers improve their internal interpretation of JavaScript, we can expect
newer features of the languages to become more powerful than their ES5 counterparts,
for which browsers have been optimized for years. For example, from version to version, the V8 engine (the engine powering Chromium and NodeJS) sees incredible
speed improvement. The following figure is just an example on how fast JavaScript
engines are being optimized to execute recent features such as Promises (ES6) and
Async/Await. [36]

Figure 2. Async performance improvement in V8 engine

5

Conclusion

JavaScript is a language that is continuously being developed. ES7 has been published and ratified in June 2016 and ES8 is already in development and some features
being made public. This thesis did not cover the ES7 but a large amount of documentation is already available and some transpilers allows the programmer to take advantage
of ES7 features already today. For reference, ES7 includes new features such as exponentiation operator and Array.prototype.includes(), while ES8 will bring Await/async
features to the language. [37]

31 (35)
In the TIOBE Index for March 2017, a yearly ranking of most popular programming
language, JavaScript comfortably sits in 8th position with a 0,33% usage increase from
2016 [38]. It is safe to say that the future of JavaScript is bright. With the rise of serverside JavaScript environments such as Node.JS, the language that has often being diminishingly called a scripting language by classic programmer is more relevant than
ever and will continue to drive and power the web forward.

32 (35)

References
1.

National

Science

Foundation

https://www.nsf.gov/about/history/nsf0050/internet/mosaic.htm.

[online].
Accessed

URL:
16

April

2017.
2. Goodman, Danny Morrison, Michael Novitski, Paul Rayl, Tia Gustaff Rayl, Tia Gustaff, JavaScript Bible. Indianapolis, IN: John Wiley & Sons, Incorporated; 2010.
3. Champeon S. JavaScript: How Did We Get Here? [online]. June 2001. URL:
http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html. Accessed 16 April
2017.
4. Short History of JavaScript [online]. June 2012. URL:
https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript. Accessed
16 April 2017.
5. White, Alexei. JavaScript Programmer's Reference. Indianapolis, IN: Wiley Publishing Inc; 2009.
6. Stefanov, Stoyan. Object-Oriented JavaScript. Burmingham, UK: Packt Publishing;
2008.
7. Ecma International, What is Ecma International [online]. URL: http://www.ecmainternational.org/memento/index.html. Accessed 17 April 2017.
8. Industry leaders to advance standardization of Netscape’s JavaScript at standards
body meeting. Netscape to post JavaScript specification and licensing information on
the Internet site [online]. November 1996. URL:
http://web.archive.org/web/19981203070212/http://cgi.netscape.com/newsref/pr/newsr
elease289.html. Accessed 17 April 2017.
9. ECMA. ECMAScript: A general purpose, cross-platform programming language [online]. June 1997. URL: http://www.ecma-international.org/publications/files/ECMA-STARCH/ECMA-262,%201st%20edition,%20June%201997.pdf. Accessed 17 April 2017.

33 (35)

10. Eich B. ECMAScript Harmony [online]. August 2008. URL:
https://mail.mozilla.org/pipermail/es-discuss/2008-August/006837.html. Accessed 17
April 2017.
11 Rauschmayer , Axel. Speaking JavaScript: An In-Depth Guide for Programmers.
Sebastopol, CA: O’Reilley Media; 2014.
12.

const

[online].

URL:

https://developer.mozilla.org/en-

US/docs/Web/JavaScript/Reference/Statements/const. Accessed 18 April 2017.
13. Motto T. ES6 arrow functions, syntax and lexical scoping [online]. URL:
https://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping. Accessed 18
April 2017.
14.

Orendorff

J.

ES6

In

Depth:

Arrow

functions

https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/.

[online].

Accessed

18

URL:
April

2017.
15.

Rauschmayer

A.

Exploring

ES6:

16.

Modules

[online].

URL:

http://exploringjs.com/es6/ch_modules.html. Accessed 18 April 2017.
16. Zakas N. Understanding ECMAScript 6: Encapsulating Code With Modules [online].
URL:

https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-

with-modules. Accessed 18 April 2017.
17.

W3C,

Web

workers

[online].

September

2015.

URL:

https://www.w3.org/TR/workers. Accessed 18 April 2017.
18. Maujood M. Prototypal Object-Oriented Programming using JavaScript [online].
April 2016. URL: https://alistapart.com/article/prototypal-object-oriented-programmingusing-javascript. Accessed 18 April 2017.
19.

Rauschmayer

A.

Exploring

ES6:

15.

Classes

http://exploringjs.com/es6/ch_classes.html. Accessed 18 April 2017.

[online].

URL:

34 (35)
20.

static

[online].

URL:

https://developer.mozilla.org/en-

US/docs/Web/JavaScript/Reference/Classes/static. Accessed 18 April 2017.
21. Lindesay F. Generators [online]. URL: https://www.promisejs.org/generators/. Accessed 18 April 2017.
23. Rauschmayer A. Managing the private data of ES6 classes [online]. January 2016.
URL: http://www.2ality.com/2016/01/private-data-classes.html. Accessed 18 April 2017.
24.

Private

State

for

ECMAScript

Objects

[online].

URL:

https://github.com/wycats/javascript-private-state. Accessed 18 April 2017.
25. Concurrency model and Event Loop [online]. URL:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop.

Accessed

18

April 2017.
26. Rauschmayer A. Exploring ES6: 24. Asynchronous programming (background)
[online]. URL: http://exploringjs.com/es6/ch_async.html#ch_async. Accessed 18 April
2017.
27. Array.prototype.forEach() [online]. URL:
https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach. Accessed 18 April
2017.
28. Understand JavaScript Callback Functions and Use Them [online]. URL:
http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/.
Accessed 18 April 2017.
29. Zakas N. Understanding ECMAScript 6: Promises and Asynchronous Programming
[online].

URL:

https://leanpub.com/understandinges6/read#leanpub-auto-promises-

and-asynchronous-programming. Accessed 18 April 2017.
30.

Promise

[online].

URL:

https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promi
se. Accessed 18 April 2017.

35 (35)

33. Nelson J. Introduction to ES6 Promises – The Four Functions You Need To Avoid
Callback Hell [online]. May 2015. URL:

http://jamesknelson.com/grokking-es6-

promises-the-four-functions-you-need-to-avoid-callback-hell/. Accessed 17 April 2017.
34. Elliott E. Master the JavaScript Interview: What is Functional Programming? [online]. January 2017. URL: https://medium.com/javascript-scene/master-the-javascriptinterview-what-is-functional-programming-7f218c68b3a0#.nh6w6psg7.

Accessed

17

April 2017.
35. Decker K. Performance of ES6 features relative to the ES5 baseline operations per
second [online]. URL: http://kpdecker.github.io/six-speed. Accessed 17 April 2017.
36. Hablich M. V8 JavaScript Engine: Retiring Octane [online]. April 2017.
URL: https://v8project.blogspot.fi/. Accessed 18 April 2017.

37. ECMAScript [online]. URL: https://en.wikipedia.org/wiki/ECMAScript. Accessed 17
April 2017.
38.Tiobe. TIOBE Index for April 2017 [online]. URL:
index/. Accessed 18 April 2017.

https://www.tiobe.com/tiobe-

Kumar Simkhada

Transitioning Angular 2 User Interface (UI) into
React

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
April 12, 2017

Abstract

Author
Title

Kumar Simkhada
Transitioning Angular 2 User Interface (UI) into React

Number of Pages
Date

40 pages + 2 appendices
April 12, 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor(s)

Markku Karhu, Principal Lecturer

The fundamental goal of this thesis was to appraise the comparison and superiority
between the two most favoured front-end JavaScript framework and libraries: Angular 2
and React respectively. Moreover, this thesis is supplemented with the prototype user
interface application in Angular 2.The UI thus developed was completely transitioned into
React to find out the major differences between them.

The study was winded up within three major steps. The initial step in the project was done
by collecting data from the developers and finding out the statistics available on the web.
Secondly, the features and tools applied in the two technologies (Angular 2 and React)
were analysed. Lastly, an identical User Interface application was developed in both
technologies in-order to support the study.
As a result, React was found as a powerful tool for the development of front-end user
interface. Being only responsible for the View component of the application, React was
found more suitable to create an interactive user interface.
The study was concluded highlighting the six major key points: Performance, Learnability,
Templating, Structuring data model, Code reshuffling and Package management.In the
study, it was found that React displayed dominance in major aspects. React showed
superiority in terms of performance, Learnability, package management. While a tie was
found when considering the code reshuffling and structuring data model. However, Angular
2 offered an edge in Templating.

Keywords

AngularJs, Angular 2, React, HTML, JavaScript, Front-end,
Open-source, Bootstrap, Jquery, Virtual DOM, npm, Redux,
Packages, Libraries, Frameworks, Flux, Components,
Performance.

Contents
1

Introduction

1

2

Background

2

2.1

User Interface

2

2.2

Common Problems in UI Development

2

2.3

Latest Trends in Developing the Web Application UI

3

2.4

Front-end Web Technologies

3

3

Research Benchmarks

4 JavaScript UI Frameworks and Libraries
4.1

Web Statistics and Surveys

4.2

Angular 2

5

7
9
12

4.2.1 Typescript on Angular 2

13

4.2.2 Directives and Components

14

4.2.3 Modules

15

4.2.4 Services

16

4.2.5 Templates and Forms

16

4.2.6 Dependency Injection

17

4.2.7 Data Binding

18

4.3 React

19

4.3.1 JSX

20

4.3.2 React Components, Props and State

21

4.3.3 Virtual DOM

22

4.3.4 Forms

23

4.3.5 Flux Architecture

23

4.3.6 Data Binding in React

25

5 Angular 2.0 User Interface

25

5.1

Specifications

27

5.2

Environment Set-up

27

5.3

Implementation

30

6 UI Transition in React

31

6.1

Environment Set-up

31

6.2

Implementation

32

7

Discussion

33

8

Conclusion

37

References
Appendices
Appendix 1. Survey Questionnaires for Front-end Technologies
Appendix 2. Screen Shots of the UIs

38

Abbreviations

API

Application Programming Interface

CLI

Command Line Interface

DOM

Document Object Model

ECMA

European Computer Manifactures Association

ES5/6/7

ECMA Script 5/6/7

HTML

Hypertext Mark-up Language

IE

Internet Explorer

IoT

Internet of Things

IT

Information Technology

JS

JavaScript

JSX

JavaScript and XML

MVC

Model View Controller

MVVM

Model View-View Model

NPM

Node Package Manager

SPA

Single Page Application

UI

User Interface

W3C

World Wide Web Consortium

XML

Extensible Markup Language

List of Figures
Figure 1: Front end Spectrum [2]……………………………………………………………..4
Figure 2: Most loved technologies of 2017 in Web development [5]……………………..8
Figure 3: The Survey Results from the Discussion Groups...…………………………….9
Figure 4: Relationship of Typescript with ES5, ES6, and ES7 [11]…………………….11
Figure 5: Components in Dependency Injection [13]……………………………………..15
Figure 6: Virtual DOM Workflow Visual Representations [18]…………………………...20
Figure 7: Data Flow in Flux Architecture [20]………………………………………………22
Figure 8: Screenshot of Vacancies Section in Tuubi [21]………………………………..26
Figure 9: Use Case Diagram for Job Portal...……………………………………………..27

List of Tables

Table 1: Head to head Comparisons between Angular 2 and React…………………….7
Table 2: Further Comparison between Angular 2 and React…………………………….36

1 (40)

1

Introduction

There has been a diverse modification and introduction of new web technologies since
last decade. Thereafter, web has been the area of intense focus and research of today
because of its unimaginable future. The impact of open-sources and the versatility of
the web are accessible and outspread radically into every sector regardless of the
hardware or software platforms used by engineers, developers and designers.

The method of developing web applications using HTML (Hyper Text Markup Language), CSS (Cascading Style Sheet) and core JavaScript (Scripting Language) in the
presentation layer of a web application is considered as traditional. Later, it was realised by the developers that dynamic and more interactivity in the web is necessary. As
a result, the data-access layer of web was a focus point in web application development. Now, the design and development trend has been changing every year, and emphasis has been given to performance, security, cost and efficiency in order to make a
better user experience. As a matter of fact, there has been a raise of different JavaScript frameworks and libraries to maintain these aspects. However, a rapid change in
the development platform has brought a paradox in selecting the right technologies for
developers.

This thesis outlines the comparison of two most popular framework and libraries of this
time: Angular 2 developed by Google and React developed by the Facebook. Different
methodologies were applied to find out the edge in user interface development between these two technologies. A simple prototype User Interface application was developed in Angular 2 to supplement the thesis and the whole UI was practically implemented into React.

2 (40)

2

2.1

Background to Web Technologies

User Interface

The user interface is the design ground between the machine and the human. This is a
specific field of human-computer interaction that permits the functional control and operations of computer operating systems and software, machineries, and other tools.
The user interface has a significant role in the web development as it is focused totally
on maximising the user experience. The introduction of various web technologies has
made the role of UI developer more demanding and challenging.

2.2 Common Problems in UI Development

Content Creation

The main problem seen in UI development is the creation of contents. The content in
the UI refers to the visual components, design, or patterns which can be seen at the
very beginning of the application. Because of the variable choices of the users, it is
hard to make common UI content that would be accepted and liked by every user.

User Input Handling

A normal UI allows users to interact with certain sets of fields where users can play
with interactive data. Few years ago, it was not so difficult to manipulate the data with a
simple call back, but these days due to the introduction of business logic the user input
handling stands as a typical problem in user interface design.

Dialogue Control

Dialogue control creates system-user interaction structures which are followed by series of complex steps. Incoming and outgoing of the data happens when the user’s
data are processed into the business logic of the application. The user’s data passed
into the UI interacts with the objects of the business logic layers, which create an issue
in UI development.

3 (40)

Merging UI with Business Logic

The development tools designed these days force the UI to be coupled with the business logic. Fast data manipulation has become a matter of concern to increase user
experience. This process of coupling the data into the UI is always a focus in UI development.

2.3 Latest Trends in developing the web application UI
The last few decades can be taken as decade with tremendous change in the web development technologies. With the raise of the SPA frameworks and libraries, singlepage web applications development has overtaken multiple page web applications.
This outlines that traditional UI design and development have literally been ended. Similarly, the use of chat bolt for conversational Web applications, minimalist design for
layouts, use of lesser photos for authenticity and use of gif animations in the layouts
are the basics trends in the user interface design since last few years. Besides, raise of
JavaScript (basically the introduction of Angular 2 and more exploration of React), Data
visualization, and the IoT (Internet of Things) on the web are other major key trends. [1]

2.4

Front-end web technologies

In modern web engineering, there are two typical layers present in the web software
architecture, namely, the presentation layer which is known as front-end and the data
access layer popularly known as back-end. The front-end part involves in every single
thing concerned with the user or the clients in a web application. This includes all the
things associated with the user interfaces. The front-end of web development is basically managed with the use of standard technologies such as HTML, CSS and JavaScript.

HTML is one of the giant tools and considered as the backbone of the web technologies that work as an interpreter of normal plain text, images, and other audio, visual
components into the web browsers. HTML documents are arranged and written with
combinations of different tags in the form of different Angular brackets. The fifth major
version of HTML was introduced in 2013 as HTML5 and this brought a revolutionary
change to web development. HTML provides the fundamental base for all technologies.

4 (40)

Similarly, CSS is another major web technology which is responsible for styling a
HTML document. All the visual effects, layout, colours, fonts etc. are handed by CSS.
Among all front-end the technologies, CSS has a primary role in user interface design.
HTML and CSS are validated with W3C a standardised Markup validator service.
Moreover, HTML and CSS are standing as the core technologies required for modern
web development. Figure 1 illustrates the spectrum of technologies in front-end web
development.

Figure 1 Front-end Spectrum. [2]

Likewise, another multipurpose and arguably the most important web technology for
fully functional and dynamic web development is JavaScript. JavaScript is a high-level,
integrated programming language which is standardised with the ECMAScript language specification. JavaScript is often treated as a functional programming language
that floats in the entire modern browser. It has brought a revolution to World Wide Web
because of its compatibility and adaptability in different layers of the web. With the introduction of different open-source libraries and frameworks in the last few decade,
JavaScript has changed the way how developers are involved in building the web software. However, JavaScript is moving and evolving so fast that the developers have to

5 (40)

learn new changes in the libraries and frameworks. This has resulted as a daunting
task for every developer to decide which frameworks or libraries to follow and move
forward.

3

Research Benchmark

Every new technology offers certain labels for a particular set of users, doing something, in certain conditions. There are a huge number of tools offered by the frameworks and libraries to design the user interface component. The difficulty in choosing
the right toolkit will always be at the peak when a new technology arrives to the market.
This is always a hard task for the novice developers to make the right choice in order to
get rid of development complexity.

While addressing the web frameworks and libraries in user interface development,
there is always a need for a mandatory research guide for a specific topic. But, there is
always a long inventory of features marketed instead. It is very hard to include huge
options available to roll into very few benchmarks. However, this study is bounded with
certain sets of limitations for user interface components between different technologies.

Application Architecture

Developing a UI application is a very complex task when it is associated with manipulating, processing and rendering large business data. Developers might get lost anytime into the visual components of the applications containing a large number of user
interfaces associated with the business logic. The manipulation of large business data
brings chaos to the code organization in the development process. The basic requirement for good code organization focuses on reusable, clear and maintainable codes.

The design of a good user interface application starts with good application architecture. User interface application designs are always associated with specific sets of design problems and patterns. When talking about client-side web development, there are
different architectural patterns offered for a good user interface. Design patterns like
MVC (Model-View-Controller), MVVM (Model-View-View-Model), and MVP (ModelView-presenter) provides good supporting architecture for modern web UI development.

6 (40)

A very important aspect to note about the UI architecture tool is that it changes very
fast. The technologies that are on hype today will no longer be in exist a year after. So,
whatever the chaos the new technology brings, it will always be a good idea to initiate
work with good application architecture.

Features

A new technology comes with a wide range of features to make the UI more dynamic
and versatile. Basically, in web engineering, the technologies offer features such as
browser and device compatibility, speed and performance, productivity and testing of
the applications. These features offered by the technologies bound the UI development
process into certain limits to make the UI more interactive and user friendly.

Data Integrity

Data integrity in user interface relates to the equitable separation of works in the development process. This will fortify adequate control over how research works can be carried out within the limitations life cycle. Also, this will finally result in the stability, validation and accuracy of the development and its result.

Usability Trap

When it comes to the analysis of user interface and its development platforms, there
are various measures that need to be fortified. The measures of time estimation to
complete a certain level of task, time required for debugging and error handling. are
bounded with certain usability protocols. Similarly, the standard evaluation techniques
such as heuristic evaluation, first-click testing and system usability scaling provide a
good track for the research and development of the user interface.

Flexibility

The flexibility in the UI tools can be taken when the tools or the development platforms
allow an excessive change in design which later can be evaluated by users. A certain
development platform does not allow the applications to run in run time. Some are not
compatible with the browsers, some need to compile before running, some takes an

7 (40)

excessive time to fix the bugs. This incompatibility of the development platforms consumes more time and reduces efficiency.

Development Viscosity

While developing a UI, the tools used in the development process should always decrease development viscosity. In order to increase user experience, the functioning of
the tools needs to be faster and efficient.

4

JavaScript UI Frameworks and Libraries

JavaScript frameworks are the application framework designed and written in core JavaScript to provide a generic functionality to a whole new application so that the codes
and functionalities of the software can be reused. JavaScript UI frameworks provide
support features to different libraries, tools and API. When working in advanced projects, JavaScript frameworks help in architecting codes that make them more readable
and secure.

Many frameworks have been introduced over the years. Ember.js, Backbone.js, AngularJs, Angular 2 are the notable names that stand as primary JavaScript frameworks.
These frameworks are created with different specifications but they all have common
goals to ease the development process.

There are huge advantages of using the JavaScript frameworks for modern client-side
web development. A few advantages have been listed below:


Since, frameworks are the future of web development, use of frameworks in a
application reduces time and cost that leads to the supply of quality products to
clients.



The frameworks provide perfect code architecture that helps to make the codes
used in the application more understandable and readable.



Codes written by using frameworks can be reusable i.e. same codes can be reused the application time and again. This helps in the development of complex
application faster.

8 (40)



The frameworks helps to reduce the gap between client-side and server-side
web development by making a good link, perfect validation support and communication with servers.



The features used such as two-way data binding, controllers, components and
modules provide superior management support in client side web development.

Similarly, with the demands of JavaScript, there has been dynamic development of
JavaScript libraries by the big enterprises such as Microsoft, Yahoo, and Facebook.
JavaScript libraries are the piles of pre-written codes in JavaScript which aims to make
web-centric application development easier. The main reason behind the development
of JavaScript libraries is to render the huge data into the UI component of the web.
React, JQuery, vue.js are the notable names of JavaScript libraries.

The JavaScript libraries are small in comparison to the frameworks. Regardless of being small, JavaScript Libraries provides same and even more powerful features than
the frameworks. A few advantages of using JavaScript libraries over JavaScript frameworks have been listed below:


JavaScript libraries can be deployed into any of the advanced JavaScript
frameworks such as AngularJs, Angular 2 and Backbone.js that follows the
MVC design pattern. JavaScript libraries provide the V i.e. View, in MVC design pattern.



AJAX support is the most fundamental thing for a smooth user interface and
JavaScript libraries fit into this.



JavaScript libraries have great open-source communities that are constantly
updating the changes.



Comparing with the libraries of other functional programming languages, JavaScript libraries are huge and can handle a huge amount of data the UI components.



JavaScript libraries are simple and easy to learn for the novice developers.



None of the JavaScript frameworks provides the same level of performance as
JavaScript Libraries.

9 (40)

Both the frameworks and libraries of JavaScript provide a wide range of features for the
design of a robust user interface. However, it has been really been a difficult task to
select the right technology. A recent trend shows that Angular 2 and React are the
most favoured frameworks and libraries for web UI development. [5.] The use of both of
these technologies adds superior performance, code clarity and code reusable features
in the application.

This thesis incorporates a study and implementation of features of React and the recent version of AngularJs: Angular 2. Angular 2 was introduced in the year 2016 with
the initial release of the beta version and many developers actually migrated from its
previous version AngularJs. Even though React being was at its best in 2016, developers migrated from React to Angular 2.

4.1

Web Statistics and Survey

Angular and React are the frameworks and libraries from Google and Facebook respectively, but the by-products of both of these technologies are the result of opensource communities. The beauty of open-source communities is that it provides every
developer with a chance to contribute and engage in any open-source project. Opensource communities of Angular and React are very large and there are huge piles of
contributions from the developers in online communities like Github, Stackoverflow.
Github repositories of Angular and React show the popularity of these two technologies
over the year. Head-to-head comparison between Angular and React is shown below:

Table 1 Head-to-head comparison between Angular and React [3]
Angular 2

React

Version

2.0

15.3.2

Stable Release Year

2015

2016

Authored by

Google

Facebook

Focused language

Typescript

JSX

Github Star

21.9k

62.4k

410

956

Github contributions
st

Note: Above data is abstracted as of 21 March, 2017.

Table 1 shows that React has more popularity and has strong open-source communities over Angular as of 21st March 2017. However, the stable release of Angular 2 was

10 (40)

later than that of React. Angular 2 has not been embraced heavily because it has introduced the whole new style of development which is not compatible with the previous
versions. Developers have to learn the Angular 2 syntax and everything from scratch
and this might be decisive after some time. But, looking at the data from table 1, Angular 2 will not meet the same level as that of React within the same duration of time.

Similarly, the Stackoverflow survey of 2017 which was resulted from the 64,000 developers shows that React is the most popular than any other web technology. Angular
made the sixth position in the list.

Figure 2

Most loved technologies of 2017 in web development [5]

Figure 2 shows that React is standing in the first position in the survey results of the
most loved web technologies in 2017 with 66.9% out of 64,000 developers while Angular stands with 51.7% out of total. [5]

Similarly, a survey was carried out among the members of the front-end developer
group in LinkedIn. Out of the total members from the group, 39 responded to the survey and the following results were found:

11 (40)

Figure 3 The Survey Results from Discussion Group.

Figure 3 suggests that, out of a total of 39 respondents, 48.7% of the developers prefer
to work with the React while the respondents for its counterpart Angular 2 are 33.3%.
The reason behind the majority of the respondents preferring React is because of its
JavaScript centric features. React allows the developer to write everything in one file
and there is no need for separate HTML, CSS and JavaScript. React combines HTML
and JavaScript into the brand new features called JSX.

Many developers and companies have adopted these two technologies. The choice of
the developer and companies differs by their experience and the backend technologies
they follow. The user interface of popular web applications like Netflix, Imgur, Airbnb,
Yahoo Mail etc. are written and maintained in React. [6.] Similarly, the page plugins
and single page applications like YouTube player, Instagram filters, and YouTube
trends are written in Angular 2. [7]

After comprehensive research between Angular 2 and React, it seems that both are
trying to maintain their supremacy in the world of front-end web development. Being a
fresh technology, Angular 2 is on an expanded hype at the moment. React has managed to stand as a leader starting from its release and it seems that React will be the
developers choice for so many years to come from now. However, if communities between AngularJs and Angular 2 repositioned; then they will stand as a superior technology for a long period of time regardless of whatever technologies they face on their
way.

12 (40)

4.2

Angular 2

AngularJs has become a fundamental framework of choice for every front-end developer for few years from 2009. The concept of AngularJs was introduced in 2009 by
Misko Hevery and Adam Abrons but now it is officially been maintained by the giant
enterprise Google. The initial version of AngularJs version 1.0 was released in the year
2012. As of August 2015, AngularJs released its newest version 1.4.4 and this is still
considered as the current stable version. [8, 6-11]. The name Angular is introduced
from the concept of the HTML tags i.e. HTML tags are Angular and Angular naming
came up from the Angular brackets of HTML. [9.]. AngularJs was developed to overcome the vulnerability and issues in a web application such as bug fixing, high quality
user interface and security.

After research for approximately two years, the same team from AngularJs released
the final version of Angular 2 in late 2016. Angular 2 is focused on providing the best
server-side rendering functionalities for perfect user interface. Angular 2 is basically
known as the names, Angular or Angular 2. There are many issues overcome by Angular 2 over AngularJs. A few of them are highlighted below:


Angular 2 provides much better performance over AngularJs. Angular 2 applications put low pressure on the virtual machines because of less memory usage. Superior template reusing functionalities, cache viewing features are
among the notable things in Angular 2 that provide better performance.



Angular 2 has advanced and powerful templating features. The development
environment and IDES are modern in Angular 2 and are better than the
runtime of AngularJs. This helps the template writers to find out the errors fast
and can save time in the template writing process.



Angular 2 is more concerned for the future works in comparison with AngularJs, since web technologies are more dedicated on live data capturing with
the web works such as web crawling. Angular 2 is focused to fulfil the needs
for smooth operation of server side rendering to the user interface.

13 (40)


Angular 2 has feature support for web platform mobile applications. The native mobile UI framework of the Angular 2 helps to make the fully functional
native mobile UI in iOS and android platforms. [10.].

4.2.1

Typescript on Angular 2

Typescript is an open-source programming language developed by Microsoft. It is
scripting language written in core JavaScript. It is much similar to modern object oriented programming languages such as C#, C++ or Java. Typescript is used to develop the
web based JavaScript application on client side or server side.

Although Angular 2 applications can be made with ES5, Es6 and dart, Typescript provides a wide range of features in creating a large Angular 2 application. The main reason behind using Typescript on Angular 2 applications is that it provides great tooling
features. Navigating, code refactoring, auto completing, static typing and wealthy syntax generator are among the notable features of Typescript in developing Angular 2
applications. Figure 4 illustrates the relationship between Typescript with the ES5, ES6
and ES7.

Figure 4 Relationship of Typescript with ES5, ES6, and ES7 [11.].

Starting an Angular 2 project basically starts with the installation of Typescript into a
terminal. The Node Package Manager (npm) manages all the Typescript packages in
the Angular 2 application. The latest stable version of Typescript in Angular 2 application can be installed with the following command:

14 (40)
$npm install - g typescript

And, in order to verify the latest version, it can be verified with the command:
$tsc - -version

To start a Typescript program, a project folder should be created and project folders
needs to have the files with the files extension .ts and the files with .ts will then be
compiled with the file .js file in order to give the programme output.

Considering the research objective, beginning in section 3.2.2, the application architecture of the Angular 2 component required for Angular UI application has been outlined.

4.2.2

Directives and components

Basically, there are three types of directive in Angular 2: attributes, structural and component directives. Component directives handle the templating part to create the user
interface, while structural directives change the document object models layout by adding and detaching the DOM object. Similarly, attributes play a role in changing the visual appearances of components and elements.

An example of a code attribute and its application into the Angular 2 directive is shown
below:
<p myHighlight>Highlight me!</p>
Listing 1 Angular 2 code attribute

Here, myHighlight attribute is applied in the directive code shown below:
import { Directive, ElementRef, Input } from '@angular/core';
@Directive({ selector: '[myHighlight]' })
export class HighlightDirective {
constructor(el: ElementRef) {
el.nativeElement.style.backgroundColor = 'yellow';
}}

15 (40)

Listing 2 Angular 2 Directive application

The example directives shown in listings 1-2 is supplemented with the import statement
which emphasises the Angular 2 core library that has three specific symbols: directive,
ElementRef (feature that permits the security attack in DOM object) and Input. The
directive provides functionalities to the @Directive decorator. Similarly, ElementRef
acts as a constructor for code access in DOM, and input is responsible for data binding. [13]

A component plays a fundamental role in building the Angular 2 user interface because
Angular 2 applications are made with the trees of the Angular 2 components. Angular 2
components are basically known as the subset of Angular 2 directives. In order to process the Angular 2 components and make them usable in the runtime environment,
Angular 2 component decorator should be used to mark the classes as Angular 2 components.
@Component({selector: 'greet', template: 'Hello {{name}}!'})
class Greet {
name: string = 'World';
}

Listing 3 Component in Angular 2

An example of component with a class called Greet is shown in listing 3 to outline the
Angular 2 component. [12.].

4.2.3

Modules

A route module in Angular 2 is a class that describes how different parts of the application are managed simultaneously in Angular 2. Every Angular 2 application needs to be
equipped with at least one Angular 2 module that is called the route module. Naming of
the Angular 2 route module can be anything but official Angular 2 documentation has
suggested the name “AppModule”. Basically, route modules are used to create a simple application but many applications use the feature modules. Every Angular 2 module, whether it is route or feature, is a class with a decorator called @NgModule.

16 (40)
import { NgModule }

from '@angular/core';

import { BrowserModule } from '@angular/platform-browser';
import { AppComponent }

from './app.component';

@NgModule({
imports:

[ BrowserModule ],

declarations: [ AppComponent ],
bootstrap:

[ AppComponent ]
})

export class AppModule { }

Listing 4 Angular 2 route module

Above code in listing 4 outlines the root module with its properties. Imports, providers,
declarations, exports and bootstrap are the important properties of the root module.
[13.].

4.2.4

Services

A service in an Angular 2 application is also a class that does not have anything do
with itself but an Angular 2 component takes several things from services. Services in
Angular 2 are injected with dependency injection which refers to the features such logging, data integration, app configuration etc. Listing 2 illustrates the example code for
Angular 2 services.
export class Logger {
log(msg: any)

{ console.log(msg); }

error(msg: any) { console.error(msg); }
warn(msg: any)

{ console.warn(msg); }
}

Listing 5 Login services to the web browser in Angular 2

17 (40)

4.2.5

Templates and forms

Angular 2 templates are much similar to the HTML documents but they actually a form
of HTML that guides Angular 2 while rendering the component to its UI component.
Angular 2 templates uses all the HTML-based syntaxes and elements such as <h1>
<p> <li> etc., but if offers some unique features such as interpolation and expression.

Similarly, Angular 2 forms are the integral part of the user interface for well-integrated,
functional and convincing data entry user experience. Angular 2 forms are written in
Angular 2 directives based upon the Angular 2 template syntax. A web application
without any form is doomed because it plays a vital role to increase user experience. In
Angular 2, forms are created with the component and template. Angular 2 models are
used for the form for data interactivity and to support two-way data binding. Forms thus
created will then be visually designed with CSS and lastly the information will be
shared across the HTML element. [13.]

4.2.6

Dependency Injection

Dependency in simple terms is actually a services and dependency injection which is a
formal way of providing a service to the Angular 2 component in order to create a new
instance of class. A dependency injection is winded up with Angular 2 and they are
used widely.

Figure 5 Components in Dependency Injection [13]

Figure 5 illustrates the dependency Injection components in Angular 2. A dependency
injection in Angular 2 basically contains three particular things: an injector, provider and
dependency.

18 (40)


An injector: Injector exposes the APIs in order to create dependency instances.



A provider: Provider takes help from the injector to create dependency instances.



4.2.7

A dependency: An object is created with the dependencies. [13]

Data Binding and Meta Data

Data binding is the process of synchronization of data between different components.
In Angular 2 application, data binding makes the coordination between the component
and the templates. Angular 2 applications use two-way data binding which updates the
data in the view and controller of the application simultaneously.

Advantages of the data binding in an Angular 2 application are highlighted below:


Data binding has made the user inputs fast. Earlier, user’s responses were
pushed into HTML and such methods of push-pull are unvaried and errorvulnerable.



Data binding provides the efficiency in an Angular 2

application for user input

as it works as a communicating bridge between templates and components.
[12.]

However, two-way data binding techniques fire some vulnerability in web applications.


The change in the value in the data binding changes the event.



When some directives are used for more than once, there is the chance of
break in the applied data binding.

Similarly, another most important fundamental architectural tool used in the Angular 2
application is meta-data. Meta-data is responsible for the processing class into Angular 2 applications. A class will remain a class in Angular 2 application and it never behaves as component. Meta-data is needed to process the class into components in
Angular 2 application.

Advantages of using Meta data in Angular 2 application is highlighted below:

19 (40)


Meta-data provides the clear dependency injection style in Angular 2 application



Make-data makes developers to think the applications as a form of component
tree and Angular 2 style.



Meta data in Angular 2 is future-oriented as it seems to be focused on upgrading of frameworks. [15.]

Likewise, Angular 2 Meta-data also offers few disadvantages:


The manual linking of the components can lead the users deprived of getting
out-most of the user experience.

4.3

React

The narrative of React was given by Facebook in the year 2013. Then it was opensourced and the final release was made in 2015. React focuses on making the most
interactive user Interfaces in comparison to its compatriots AngularJs, Angular 2 and
ember. The biggest changes brought by React over other existing frameworks and libraries are the use of the virtual DOM. Literally, React is not just considered a normal
front end library, but it has become a paradigm in the world of front-end web development.

React is unlikely similar to the large frameworks like AngularJs and Angular 2. It is
based upon the philosophy of UNIX, i.e. combining the simple things to get the best out
of it. React allows developers to write the declarative JavaScript components which are
far more superior to the traditional way winding up the HTML code templates into JavaScript.

Basically, MVC design patterns are considered the most underlying design pattern for
user interface design in front-end web development. MVC patterns contain three components: the model, view and controller. The majority of the front end framework focuses on these three parts. However, React only focuses on the DOM because it is the
sematic representation of the View. Literally, React provides the view part “V” in the
MVC design pattern.

20 (40)

Moreover, React is absolutely a different concept in web application development. React has taken a unique approach in solving the problems faced by large-scale user
interfaces. This is in fact created to solve the large-scale user interface problems of
Facebook and Instagram. Along with solving the problems in user interface, React
came with the idea of making the development process easier for developers with varied skill levels. [16, 1-2].

Advantages of using React are highlighted below:


Parsing HTML into JavaScript is so main-stream, while React is JavaScript centric i.e. it allows the developer to write JavaScript codes to generate HTML. This
feature is so unique and liked by majority of the web developers. Since, JavaScript technologies are running all over the web applications from front end to
backend. So, adjusting with the React will be a good idea.



Since React applications are made with the arrangement of the components.
React application can roll up the style, view and state in one component which
is obviously better than the rolling up with components and directives.



Bugs fixing in React is very fast in comparison to the large frameworks line Angular 2.



Although it take a bit more time to develop the React application but later it will
save a lot more time when it comes to maintenance.



React is developed with the philosophy; learn once, write anywhere. React
doesn’t care about the technology stacks. React components can be rendered
using node.js into the server. Also, it allows the developer to add new features
in it without the use of any pre-existing codes. [17.].

From section 4.3.1, the features of React will be discussed:

4.3.1

JSX

JSX is an HTML-like syntax extension features introduced by React. JSX is used in the
React to describe the UI component of the application. JSX might look something similar to the mark-up language like HTML or XML but it is fully JavaScript centric and fully
functional features used to create React application. However, it is not mandatory to
use JXS in any React application but the application equipped with JSX provides high
level of performance, fast error handling and easy deployment.

21 (40)

JXS contains exactly the similar elements like HTML, such as <h1>, <p>, <li> etc.
but these elements need to be nested within one <div> element in JXS which later
need to be wrapped into a component. Literally, all the JXS elements need to ne included inside the React component followed by rendering in document Object Model or
exporting it into another component. [17]
4.3.2

React Components, Props and State

React components are the building block in React application development especially
when talking about updating the user interface. In general, React component is considered similar to the JavaScript functions. React permits to create the components with a
method called React.createClass ().
“Props” are the communication channel features used in React component. It acts as a
bridge between the parent and child components.
import React from 'react';
class MyApp extends React.Component {
constructor(props) {
super(props);
this.state = {
head: "this is the header",
"data": "this takes data from state"
}
}
render() {
return (
<div>
<h1>{this.state.head}</h1>
<h2>{this.state.data}</h2>
</div>
);
}
}
export default MyApp;

22 (40)

Listing 6 Representation of components, state and props in React
Similarly, the “State” is known as the heart of the React component. The “State” is the
only feature in React component that makes the component more interactive and dynamic. The “State” allows the component to return the same output for the given input.
[17].

4.3.3

Virtual DOM

DOM manipulation in the contemporary and dynamic web is considered a primer feature. However, it is very slow in comparison with other JavaScript operations. The reason behind the slowness of the DOM manipulation is because of its regular updates
made by the modern JavaScript frameworks. JavaScript frameworks are supposed to
update only particular object in DOM but things are not happening in that way. A
framework actually rebuilds and then updating the entire object in DOM even if the updates is needed for only particular object. This way of updating from JavaScript frameworks are lowering down the performance of every web applications. Considering this
particular problem in the DOM manipulation; React introduced the concept of Virtual
DOM.

Virtual DOM is completely based on the DOM object and considered as the light weight
copy of DOM. DOM objects are responsible to display the data into the user interface
component of the application but virtual DOM Object has nothing to do with the User
Interface but it offers special features of changing and updating the objects in the back
of the UI.

23 (40)

Figure 6 Virtual DOM workflow visual representations [18]

When rendering a JSX element, every virtual DOM gets updated. This does not sounds
interesting but when it comes to the efficiency and performance, virtual DOM is very
powerful than the normal DOM.

4.3.4

Templates and Forms

React offers a simple functioning template that does not require a runtime environment.
Syntaxes in React are simple like HTML, which are well supported by all browsers and
IDEs. When inspecting the codes in a browser, the inspection in HTML and the coding
does not look much different because of the declarative coding. The templates made
with React are supportive in all the platforms such as Typescript, ES6, and CommonsJs.

React templates work differently when comparing with the Angular 2 templates. First,
template containing the *.rt file needs to be compiled into the JavaScript file. The file
thus compiled returns a function and later gives a Virtual DOM based upon the original
DOM and user components.

Similarly, React works as a remarkable user interface library because it focuses on the
view component of the application which is a user interface component. A view gets
updated quickly when there is a change in the state. This phenomenon of updating the
view in React makes it a good choice to overcome the form validation error since it

24 (40)

easily displays the errors in the form. However, it is hard to say that forms made in React are fully secured. An additional security measure needs to be applied to the form
because a hacker can easily bypass the React codes by simply allowing the common
variables right into the server. [19.].

4.3.5

Flux Architecture

Flux is an architecture used in the react application. It is not similar to the regular libraries or framework but it provides a well round of features to the unidirectional data flow
in a React application. Moreover, Facebook has assisted a library called dispatcher for
the Flux architecture. Prototypical Flux architecture holds the dispatcher library in order
to ease the event stare by setting up the event system along with the help of Node ’Js
eventEmmitter module.

Basically, Flux architecture is made up of four different individual components: Actions,
Dispatcher, Store, and Component (Views).

Figure 7 Data flow is Flux Architecture [20]

Figure 7 illustrates the data flow in between the individual components of the Flux architecture. The action in Flux is considered as a helper for the Dispatcher as it helps to
pass data into the Dispatcher easily. Likewise, Dispatcher receives the actions and

25 (40)

later it forwards to the call-back function. The data thus forwarded will then be stored in
a container for the application “Logic” and “State”. Finally, the Data State from the
“Store” will then passed it to the UI component through the React “Props” method.

The data flow in the Flux architecture is unidirectional and considered central to the
pattern. The three different components, State, Dispatcher and Views, are unconditional with well-defined Output/ Input. However, Action component in Flux are considered
an object with new data and distinguishing property type.

The structure developed in the Flux architecture gives a clear idea about its purpose for
a specific flow of data in the application. This gives a sense that it is based upon the
reactive functional programming. In reactive functional programming, data flows only in
one direction i.e. application state is only perpetuated in the store. [20]

4.3.6

Data binding in React

Reacts offers a unidirectional data binding but it also supports the bidirectional data
flow by the help of some external plugins. The unidirectional data flow provides the
ground for the transmission of data from parents to child. The “Props” properties in React are responsible to carry the data from parents to child. The change in “Props”
changes a React component which leads to the change in Component tree and its
properties.

5

Angular 2 User Interface

A prototype user interface was designed in the Angular 2 in order to research the functionalities provided by the Angular 2 framework. The application thus developed was
applied in React, to compare the similar features and product output between these
two technologies.

Project Idea
The idea of the design was taken from the vacancies section of “Tuubi” an online portal
of Helsinki Metropolia University of Applied Sciences. It has been found that there are
specific portals available for libraries, IT services and help desk, thesis registration,

26 (40)

courses enrolment etc. However, the Vacancies available for the students are not specifically arranged into a different portal.
As the new system OMA has been introduced and applied recently to replace the “Tuubi” portal. It has become a necessity to separate the Vacancies section into a new
portal. However, it seems reasonable to implement the Vacancies section in OMA services portal but making it more specific will make the students easily to get linked with
the Jobs available.

Figure 8 Vacancies Section in Tuubi [21].
Figure 8 shows the vacancies section in the “Tuubi” portal. The section does not seem
to be user-friendly because everything is included in a small section with very few details available.
A list of the problems found in the Vacancies section in “Tuubi” portal is highlighted
below:


Since “Tuubi” is a very diverse portal for students, teachers and administrators,
it includes all necessary details needed by teachers and students. However, including everything into a single portal has made it look messy. Important sections such as, workspaces, vacancies, an announcement needs to be separated and introduced into a new portal. The space provided for the vacancies section is very small and sometimes this section does not even get noticed.

27 (40)



Vacancies posted into this section are compact and small in letter size. Only the
heading can be shown into this allocated space. The vacancies could have
been provided with much more details.



A better environment could have been developed to make the interactivity between the students and the jobs poster/recruiter.



Every time the jobs post needs to be made by the Tuubi” administrator, or study
coordinator or placement coordinator. It would have been much wiser to make a
portal that can combine the UI with business logic. This would help the students
to find jobs instantly.

5.1

Specifications

The UI Portal developed during the final year project was made considering three use
cases. Figure 9 illustrates the use case diagram for the Job Portal which shows that the
Job Portal has three primary Actors: An actor of Student, An actor of Recruiter and An
actor of Teacher/ Administrator.

Figure 9 Use case Diagram for Job Portal

28 (40)


An actor of Student: Students can login to the system, upload the resume to the
system, and can view the Jobs in the system.



An actor of Teachers/Administrators: Teachers and administrators can login to
the system, view the jobs and resume availability in the system and can post
jobs into the system.



An actor of Recruiter: Recruiters can view the resumes and post the jobs into
the system.

5.2

Environment Set-up

The biggest turnoff in the Angular 2 application development is the environment set up.
This is the most essential thing to do while starting the Angular 2 project. The environment set up was done to leverage the ES6 (European Computer Manufacturers Association Script version 6) in browser support. This has to be done because all browsers
do not support the ES6 script.

There were two alternatives available for the Angular 2 environment set-up; one is by
directly installing the Angular –cli and another is manually setting up the environment
with the installation of npm, grunt etc. For this project, the later method of environment
setup was done. The project was setup by using the external terminal called Gitbash in
Windows Operating System. Likewise, notepad++ text editor was used to write the
script. The project was set up into three steps:

The first step was loading up an index.html file which was followed by npm installation
of the package.json file. And in order to run the application, lite-server was installed.
Two files are created in this step:
|-index.html
|-package.json

Lite server installation was done to run the application in a browser.

The second step was involved in installing the Typescript; and it was installed along
with the package called “typings”, which is a package that the Typescript used to understand how external libraries are used in the application.

29 (40)
|-tsconfig.json
|-typings.json
The third step was involved was for the dependencies instellation, which is followed by
importing the core packages. The necessary packages installed into the application
are:


@angular/core



@angular/common



@angular/compiler



@angular/platform-browser



@angular/platform-browser-dynamic

Similarly, three additional packages were installed to support the application:


@angular/router



@angular/http



@angular/forms

The above steps outline the development environment setup that was applied to the
metropoliaJobs UI development in Angular 2. After the necessary steps applied, the
final look of the entire package.json file is shown in listing 7. Package.json file contains
all the listing of Packages, Task-runners, Scripts and Dependencies with their respective versions.
{
"name":"metropoliaJobs",
"version":"1.0.0",
"description":"MetropoliaJobsPortal",
"main":"index.js",
"scripts":
"start":

{
"tsc

&&

concurrently

\"npmrunlite\"",
"lite":"lite-server",
"tsc":"tsc",
"tsc:w":"tsc-w",
"typings":"typings",
"postinstall":"typingsinstall"},

\"npm

run

tsc:w\"

30 (40)
"keywords":[],
"author":"",
"license":"ISC",
"devDependencies":{
"concurrently":"^3.4.0",
"lite-server":"^2.3.0",
"typescript":"^2.2.2",
"typings":"^2.1.0"
},
"dependencies":{
"@angular/common":"^2.0.0-rc.5",
"@angular/compiler":"^2.0.0-rc.5",
"@angular/core":"^2.0.0-rc.5",
"@angular/forms":"^0.3.0",
"@angular/http":"^2.0.0-rc.5",
"@angular/platform-browser":"^2.0.0-rc.5",
"@angular/platform-browser-dynamic":"^2.0.0-rc.5",
"@angular/router":"^3.0.0-rc.1",
"@angular/upgrade":"^2.0.0-rc.5",
"core-js":"^2.4.1",
"reflect-metadata":"^0.1.10",
"rxjs":"^5.0.0-beta.6",
"systemjs":"^0.20.11",
"zone.js":"^0.8.5"
}
}
Listing 7 package.json file for the metropoliaJobs

The architecture overview of the application in Angular 2 developed with Typescript is
shown in the listing 8.
|-metropoliaJobs/
|-----app.components.ts
|-----app.module.ts
|-----app.main.ts

31 (40)
|-index.html
|-package.json
|-tsconfig.json
|-typings.json
|-systemjs.json

Listing 8 Application Architecture for initial environment setup.

5.3

Implementation

The project was bound with the development of some set of “Forms” in Angular 2, a
“Form” component was created with the importing from the Angular 2 core package
and its component was stylised with the component animation features available in
Angular 2.

Finally, after the configuration and installation of the necessary tools for the development environment setup, the UI was developed using a certain set of additional UI
technologies. HTML, SAAS, Angular 2, Typescript, Twitter Bootstrap 4 powered by
Angular 2, jasmine and karma are the technologies used to design the prototype application in Angular 2. The Lite-server was used to serve the application into the web
browsers. The application was tested in the server: http://localhost:3000/.The screen
shots of the prototype UI developed in Angular 2 are listed in Appendix 2.

6

UI Transition in React

This thesis is focused on to make an analysis of UI designed in two different platforms.
The prototype UI application was deployed completely to see how it is implemented
into React.

6.1

Development Environment Set-up

The basic development environment set up for the React UI development was done by
initiating the npm and the dependencies for the application in a package.json file. The
production dependencies; React, React-DOM, Redux, Redux-react, Redux-thunk and
babel were installed at the beginning. After that; babel, babel-core, babel-presetes2017,

babel-preset-react,

Webpack@2.1.0-beta.27,

file-loader,

babel-loader,

32 (40)

Webpack-dev-server@2.1.0-beta.11 and react-hot-loader@3.0.0-beta-6 were installed
as dev dependencies. Similarly, one entrance of JavaScript file was created for the
initial testing of the application. After the import of a few mandatory packages from React library, the application dependencies were ready for deployment.

Application structure:
|-metropoliaJobs
|--src
|---components
|----App.js
|--app.js
|--index.html
|--babelrc
|--package.json
|--webpack.config.js

Listing 9 Application Structure in React

Listing 9 illustrates the application structure in React. The application architecture folder structure contains the necessary files for the development of React UI. All the files
have been included into the parent directory called metropoliaJobs.
{
"name": "metropoliaJobs
"version": "1.0.0",
"description": "MetrpoliaJobsPortal",
"main": "index.js",
"scripts": {
"build": "webpack",
"serve": "webpack-dev-server --hot -inline --content-base ./src --open"
},
"keywords": [],
"author": "",
"license": "ISC",
"dependencies": {
"react": "^15.4.0",
"react-dom": "^15.4.0",
"react-redux": "^4.4.5",
"redux": "^3.6.0",
"redux-thunk": "^2.1.0"
},
"devDependencies": {
"babel-core": "^6.14.0",

33 (40)
"babel-loader": "^6.2.5",
"babel-preset-es2015": "^6.14.0",
"babel-preset-react": "^6.11.1",
"eslint": "^3.5.0",
"eslint-config-airbnb": "^11.1.0",
"eslint-plugin-import": "^1.16.0",
"eslint-plugin-jsx-a11y": "^2.2.2",
"eslint-plugin-react": "^6.3.0",
"file-loader": "^0.9.0",
"react-hot-loader": "^3.0.0-beta.6",
"webpack": "^2.1.0-beta.27",
"webpack-dev-server": "^2.1.0-beta.11"
}
}
Listing 10 Dependencies Installation for the React project with their respective Versions

Listing 10 Illustrates all the dependencies required for the React UI application. These
dependencies contain all the necessary files, packages, task runners and necessary
plugins required for the React UI. The respective versions of the tools have been outlined into the package.json file.

6.2 Implementation

The goal of this project was to develop exactly the same UI in React which was developed in Angular 2. The UI thus developed was completely the same as that of Angular
2. Like Angular 2, React also followed a certain set of protocols and patterns but the UI
development in React was based upon following React based tools:


React



React-DOM



Redux



Redux-react



Redux-thunk



Webpack- module loader



Webpack-dev server



Babel – to make the application runnable into lower versions of the ES6 browser.

Furthermore, in order to make the React UI more stylised, a recent version of CSS
called PostCss was used. PostCss is the newest version of CSS that transforms CSS

34 (40)

with JavaScript. The main aim of using the PostCss here was to make the UI more
JavaScript centric.

Finally, after successful completion of the configuration and setups, the UI in React
was developed using the React based syntaxes. JSX was used for similar mark-up
functionalities. A huge number of React components were deployed to make the final
output of the React UI. The UI thus developed was exactly the same as that in Angular
2 which was run and tested in the server: http://localhost:8000/ with the Webpack devserver runner. The final version of the transitioned UI can be found in Appendix 2.

7

Discussion

A comprehensive study of two technologies (Angular 2 and React) was carried
throughout the thesis considering different methodologies. Three major steps were
applied to find out the objectives of the study. Firstly, various sets of key data for two
different technologies were collected from different sources. Secondly, the features and
tools required for the transition/migration of UI from Angular 2 into React were analysed. Lastly, the implementation of a user interface was successfully done in two different platforms.

Both platforms offered solid features and outlook to the UI application. However, the
goal of the study was to form a tie breaker through different methodologies. A certain
set of comparable guidelines was introduced and the findings were discussed to make
efficient comparison between the technologies.
Is Angular 2 Comparable to React?

This is an important question that could be asked every time about new UI technologies even if the existing technologies are capable of addressing a solution to the complex problems. When it comes to scaling the two different technologies, there might
come thousands of criteria’s. However, setting up a specific goal can be made to highlight the major key aspects and it can be possible to make the comparison.

35 (40)
Which one offered the better UI: Angular 2 or React?

The answers to the above question is solely analysed by the outcome of this thesis. Six
major fundamental points are taken into comparison between the two technologies.

Performance

React wins in performance in comparison with Angular 2. When updating and synchronising the components in the application, React used the virtual DOM in the application
even when the application architecture was complex and that resulted in the superior
performance, while in Angular 2 UI the regular DOM was involved for the updating all
the DOM objects without updating the necessary one, which resulted the slowness in
the application.

Templating

When comparing the templating between the two technologies, Angular 2 offered superiority because the UI development does not necessarily need the JavaScript centric
templating style. Templating is more concerned with the UI components and even a
simple mark-up will offer simplicity in templating than the complex JSX. Angular 2 uses
the HTML mark-up in a simple way which is far better than writing the tedious JSX
codes. While developing the UI, it was found that the templating style in Angular 2 was
far simpler than that of React.

Learnability

Learnability in React is far more superior to Angular 2. Learning Angular 2 is interesting
at the beginning but the later stage becomes frustrating because of its complex lifecycle. On the other hand, React is unique because of the JavaScript centric feature and
even a novice developer can master it up within a week. The simple ecosystem and
strong lifecycle are the considerable features that make the React preferable for the
learners. Better learning curves mean there will always a better chance of focusing on
the user experience by overcoming the existing problems.

36 (40)

Structuring data model

When it concerns the data modelling comparisons between Angular 2 and React, both
technologies offer equality. The performance of Angular 2 is sensitive when it deals
with “Scopes” and this suggests that using large models will not be permitted. This results in a more testable and simple codes on one hand and on the other hand forces to
break down the normal procedures for rebuilding the back-ups. However, React gives
freedom of choice in structuring the data model without downsizing the performance.
However, it depends completely on the competencies of developers.

Code reshuffling

There is a tie when comparing the code reshuffling between Angular 2 and React.
There are plenty of ready-made libraries available for Angular 2. However, React gives
the flexibility to reshuffle the code in its own way.

Package management

React gives more flexibility in package management than Angular 2. React uses Require.js and Webpack to make better package management. But, Angular 2 does not
allow the codes to run and deploy more flexibly and this results in the poor packaging
of codes.

37 (40)

Other comparable aspects?

The two technologies highlighted in this thesis are further comparable. The common
goals of both technologies are more or less the same. They both have been created to
make the data rendering easy from the server side of the application to the user interface component.

Table 2 Further Comparison between Angular 2 and React.

Angular 2
Browser Support

Performance

React

Firebox(latest),Mozilla(latest), Firebox(latest),Mozilla(latest),
safari(7-10),IE(9-

safari(7-10),IE(9-

11),edge(13-14),

11),edge(13-14),

Comparatively slower than React is faster
React

Architecture

MVC architecture support

V layer in MVC, Flux support
as an external architecture.

Developers

Prefer- Programmers

from

Object JavaScript developers

ences

oriented background

Future versions

Angular 4

React V16.x.x

Rendering

Server side

Server side

Mobile support

Ionic framework

React Native

Templating

Typescript file

JSX file

Code organization

Good code organization

Complex due to Js centric

Data Binding/data flow

Bi-directional (two way)

Unidirectional

38 (40)

8

Conclusion

Considering all the methodologies applied, the study was finally concluded as React
being more preferable technology for the development of a user interface. Nevertheless, Angular 2 might have been in the lead if the study was based upon other criteria
besides the one highlighted in this thesis.

The technologies for the development of user interfaces evolve very rapidly like any
other relatable field in web development. The way technologies are evolving in the front
end frameworks has been changing the logic and methodologies used in the development process. The front-end and user interface were meant for the designers. However, the use of frameworks and libraries in the front end has created dynamism in the
web.

The final recommendation of this study is that it suggests developers to go through a
practical approach to develop an identical user interface application in both technologies. The findings and outcomes described in this thesis are solely based upon my
findings in this study and thus the outcome might differ in regard to the competencies
of developers.

39 (40)

References
1

Usernap. Web design trends [online]
URL: http://usersnap.com/blog/web-design- trends-2017/
Accessed: March 2, 2017

2

Front End Masters. Front-end Spectrum [online]
URL:https://frontendmasters.gitbooks.io/front-end-handbook2017/content/tools.html Accessed: March 6, 2017

3

Github. Facebook/React [online] URL: https://github.com/facebook/react.
Accessed: March 21, 2017

4

Github. Angular/Angular [online] URL: https://github.com/Angular/Angular.
Accessed: March 21, 2017

5

Stackoverflow .Stackoverflow survey [online]
URL:https://stackoverflow.com/insights/survey/2017/?utm_source=soowned&utm_medium=social&utm_campaign=dev-survey2017&utm_content=social-share. Accessed: March 21, 2017

6

Made with React. Apps collection [online] URL: http://madewithreact.com/
Accessed: March 22, 2017

7

Apps made in Angular 2.0. Angular Expo [online] URL: http://angularexpo.com/.
Accessed: March 22, 2017

8

Angular Zone. Angular History [online].
URL:https://Angularzone.wordpress.com/Angularjs-history/
Accessed: March 22, 2017

9

NG-conf. Keynote NG-conf 2014 [online] 2014
URL: https://www.youtube.com/watch?v=r1A1VR0ibIQ.
Accessed: February 28, 2017

10

AngularJs. Angular 1 and Angular 2 integration [online]
URL:http://Angularjs.blogspot.fi/2015/08/Angular-1-and-Angular-2coexistence.html. Accessed: March 22, 2017

11

Typescript for Angular 2 [online].
URL: http://naywinmyint.com/typescript-for-Angular-2-part-1/.
Accessed: March 23, 2017

12

Angular. Component [online]
URL: https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html
Accessed: March 23, 2017

40 (40)

13

Angular. Directives [online].
URL: https://Angular.io/docs/ts/latest/guide/attribute-directives.html
Accessed: March 23, 2017

14

ThoughtTram. Dependency Injection in Angular 2 [online]
URL:https://blog.thoughtram.io/angular/2015/05/18/dependency-injection-inangular-2.html. Accessed: March 22, 2017

15

Github. Ng-MetaData [online] URL: https://github.com/ngParty/ng-metadata
Accessed: March 22, 2017

16

Introduction to React. Gackenheimer Cory. 2015

17

React. Documentation [online]. URL: https://facebook.github.io/react/
Accessed: March 24, 2017

18

Afas.nl. Virtual DOM [online]
URL:https://www.afas.nl/blog/virtual-dom-how-inefficiency-can-lead-to-betterperformance. Accessed: March 26, 2017

19

HTML5 Hive. Form Validation in React. [Online].
URL: https://html5hive.org/reactjs-form-validation-tutorial/.
Accessed: March 28, 2017

20

Flux Documentation. In depth Overview [online]
URL: https://facebook.github.io/flux/docs/in-depth-overview.html#content
Accessed: March 29, 2017

21

Tuubi. Vacancies [online].
URL: https://tuubi.metropolia.fi/portal/group/tuubi/etusivu
Accessed: February 20, 2017.

Appendix 1
1 (1)

Appendix 1

Appendix 1: Survey Questionnaire for Front End technologies
Which web technology do you prefer to use for front end user interface?
__ AngularJs

__ Angular 2.0

__ReactJs

__Other (ember, ionic, jQuery etc.)

Appendix 2
1 (6)

Appendix 2

Appendix 2: Screen Shots of the UIs
Front page /Student Section:

Main cover page

Middle Section

Appendix 2
2 (6)

Lower middle section

Footer section

Appendix 2
3 (6)

Uploading Resume:

Admin Dashboard for Job Posting:

Admin Dashboard

Appendix 2
4 (6)

Mobile Responsive:

Appendix 2
5 (6)

Appendix 2
6 (6)

Thank You
****

Anuj Adhikari

Full Stack JavaScript: Web Application
Development with MEAN

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
July 10, 2016

Abstract

Author(s)
Title

Anuj Adhikari
Full Stack JavaScript: Web Application Development with MEAN

Number of Pages
Date

40 pages
10 July 2016

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor

Peter Hjort, Principal Lecturer

The thesis was carried out as a research project on the topic Full Stack JavaScript. The
main objectives of the thesis were to study the different components of the MEAN stack, the
most popular Full Stack JavaScript framework, and develop a prototype web application
based on it.
A considerable amount of time was invested in examining the different web technologies.
Finally, the study concentrated on the Full Stack JavaScript, and the MEAN stack in particular. All the components of the MEAN stack were studied in great detail. Moreover, the
strengths and weaknesses of all the components were analysed in comparison with other
web stacks, and a prototype web application was developed using the MEAN stack.
As a result, a Single Page Application based on the MVC architecture was developed, and
a REST web service was built to provide data to the application. The application demonstrates the practical implementation of the MEAN stack in a real-life project. The application
development process provides a step by step guide to the installation of all the components
and the related tools. In addition, it suggests the best practices for building a MEAN application.
The thesis concludes that the MEAN stack is one of the best solutions to develop modern
web applications, and can be used in a wide range of web applications. However, the instability and immaturity of the stack make it inappropriate in certain contexts. Therefore, further
studies and implementations can be done to explore the usefulness of the stack in different
contexts.
Keywords

MEAN stack, Node.js, Express, MongoDB, AngularJS, REST
API, SPA, HTTP, MVC

Contents

1

Introduction

1

2

Web Application Development

2

2.1

Front-end and Back-end

2

2.2

RESTful API

4

2.3

Single Page Application

6

3

4

5

Full Stack JavaScript

8

3.1

JavaScript

8

3.2

Rise of Full Stack JavaScript

9

MEAN Stack

11

4.1

Node.js

11

4.2

Express

15

4.3

MongoDB

16

4.4

AngularJS

20

Implementation of MEAN Stack

23

5.1

Project Description

23

5.2

Development Environment Setup

25

5.3

Implementation

27

6

Results and Discussion

34

7

Conclusion

40

References

Abbreviations
AJAX

Asynchronous JavaScript and XML

API

Application Programming Interface

CLI

Command Line Interpreter

CSS

Cascading Style Sheets

DBMS

Database Management System

DOM

Document Object Model

FTP

File Transfer Protocol

GUI

Graphical User Interface

HTML

HyperText Markup Language

HTTP

HyperText Transfer Protocol

IDE

Integrated Development Environment

IP

Internet Protocol

JSON

JavaScript Object Notation

MEAN

MongoDB Express AngularJS Node.js

MVC

Model View Controller

ORM

Object Relational Mapping

REST

Representational State Transfer

SMTP

Simple Mail Transfer Protocol

SOAP

Simple Object Access Protocol

SPA

Single Page Application

SQL

Structured Query Language

TCP

Transmission Control Protocol

URL

Uniform Resource Locator

XML

Extensible Markup Language

1

1

Introduction

With the recent evolution in web technologies, there has never been a more exciting time
for developers and technologists around the globe to build modern web applications.
Web development is not anymore confined in the realm of pure HTML (HyperText
Markup Language), CSS (Cascading Style Sheets), and JavaScript on the front-end, and
PHP/Perl on the back-end. There is a plethora of new languages, web frameworks and
tools to choose for any web application development. Although the rise of web technologies has helped to ease the application development process, it has created confusion
among developers to select a perfect technology stack to start with.
For any web application development, it is important to choose a correct technology
stack which allows rapid prototyping, constant iteration, code reuse, maximum efficiency,
and robustness. It is also important that the technology stack is easy to learn and understand by the developers working on the front-end and the back-end. Thus, the concept
of Full Stack JavaScript was developed. Originally web development was based on the
LAMP (Linux, Apache, MySQL, PHP/Perl) stack and Java (Java EE, Spring), which consists of different programming languages. JavaScript solved this multi-language paradigm by introducing MEAN (MongoDB, Express, AngularJS, Node.js) stack which is
based on a single language ‘JavaScript’. [1.]
This thesis was carried out as a research project on the topic ‘Full Stack JavaScript’. The
main objective of the thesis was to study the different components of the most popular
Full Stack JavaScript framework, MEAN stack, and build a prototype application based
on it. The prototype application was developed only to illustrate the implementation of
the MEAN stack, so the report focuses more on the practical implementation of the
MEAN stack’s components in the application than the application itself. Furthermore, the
report analyses the strengths and weaknesses of the MEAN stack, and suggests the
context where to use it and where to avoid it. The report also suggests the best design
principles and architecture to follow when developing a MEAN stack web application.

2

2
2.1

Web Application Development
Front-end and Back-end

Web application development is the combination of the front-end and the back-end development. Front-end web development, also known as client-side development, involves the practice of creating Graphical User Interface (GUI) for clients (users) so that
the users can interact with the application. It involves the use of primary web technologies and tools such as HTML, CSS, and JavaScript. [2.]
HTML is a mark-up language which provides the structure to a web page. It defines how
a web page would look like so it can be considered the skeleton of any web application.
CSS, on the other hand, is a style sheet language which provides style and visual enhancements to the documents written in HTML. JavaScript is the most advanced language among these technologies. It performs HTML DOM (Document Object Model)
manipulation to provide a dynamic interface to users. Moreover, it provides an interactive
interface to the users by creating pop-up messages, validating form inputs, and changing
the layout based on events like user-input or mouse clicks. All these technologies are
controlled by the browser to provide a front-end web interface. [3.]
Back-end web development, also known as server-side development, involves the development of computer programs and databases to serve the client. A web application
in its primary days did not need to have a front-end but a functioning server-side application was enough for it to be considered a web application. Several changes have been
made in this field since then. Today’s sophisticated web applications cannot run without
both the front-end and back-end services. Back-end technologies usually consist of the
programming languages such as PHP, Ruby, Python, Java, Node.js, and different frameworks.
Web application development encompasses all the web technologies related to the frontend and the back-end. In addition, a web application must ensure communication between the client and the server with the use of different communication protocols. Protocols are a set of rules for exchanging messages in a communication network. Protocols
vary with different tasks and layers. HTTP (HyperText Transfer Protocol), TCP/IP (Transmission Control Protocol/ Internet Protocol), FTP (File Transfer Protocol), SMTP (Simple

3

Mail Transfer Protocol), SOAP (Simple Object Access Protocol) and REST (Representational State Transfer) are some common examples of the protocols used in web applications. [4.] A web application, in its most elementary form, sends an HTTP request to a
server to establish connection, and the server sends an HTTP response to the client. A
typical example of communication in a web application is illustrated in figure 1.

Figure 1. Web application model [4]

Figure 1 illustrates the communication among the three layers of a web application
model. The first layer is a client-side web browser, the second layer is a server-side
dynamic content generator, and the third layer is a database server. A user sends an
initial request using the HTTP protocol through the browser over the internet to the
server. The web server then processes the request by accessing the database server
and retrieving the requested data. The web server then sends the response to the user
over the internet through the browser. The response usually contains the data requested
by the user. [4.]
Building a good Database Management System (DBMS) to store information is a crucial
part of web application development. DBMS allows the users to create, save, update,
and query (search) data in a web application. There are two types of databases: relational and non-relational. Relational databases, also known as SQL databases, are traditional databases which store data into tables in the form of rows and columns. The

4

tables maintain some kind of relation with each other, thus giving it the name ‘relational
database’. Oracle database, MySQL, and SQL Server are the popular relational databases. [5.]
Non-relational databases, also known as NoSQL databases, store data in forms other
than tables. NoSQL databases store data in a key-value pair, graph, document, column,
or multi-model depending on the database selected for application development. MongoDB, HBase, Cassandra, Redis, and Riak are some of the examples of popular NoSQL
databases. Relational databases are generally used in enterprise applications which can
handle large related data, whereas, non-relational databases, which are flexible and
scalable in nature, are used in data-driven real-time web applications with rapidly increasing data. [5.]
In addition to a good database, a good framework for web application development has
also become a necessity nowadays. Use of web frameworks in the development of sophisticated web applications is more in practice than the use of native programming languages. Web frameworks, also known as web application frameworks, are designed to
ease the task of web application development by providing database-access libraries,
templates, session management, and code reuse facility. JavaScript frameworks such
as AngularJS, ReactJS, Backbone.js, Ember.js, and Knockout.js are the most popular
frameworks in the front-end development. Whereas, PHP frameworks (Laravel, Symfony, CakePHP), JavaScript frameworks (Node.js, Meteor, Express), Rails, Pyramid,
ASP.NET, Java EE, Spring, and Django are the most popular frameworks in the backend development. [5.]

2.2

RESTful API

REST is an architectural style used in web development in order to create web services.
REST only defines the principles on which a web service is developed for the clientserver communication. It is not a set of rules (protocols) for creating web services. Any
web services or APIs (Application Programming Interfaces) that are designed with the
REST architecture are called RESTful APIs, or just REST APIs. REST provides good
performance, scalability, and reliability in a distributed computing system. There are several constraints for an application to become a REST application. However, a concrete
implementation of REST APIs must follow at least four basic design principles: [6.]

5

•

Use of HTTP methods: REST APIs must follow the HTTP methods explicitly.
They must use GET to retrieve a resource from the server, POST to create a
resource, PUT to modify or update a resource, and DELETE to delete a resource.

•

Stateless communication: Communication between the client and the server
must be stateless, meaning that every request from the client must contain all the
information required for the server to process them. The server should not require
any stored data to process the request.

•

Use of directory-structure like URIs: REST APIs must use the URIs that are
straightforward,

properly

structured,

and

easily

understood,

such

as

http://www.myservice.org/discussion/topics/{topic}

•

Data transfer in XML or JSON: The data transferred between the client and the
service-exchange must be in XML or JSON format so the data are properly structured and readable. [6.]

In addition, REST web services (APIs) must have a clear separation of client-side logic
and server-side logic. A uniform interface separates clients and servers, which allows
developers to work on the individual part of web application and improve one without
affecting another. Clients and intermediaries should be able to cache server responses
to avoid reuse of stale data in response to future requests. Clients also cannot assume
a direct connection to the server. In most cases, intermediaries between the client and
the server serve the request-response cycle. Furthermore, in REST web services, server
may temporarily extend the client by transferring logic to the client. [6.]

6

Figure 2. REST API [9]

Figure 2 illustrates the communication between a client-side application and a REST
API. The client does not know the implementation of the server and does not directly
communicate with the server. The REST API takes all the incoming HTTP requests from
the client, processes them, and sends HTTP responses [9,162].

2.3

Single Page Application

Single Page Application (SPA) is a web application which fits into a single web page. In
contrast to the traditional full page loads, an SPA loads all the resources required to
navigate throughout the web application on the first page load. It then dynamically
changes the contents as the user interacts with the application, so no full page request
will ever be made again. However, URLs are updated in the address bar of the browser
with a hash tag following the name of the resources accessed. [22.]

7

Figure 3. Comparison of traditional page lifecycle and SPA lifecycle [24]

Figure 3 illustrates the distinction between the lifecycle of a traditional web page and an
SPA web page. In traditional web applications, every time when a client sends a request
to a server, the server will respond by rendering a new HTML page. All the subsequent
requests to the server are also processed in a similar fashion and every time a new page
is loaded on the client’s browser. In an SPA application, after the first page loads, all
interactions between the client and the server happen with the AJAX (Asynchronous
JavaScript and XML) calls, which in return send data in JSON (or XML) form. The
browser then uses the JSON data to update the page dynamically, without any page
reloads. [24.]
SPAs use AJAX (to interact with the server), HTML templates, MVC frameworks, and
JavaScript to perform most of the navigation works on the front-end [23,10]. Modern
front-end JavaScript frameworks such as AngularJS, Ember.js, React, and Meteor.js
have simplified the tasks of creating SPAs by providing rich DOM manipulation and twoway data binding features. SPAs provide a rich interface and fluid user experience. Moreover, SPAs make users feel like they were interacting with a desktop application.

8

3
3.1

Full Stack JavaScript
JavaScript

JavaScript is a cross-platform, light-weight, object-oriented scripting language designed
primarily for adding interactivity to modern web pages and web applications. It is one of
the three main components of the front-end technologies besides HTML (providing structure to the web page) and CSS (providing style to the web page). It was developed by
an American programmer Brendan Eich at Netscape in 1995. Originally called by the
names ‘Mocha’ and ‘LiveScript’, Javascript got its current name in December 1995 with
the release of the third beta version. [25.]
JavaScript was submitted to ECMA (European Computer Manufacturer Association) for
standardization so that other browsers could implement it on the basis of the standardization. ECMA international then published the standard JavaScript language specifications under the name ECMAScript. The current JavaScript specification is based on the
ECMAScript 2016, which was released in June 2016. [25.]
JavaScript provides rich features to create dynamic and interactive interfaces in clientside applications. It can detect the user’s browser and OS (Operating System), and performs platform-specific operations. Originally termed as an interpreted language, JavaScript can be executed without preliminary compilation by the browser so it can perform
simple calculations on the client-side. It is often used to validate the user’s input in forms
and send the data asynchronously with the AJAX. It also performs HTML DOM manipulation to provide dynamic interface. It is an object-oriented programming language and
supports several built-in objects with inheritance. Thus, JavaScript enables developers
to add dynamic features to static HTML pages, control multimedia and add animations.
Moreover, JavaScript provides several third-party APIs and libraries to facilitate the task
of building dynamic web pages. One of the most popular JavaScript library is JQuery.
[25.]
JQuery is a library based on JavaScript, developed by an American programmer John
Resig. All the functions that can be programmed in traditional JavaScript can be performed in JQuery, but with much simpler methods. Therefore, a function that needs several lines of codes to be written in JavaScript can be easily written in few lines using
JQuery. It is almost supported by all modern browsers and does not require extra plugins
or extensions to run. One of the main features of JQuery is DOM manipulation. DOM is

9

a tree-like structural representation of the elements in an HTML page. JQuery syntax
makes it easy to navigate throughout these elements, find and manipulate them. For
example, it can be used to find all elements with a certain property in a web page, change
the elements’ properties or make them respond to certain events like mouse clicks. This
task is difficult to perform in pure JavaScript but JQuery’s syntax makes it easier. [26.]
For example, in order to change the background colour of the body in an HTML page,
one writes the following function in JavaScript:
function changeBackground(color) {
document.body.style.background = color;
}
onload="changeBackground('red');"
whereas, the same task can be performed in one line of code using the following JQuery
function:
$('body').css('background', '#ccc');
Moreover, JQuery provides simpler functions to create animations, handle different
events, and develop AJAX applications.
AJAX (Asynchronous JavaScript and XML) is a web development technique to create
asynchronous web applications. With the use of AJAX, asynchronous communication
can be made between the client and the server. AJAX uses XMLHttpRequest object to
communicate with the server, and sends and receives information in XML, JSON, HTML,
or even in text file format. XMLHttpRequest is an API that allows asynchronous communication between the client and the server without the need of a full page reload. Hence,
AJAX allows to update a certain portion of a web page without page refresh (reload).
[27.]

3.2

Rise of Full Stack JavaScript

JavaScript in its primary days earned a bad reputation because of the lack of performance and its incompatibilities with the prominent browsers of that time. However, things
started to change after large browser vendors invested time and money in improving the
language. JavaScript, finally, became the de facto standard of the client-side scripting.
While JavaScript remained prominent in the client-side, several new technologies were
introduced in the server-side such as PHP, JAVA, .NET, Ruby, and Python. Developers

10

started to realize that use of two separate languages in the development of the client and
the server was complicating the tasks of web programming. Several attempts were made
to unify the two sides by creating client components on the server and compiling them
into JavaScript (for example: ASP.NET web forms and GWT), but they failed. The only
solution to this problem was the implementation of JavaScript on the server-side, and
Node.js was introduced. [28.]
Node.js is actually the backbone of Full Stack JavaScript web development. It finally put
the power of JavaScript on the server with the idea of non-blocking programming paradigm. Node.js became popular in a short time due to its easy-to-use components. It allowed the developers to quickly set up a server and start building applications on top of
it. Several frameworks started to emerge to facilitate Node.js implementation such as
Express and Connect.js. Express became the most prominent one. Node.js ecosystem
continued to expand and a package manager like ‘npm’ was introduced. [28.]
While Node.js was invading the server, NoSQL database started to gain popularity in the
field of database. MongoDB, a NoSQL database, was introduced with the concept of
storing data in Binary JSON. Due to the use of JSON, which is a JavaScript way of
storing data, MongoDB became the preferred database for Node.js applications. JavaScript also started to evolve on the client-side and new frameworks like AngularJS, Backbone.js, and ReactJS started to take over the use of traditional JavaScript, JQuery, and
AJAX for building Single Page Applications. When all the prominent tools to build a Full
Stack JavaScript application were ready, additional tools based on JavaScript were introduced to improve the development process such as Mocha.js and Chai.js for application testing, Gulp.js and Grunt.js for automation of build tasks. [15; 28.]
Node.js eco-system, with addition of AngularJS on the front-end, Express as the backend framework, and MongoDB as database raised a new term in web application development called MEAN (MongoDB, Express.js, AngularJS, Node.js) stack. The word
MEAN stack is used to refer Full Stack JavaScript but it is still a subset of the term Full
Stack JavaScript. Node.js, Express, and MongoDB are the prominent members of the
Full Stack JavaScript. AngularJS, however, can be replaced with Backbone.js, ReactJS,
or Ember.js to meet the developers’ requirements. Nevertheless, the term Full Stack
JavaScript is generally used to refer to the MEAN stack. [15; 28.]

11

4
4.1

MEAN Stack
Node.js

Node.js is a software platform which helps to build asynchronous and event-driven network applications. It contains built-in HTTP server libraries which allow developers to
create their own web server and build highly scalable web applications on top of it. The
V8 JavaScript runtime engine used by Node.js is the same engine used in Google’s
Chrome browser. [7.] The V8 engine complies the codes directly to the native machine
code leaving out the interpreter and byte code execution process, which gives Node.js a
huge boost in performance [8]. In addition to the V8 engine, Node.js is composed of
several components as shown in figure 4.

Figure 4. Node.js architecture [8]

Figure 4 illustrates the architecture of Node.js. Node.js is composed of Node standard
library at the top, thin C++ node bindings in the middle, and V8 engine, libeio and libev
at the bottom. Node standard JavaScript library exposes operating system features to
the application, while the C++ bindings expose the core APIs of the underlying elements
to JavaScript. The V8 engine provides the run-time environment for the application, and
libeio handles the thread pool to make asynchronous (non-blocking) I/O calls to libev,
the event loop. [8]
The asynchronous, non-blocking I/O feature of Node.js plays an important role in resource management and performance enhancement of Node.js applications. Unlike
other mainstream servers like Apache and IIS, Node.js uses single-threaded, non-blocking I/O operation. What this means is that instead of running each session (request) in a

12

separate thread and providing an associated amount of RAM for each session, Node.js
uses a single thread to execute all requests and implements an event loop to avoid
blocking of I/O. In a multi-threaded server, as the number of threads increase, the server
overhead (scheduling and memory footprints) increases resulting into a slow performance of the overall system. Node.js uses an event-driven and non-blocking I/O approach to handle all the requests to the server. [10;11.]

Figure 5. Node.js processing model [10]

In figure 5, Node.js creates an event-loop with event handlers for all requests. When an
I/O operation occurs, the associate handler is queued up for execution and a callback
function emits an event after the I/O operation is completed. In the mean-time, other I/O
operations keep running outside the event loop of the server. Thus, Node.js performs
the I/O operations asynchronously and does not block any script execution, allowing the
event loop to respond to other requests. [10.] One common use of a callback function
displaying the non-blocking I/O operation of Node.js is shown in listing 1.
var fs = require("fs");
fs.readFile('input.txt', function (err, data) {
if (err) return console.error(err);
console.log(data.toString());
});
console.log("Reading file");

Listing 1. Node.js non-blocking code example

Listing 1 illustrates the non-blocking code example of Node.js. The program is trying to
perform three operations: read a file ‘input.txt’, print the file’s data in console, and print

13

message “Reading file” in console. The function readFile() executes first in the order
of appearance but the program does not wait for file-reading function to complete. Once
the function starts to read the file, it passes control to execute the next instruction immediately so the program prints “Reading file” before printing the file’s data. Once the file
I/O is complete without any error, it will call the callback function function (err,
data) and returns the file data as parameters, then prints the data below the ‘Reading
file’ message in the console. Hence, there is no blocking of I/O operations and all the
operations execute asynchronously.
Node.js has a rich development eco-system with several compatible libraries and package managers. One of the main package managers that comes pre-bundled with Node.js
during installation is npm. Npm is run from the Command Line Interpreter (CLI) and it
manages all the dependencies for the Node.js applications. Instead of manually downloading and configuring the JavaScript modules for use in the application, npm provides
a simpler alternative. The names of the modules and dependencies can be included with
their version numbers in ‘package.json’ file inside the folder structure, and the modules
are downloaded issuing a simple ‘npm install’ command from the CLI. [12,37-42.]
The npm automatically handles all the downloading process and save all the named
modules in the ‘node-modules’ folder. The modules can be updated by changing their
version number in the ‘package.json’, and can be easily distributed by uploading a single
‘package.json’ file to the server instead of uploading the large ‘node-modules’ folder.
After the update or upload, issuing the ‘npm install’ command installs the specific modules and dependencies. Therefore, Node.js applications are light-weight, flexible and
easily sharable. [12,43-47.]
Node.js is actually the foundation of the MEAN stack. All the other technologies work on
its foundation. Node.js introduces the power of JavaScript on the server side allowing
the developers to create both server side and client side logic in one single language
‘JavaScript’. One of the major advantages of Node.js over other server-side platforms is
the built-in event loop. The event loop is used by all the available modules and libraries
in the Node.js which makes the I/O operations efficient. [10.] This Node.js feature maintains the speed and efficiency of the overall system.

14

Table 1. Performance benchmark of Node.js, Python-Web, and PHP [13]

Table 1 illustrates the performance results of the Node.js in comparison with PythonWeb and PHP when calculating Fibonacci (10/20/30). The study was conducted by the
researchers in Peking University, China and results were published on the technical report by IEEE. It is clearly seen that the Node.js is better in handling requests and performing calculations than the other two technologies. When calculating the small Fibonacci of 10, Node.js and PHP, both perform well, whereas Python-Web lags behind.
Node.js handles about 2500 requests per second taking 0.401ms time to handle each
request. PHP falls short by only few numbers but the gap in their performances increases
drastically when the calculation tends to become complex. When the task reaches to the
calculation of Fibonacci of 30, both PHP and Python-Web perform poorly, almost processing 2 or 3 requests per second, and taking 345ms and 560ms to process each request respectively. In contrast to them, Node.js still maintains the quality by processing
requests 20 times higher than PHP and taking a relatively short time, about 17ms. [13.]
Although Node.js is an ideal choice for a scalable, data-driven, I/O intensive applications,
it is not a perfect solution for all applications. It uses JavaScript so it is more efficient
when used with other JavaScript-based technologies. The use of single-thread to handle
all requests is ideal for some cases but it is not a good feature for intensive data computing applications. Moreover, Node.js uses tight coupling between the web server and the
web application so all the classes are dependent on each other. Such tightly coupled
system is hard to maintain since a problem in one area causes the whole system to fail.
Node.js also does not work well with the relational databases. All these factors must be
considered before choosing Node.js as a development platform for any application. Studies have shown that Node.js is ideal for real-time data-driven web applications in collaboration with push technology and web sockets. [8.]

15

4.2

Express

Express is a node module which provides a minimal and flexible framework for Node.js
web applications. It works on top of the core node modules without hiding any of the
features of Node.js. In addition, it provides robust and clean functions to add to the node
modules so the development of Node.js application using Express is far easier than using
the native node modules. [14.] Due to the simplicity of Express, it has been adopted by
large companies such as MySpace, Paypal, Apiary.io, Persona, and Ghost. The use of
Express framework on top of Node.js helps to maintain clarity of the code. It also makes
module integration easy to handle, and provides a solution structure for applications. [15,
142.] Express is installed using the npm package manager issuing “npm install express” command [14].
An Express server is made up of three building blocks: router, routes, and middleware.
A web server’s core functionality depends on its excellent routing methods. In a clientserver communication, a client requests some resources from the server, the server locates the resources and responds by sending the resources to the client. This is the core
functionality of a web server and it requires excellent routing methods to serve the request. Express makes this tedious job really easy by allowing developers to create routes
in simple structure. A route in Express is a combination of a HTTP verb and a path. The
HTTP verb is generally one of the four HTTP methods: GET, POST, PUT and DELETE,
and the path is the location of the resource (URI). [15,144-146.] A basic route in Express
is created as below:
app.METHOD (PATH, HANDLER) where:
•

app is an instance of express

•

METHOD is an HTTP request method

•

PATH is a route path (URI)

•

HANDLER is the function which executes when the route is matched.

Middleware in Express are the functions that have the pattern function (req, res,
next). The req is the incoming request from the client, res is the response from the
server, and next is the callback function. Therefore, middleware functions execute any
code inside it, handle request and response objects, end request-response cycle, and
call the next middleware function. A current middleware function must always call the
next middleware function, even in the case of incomplete request-response cycle to

16

avoid request hanging. [14;15.] A simple Express web server containing all three building
blocks is shown in figure 6.

Figure 6. Express web server [14]

Figure 6 illustrates the three building blocks of an Express application: router, route, and
middleware. The first two lines uses Node.js require() method to load express module
in the application by creating the app object. The third line is a simple router with a route
to ‘/’ location and a middleware function. The application listens to port 3000 for any
request.
Express also provides a simple application generator tool for providing structure to our
Node.js application. It can be installed from the CLI by issuing ‘npm install express-generator’ command. It also provides the options for creating template engine
to write HTML codes. The application generator, by default, creates jade templates for
the views, but it also supports Handlebars, EJS, Pug, and Mustache. The application
structure created by the Express generator has separate directory for routes, views, and
public-rendering files. However, the application structure is just one of many ways to
structure an Express application. It can be easily modified during the application development process to meet the requirements of the application. [14.]

4.3

MongoDB

MongoDB is an open-source, non-relational, document database. It deviates from the
need of creating Object Relational Mapping (ORM), for rapid application development.
[16.] Unlike the relational databases, it does not contain columns and rows. However,
the concept of rows still exits in MongoDB but it is called a document. The document

17

defines both itself and the data it contains. A document is a set of fields and it can contain
complex data such as lists, arrays, or an entire document. Each document contains an
ID field which can be used as a primary key for a query operation. A set of documents is
called a collection and MongoDB holds a set of collections. The format in which the MongoDB stores the data is called BSON, which stands for binary JSON. Since JSON is the
JavaScript way of storing data, MongoDB works perfectly with the applications built with
JavaScript stack. [11,13-15.] A basic example of a MongoDB document is illustrated in
listing 2.
{
"firstName": "Homer",
"lastName": "Simpsons",
_id: ObjectId("52279effc62ca8b0c1000007")
}

Listing 2. Example of a MongoDB document

Listing 2 illustrates a code snippet from a MongoDB collection. The document stores the
first and last names of a customer. Unlike traditional relational databases, MongoDB
does not hold a data set corresponding to a set of columns, instead it uses the concept
of name-value pair to store data [11,14]. The _id is the unique identifier (primary key)
for that set of data (document). There are some variations in the naming terms of relational database and MongoDB, illustrated in table 2.
Table 2. Comparison of MySQL and MongoDB terms [17]

18

As illustrated in table 2, in MongoDB, some MySQL terms like table is called collection,
and row is called BSON document. Instead of Join operation, MongoDB embeds sub
documents inside the main document and provides links to the sub documents. MongoDB, like MySQL uses unique identifier (primary key) for each document so that it is
easy to query and find the data. MongoDB supports insert, query, update, and delete
operations like any other databases. [17;11.]
One of the features that makes MongoDB stand out against the traditional databases is
the inclusion of dynamic schema. Collections in MongoDB have different schema and
the documents within the same collection can have as many different schema and
shapes as required. This feature enables developers to start storing data in the database
with any consideration of the database structural design. The documents’ keys and values can be changed and updated when required since there is no pre-defined rule governing the data type validation. [18,7-12.]
Other important features of MongoDB are auto-sharding and replication. Since the data
are stored in a document, they can be stored across multiple locations. As the size of
databases increase, a single machine may not be able to store data and handle readwrite operations. MongoDB solves this problem by allowing horizontal scaling, meaning
that the data are distributed to multiple servers and all servers can work together to support data growth and provide efficient read-write operations. Likewise, the data can also
be replicated to another data server so that the data are always available in case one
server fails. [16.] This allows to build highly scalable and efficient data servers in comparison to relational databases such as MySQL and Oracle databases.

19

Figure 7. MySQL vs MongoDB insert [17]

Figure 7 illustrates the time taken by MySQL and MongoDB when running a script to
insert 10,000 users’ data. MySQL which uses traditional database approach took significantly longer time than MongoDB. It shows that MySQL took 440 seconds to insert
10,000 users, while MongoDB only took 0.29 seconds to perform the same task. It proves
that the MongoDB is excellent in performing large read-write operations. [17]
Although MongoDB is good at performing majority of tasks, it has its drawbacks. MongoDB can not take multiple operations as one transaction. If any operation in one transaction fails, it will cause the entire operation to fail. It also can not perform the join operations like MySQL database so it is not a good choice in an application where there are
multiple relationships among the data. The data has to be searched and updated in multiple documents at once and all operations need to be tied in a single transaction to
ensure that the data is updated in all collections. Transactional databases work better in
such cases than the non-transactional database like MongoDB. Although the flexibility
of MongoDB to allow any sort of data is good in some cases, most applications still need
certain kind of structure to their data to work properly. To solve this problem, Mongoose
was created by the company behind MongoDB. [11,15.]
Mongoose is a MongoDB data modelling for Node.js. It was created to solve the problem
of writing complex data validation, casting, and business logic in MongoDB. It provides

20

simple, elegant, data-modeling feature to the application. Using mongoose, one can define what kind of data can be in a document and what data must be in a document. In
technical term, it provides data validation rules, query building functions, and business
logic to the application data. Moreover, it provides an entire set of new features to use
on top of MongoDB. It can manage the connections to MongoDB database, as well as
read, write, and save data. It also allows only valid data to be saved in MongoDB by
providing validation rules at the schema level. [11,15.]

4.4

AngularJS

AngularJS is a JavaScript framework for building front-end of web applications. It is designed to build a Single Page Application with the introduction of MVC (Model View Controller) architecture to the front-end. [19.] AngularJS framework extends HTML functionalities by providing different elements and attributes, which help to build large web application with ease. It extends HTML with ng-directives, binds the HTML input controls
to the application data with ng-app directive, and binds the application data to the view
with ng-bind directive. [21.] A simple HTML template with AngularJS is shown in listing
3.
<html lang="en-US">
<script
src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>
<div ng-app="">
<p>Name: <input type="text" ng-model="name"></p>
<p ng-bind="name"></p>
</div>
</body>
</html>
Listing 3. AngularJS example [21]

In listing 3, AngularJS is added to the page with a <script> tag so AngularJS starts
immediately when the page is loaded. The actual implementation starts inside the <div>
container where AngularJS is initialised by ng-app directive. The ng-model directive
then binds the value of input to the variable ‘name’, and finally ng-bind directive binds
<p> element’s innerHTML to the variable ‘name’. Hence, the name typed by the user in

21

the input field is displayed inside the <p> element. It is common practice to use AngularJS expression instead of ng-bind directive. For example in the above case, <p ngbind=”name”></p> can be replaced with <p>{{name}}</p>. [21.]
One of the important features of AngularJS is its two-way data binding mechanism. The
two-way data binding feature allows synchronization of data between the model and the
view. Model refers to some JavaScript variables, and view is the HTML container where
the model data is displayed. Whenever data in the model changes, the view will be
updated immediately, and whenever the view component changes, the model data will
be updated as well. This feature eliminates the need of tedious DOM manipulation in
order to find and change the data in the DOM tree. [20,2.]

Figure 8. Two-way data binding in AngularJS [19.]

Figure 8 illustrates the two-way data binding feature of an AngularJS application. The
view contains two text box inputs: cost and qty with ng-model attributes attached to them.
The ng-model binds the input values to the scope that holds the model data. In one-way
data binding, data is bound in only one direction. Once the view is rendered, any changes
in the model data or view components are not automatically reflected in the view. If a
user changes the values of cost and qty to get a new total, the total will not be automatically updated in the view. In AngularJS application, if the user changes the values of
cost and qty, the new total will be displayed immediately in the view because of the live
view provided by the two-way data binding. [19.]

22

Another important feature of the AngularJS is the introduction of MVC architecture on
the front-end. In fornt-end web development, view and controller are generally placed in
one place. Because of the automatic synchronization of model and view in AngularJS,
controller can be kept outside of the view as shown in figure 9. [21.]

Figure 9. MVC architecture in AngularJS [15]

Figure 9 illustrates the MVC architecture in AngularJS. The model defines the application
at a data layer, the view provides the visual presentation, and the controller manipulates
the model data. Due to the two-way data binding between the model and the view, the
controller focuses only on the model data, and the view reflects back any changes done
in the controller from the model. [15,190-191.]
AngularJS was created with the concept of SPAs from its early days of development, so
it provides excellent routing support to create SPAs. One can create multiple views for
multiple URLs and AngularJS loads the appropriate view in the main view according to
the URL requested. Since there are no redirects, AngularJS takes a minimal amount of
time to load the pages. This feature provides good user experience. [20,3.]
AngularJS applications are also embeddable, testable, and injectable. They can easily
be embedded with other applications and work perfectly with other technologies. Dependencies are automatically handled by the AngularJS injector subsystem by using different services and factory methods. This allows to create loosely coupled application,
so individual components of the application can be tested in isolation. [20,4.]

23

5

Implementation of MEAN Stack

5.1

Project Description

Learn.io is the name of the prototype web application that was developed to illustrate the
implementation of the MEAN stack in a real-life project. The web application provides
minimalistic features of an online teaching platform. An admin can create courses, provide course descriptions, embed course videos, provide tutorials and other course materials. A user can simply browse the courses and request for full course videos. The
application provides a basic foundation of an online teaching platform which can be extended later as a full e-commerce website to provide paid courses and tutorials.
After analysing the requirements, the following interfaces were implemented.

•

An interface for admin to create courses, add description, embed video URLs,
and other course materials.

•

An interface for user to browse courses, view courses’ teaser videos, and request
the full video playlists providing the email address.

•

An interface for admin to manage the courses, users and requests.

In addition to the above requirements, the application should also meet the following best
practices set by the standard MEAN application:

•

The application should be built with the MVC architecture.

•

The application should be a Single Page Application (SPA).

•

The application should consist of REST APIs for data communication.

•

The application should follow the responsive mobile-first design principles.

Based on the requirements, the application was built in the MVC architecture. There is a
complete separation between the server-side and the client-side logic. The model is implemented in the server, and the view and the controller are implemented in the client.
Moreover, the application does not communicate directly to the server, but uses REST
APIs to feed the data. The application uses the routes created in AngularJS to navigate
throughout the web pages but all data are served by updating a single page. This SPAREST API approach and the MVC architecture of the application are illustrated in figure
10 and figure 11.

24

Figure 10. Request-response flow in MVC application [9]

Figure 10 illustrates the MVC architecture of the application. It also illustrates the routing
mechanism the application uses to access specific web pages in the application. A request from a visitor is routed to the controller. The controller, if needed, makes a request
to the model and the model responds to the controller. The controller then sends a response to the view and the view renders the page on the visitor’s browser.

Figure 11. MEAN stack architecture of learn.io [9]

Figure 11 illustrates a common MEAN stack architecture that the application follows. A
REST API is built using MongoDB, Express and Node.js, and a Single Page Application
(SPA) is created using AngularJS. The REST API then feeds JSON data to the AngularJS SPA on the browser.

25

5.2

Development Environment Setup

The application was developed in Macbook pro 2013 running the operating system OS
X El Capitan 10.11.6. Besides the hardware, several programs and tools were downloaded and configured to set up an environment for the MEAN application.
WebStorm IDE (Integrated Development Environment)
WebStorm IDE is a lightweight and powerful IDE which facilitates the development of a
MEAN application. It has built-in git support and embedded CLI. It has also built-in support for the latest technologies such as Node.js and AngularJS. It can be downloaded
from the official website: https://www.jetbrains.com/webstorm.
Node.js
Node.js is the first program to be downloaded since its provides the platform on which a
MEAN

application

is

built.

It

can

be

downloaded

from

the

website:

https://nodejs.org/en/download.
After the download and installation, it can be checked by issuing node –v command
from the terminal or CLI as illustrated in figure 12.

Figure 12. Node.js version check

Figure 12 illustrates the command to view the Node.js version installed on the computer.
The version used in the application is 4.5.0. It confirms that Node.js is properly installed
in the development machine,
Express
After the installation of Node.js, a root directory is made and inside the directory, express
is installed issuing command from the terminal npm install –g express. An express

26

generator can also be installed to provide simple structure to the application. All the node
modules and dependencies were installed using npm install command.
MongoDB and Mongoose
MongoDB is installed from the official web site: https://www.mongodb.com/downloadcenter#community. After locating the downloaded folder, MongoDB server can be
started with simple command from the terminal: mongod as illustrated in figure 13.

Figure 13. Starting the MongoDB server

As illustrated in figure 13, MongoDB can be started with the single command mongod.
Other information about the MongoDB can also be seen in the figure. Mongoose was
installed using the command: npm install mongoose.
AngularJS, Angular Routes, JQuery, Bootstrap (front-end packages)
There are several ways to download the front-end packages. In this application, bower
was used to download and configure the front-end package. Bower is the package manager for the front-end, whereas npm is the package manager for the back-end. All the
modules and dependencies were downloaded using npm and bower.
nodemon
nodemon is a utility that monitors the changes in the source code during development
and automatically restarts the server. It is downloaded using the command: npm install –g nodemon, and implemented using the nodemon command.

27

5.3

Implementation

After the installation and configuration of all the required tools and programs, the development process was started.

Figure 14. Application folder structure

Figure 14 illustrates an overview of the application’s folder structure as seen in WebStorm IDE. The ‘package.json’ file contains all the dependencies required to run the application. The ‘app.js’ file (~/meanapp/app.js) contains all the Express middleware, and
API routes of the application. The ‘www’ file contains the command to start server at port
3000. There is a clear division between the server-side logic and the client-side logic. All
the client-side scripts are placed under the ‘public’ directory. The models, views and
controllers are separated as per the MVC architecture. The data models are placed in

28

the server-side, whereas views and controllers are placed on the client-side. All the
server-side dependencies are installed in ‘node_modules’ folder and all the client-side
dependencies including AngularJS are installed in ‘bower_components’ folder.
package.json
The ‘package.json’ file contains all the important information about the application and
the dependencies required to build and run the application.

Figure 15. package.json file

Figure 15 illustrates the ‘package.json’ file’s contents which provides overall information
about the application. It contains the application name, version, and all the dependencies. On line 6, the code shows that the application needs the scripts on /bin/www file to
start the server and it can be started with the node ./bin/www command.
app.js (Server-side)
The app.js file is the main configuration file of the Express application. It configures the
server and imports all the modules to run the application.

29

Figure 16. app.js file

Figure 16 illustrate the contents of app.js file. On line 1, it imports the express framework
to get started. It imports node modules for handling paths, serving favicon, logging request and responses, and handling forms and cookies. Line 16 shows the connection to
our MongoDB server, where ‘meanapp’ is the name of our database. Line 20 tells the
application to use public folder for rendering views. The app.use() function tells the
application to use the parameters given inside the brackets.
Models
After creating the database, and configuring Mongoose and Express (See Figure 16, line
8, 16, and 17), model classes were created using Mongoose. A simple schema for the
course is illustrated in figure 17 below.

30

Figure 17. Model data of course

Figure 17 illustrates the model class for the course. The schema is designed using mongoose and it is exported for creating REST APIs.

REST APIs
The routing mechanism in Express helps to create REST APIs for the application. Generally, in a MEAN application, REST APIs are built to feed the data to the client using
Node.js, Express, and MongoDB.
app.get('/api/v1/courses', function(req, res){
Course.getCourses(function(err, courses){
if(err){
throw err;
}
res.json(courses);
});
});
app.get('/api/v1/courses/:_id', function(req, res){
Course.getCourseById(req.params._id, function(err,
courses){
if(err){

31

throw err;
}
res.json(courses);
});
});
app.post('/api/v1/courses', function(req, res){
var courses=req.body;
Course.addCourses(courses,function(err, courses){
if(err){
throw err;
}
res.json(courses);
});
});
app.put('/api/v1/courses/:_id', function(req, res){
var id=req.params._id;
var courses=req.body;
Course.updateCourses(id,courses,{},function(err,
courses){
if(err){
throw err;
}
res.json(courses);
});
});
app.delete('/api/v1/courses/:_id', function(req, res){
var id=req.params._id;
Course.removeCourses(id,function(err, courses){
if(err){
throw err;
}
res.json(courses);
});
});

Listing 4. REST APIs for course

Listing 4 illustrates the code snippet for creating REST APIs for the courses. The HTTP
methods GET, POST, PUT, DELETE were used to perform the various operations at the
endpoints. The URI follows the path root-api/api/v1/ representing the version one of the
REST

APIs.

When

a

user

provides

the

route

(URI)

such

as

http://lo-

calhost:3000/api/v1/courses, the getCourses() function is invoked which will return all
the courses in JSON if there is no error.

32

Public directory (Client-side scripting)
The public directory contains all the files and scripts needed to provide the routes (URIs)
and render HTML pages. The ngRoute module routes the Angular application to different pages without page reloads to make a Single Page Application. The routes are defined in the public/app.js file.

Figure 18. Routes in AngularJS

Figure 18 illustrates the routing mechanism in AngularJS. The routes refer to the pages
to perform CRUD operations. The first line of code adds ngRoute as a dependency in
the application module and then uses $routeProvider to configure the routes. The
contents provided by the routes are put inside a ng-view directive in index.html. The
ng-view directive then acts as a place holder for all the available views, thus creating a
Single Page Application. When the user provides one of the routes, the related controller
is invoked and the view is rendered inside the ng-view directive of the index.html without page reloads.

33

Controllers in AngularJS
The AngularJS controller module is used to consume the REST APIs when the user
provides the appropriate routes (URIs) and shows the results to the user.

Figure 19. Course.js controller

Figure 19 illustrates a code snippet from the Course.js controller class. The code snippet
illustrates the GET request method for all courses. The controller module uses the
$http.get method to consume the REST service at the given URI (/api/v1/courses). It
assigns the JSON returned back from the API to the $scope.courses, which sets a
model object named courses. AngularJS then binds courses object to the application’s DOM rendering it on the user’s browser.

34

6

Results and Discussion

The implementation of the MEAN stack in real-life web application development was
carried out successfully. The prototype application followed all the best practices of developing a MEAN application. A RESTful API was created on the server-side using
Node.js, Express, and MongoDB, and a Single Page Application was developed on the
client-side using AngularJS. Moreover, the application is responsive and fits well on all
screen sizes.

Figure 20. RESTful APIs

Figure 20 illustrates the RESTful APIs built using the Node.js, Express, and MongoDB.
Given the URI ‘localhost:3000/api/v1/courses’, the GET method renders all the courses’
information on the browser.

35

Figure 21. Course page

Figure 21 illustrates the course page of the application. The application has a menu for
navigating to different pages but all the views are rendered inside the ng-view directive
in the index.html file. The URL contains # (hash) sign, which indicates the SPA’s routing
mechanism. The application downloads all the resources necessary in the first request
and keeps updating the views later.

36

Figure 22. Detail page of a course

Figure 22 illustrates the details of a course having the id shown in the URI. A user can
browse the courses in the course page and click the link to go to the details. However,
the page itself is not reloaded, the application will request the certain courses details
from the REST API and JSON data sent back from the API is updated in the page. Using
this interface, users can view the video and request for the full video playlist.

37

Figure 23. Admin panel

Figure 23 illustrates a simple admin panel to perform the CRUD operations. The admin
can manage the resources of the web application from this page.
The application was designed using Bootstrap’s grid layout so the application follows the
best responsive design principles.

38

Figure 24. Responsive design

Figure 24 illustrates the responsive design of the application. Since the application was
developed in a local environment, it was tested on a browser by minifying the width of
the browser.
MEAN stack indeed proved itself as one of the best solutions to bring all the technologies
together for modern web application development. The MEAN approach of creating
RESTful APIs on the server-side and a Single Page Application on the client-side clearly
separates the client and server implementation. Since the client does not communicate
directly to the server, future changes on the client-side application will not affect the
server. Similarly, hybrid applications and native applications can be developed and they
can run perfectly having access to the RESTful APIs.
In spite of all the benefits, a few problems were faced during the application development. The first problem was storing the data in MongoDB. Since MongoDB uses a non-

39

relational database model, it was difficult to keep a relation between the data and perform
related queries. In some cases, documents were embedded inside another document
and in other cases, the references to other documents were included by using an array
of referring object ids. These practices can lead to data repetition and unbounded arrays,
which might cause a great problem in large enterprise applications with huge amounts
of related data.
The second problem was with the initial loading time of the SPA. Since the SPA downloads all the resources at the first load, it took quite a long time for the application to load
at first. The loading time might be longer if the web application uses several heavy
graphics and multimedia. Although the development of REST APIs is good in long-term
development, it is still an additional task while trying to develop a small web application
within a short time. Instead, the client can directly access the data from the database.
REST APIs should be implemented in large-scale web applications to minimize the coupling between the client and server, and to serve different types of clients (Web, Android,
iOS, Hybrid). This loose coupling allows developers to update the server and client-side
components independently in the future without affecting each other.
Since the application was developed to show the implementation of each component of
the MEAN stack and was created from scratch, it took a good deal of time just to set up
the working environment and directories. The application development process can be
accelerated by using different seed projects such as mean.io and mean.js, which provide
ready-to-use boilerplate codes and authentication. Similarly, scaffolding tools and code
generators like yeoman can be used to simplify the development process.

40

7

Conclusion

The main goal of the thesis was to study the different components of the MEAN stack,
the most popular Full Stack JavaScript framework, and to develop a prototype application
based on it. A considerable amount of time was taken to do the research on the topic of
Full Stack JavaScript web development, and MEAN stack in particular. All the building
components of the MEAN stack: MongoDB, Express, AngularJS, and Node.js were studied in great detail. The strengths and weaknesses of each component were analysed,
and were also compared with the other technologies.
After studying the theoretical aspects of the stack, the focus was shifted on the practical
implementation of the stack. As a result, a prototype web application was developed with
the MEAN stack. The propose of the prototype application development was to show the
implementation of each component of the MEAN stack so the application would provide
minimalistic functions of an online teaching platform. It can be further developed into a
complete payment-based online learning application by creating a rich content management system, and integrating video streaming and payment methods.
Based on the research and practical implementation, it can be concluded that the MEAN
stack provides one of the best solutions for modern web application development. The
MEAN application follows the MVC architecture, encourages the development of REST
APIs on the server-side and Single Page Application on the client-side. This approach
makes a clear division between the server-side and the client-side logic, and facilitates
the agile development. It allows to create scalable and maintainable applications using
a single language.
However, MEAN stack is not the solution for all web applications. MEAN stack is not a
good choice for developing enterprise applications which deal with a large amount of
related data. Also, it is not suitable in the fields where security is the main concern. It is
an evolving technology stack and lacks the stability and robustness of the old technologies like Java and PHP. Nevertheless, MEAN stack performs well in real-time web applications with rapidly increasing data. It is useful for rapid prototyping and quickly setting
up a web server and web application for start-up companies. With all the JavaScript
developers’ community behind the stack, the stack is going to stay and evolve with time.

41

References
1

The MEAN Stack on OpenShift [online]. OpenShift developers’ official website.
URL: https://developers.openshift.com/languages/nodejs/examplemeanstack.html
Accessed 2 June 2016

2

Dana Nourie. Java technologies for Web Applications [online]. Oracle official
website
URL: http://www.oracle.com/technetwork/articles/java/webapps-1-138794.html
Accessed 2 June 2016

3

Hanin M. Abdullah, Ahmed M. Zeki. Frontend and Backend Web technologies in
Social Networking Sites: Facebook as an Example. Advanced Computer Science
Applications and Technologies (ACSAT), IEEE 3rd International Conference on;
2014. p.85-89.

4

Web Applications: What are They? What of Them [online]. Acunetix official website
URL: http://www.acunetix.com/websitesecurity/web-applications/
Accessed 3 June 2016

5

Mimi Gentz. NoSQL vs SQL [online]. Microsoft Azure official website; 24 June
2016
URL: https://azure.microsoft.com/en-us/documentation/articles/documentdbnosql-vs-sql/
Accessed 3 June 2016

6

Rodriguez A. RESTful Web services: The basics [online]. IBM official website; 9
February 2015
URL: https://www.ibm.com/developerworks/library/ws-restful/
Accessed 5 June 2016

7

Nodejs.org official website [online].
URL: https://nodejs.org/en/
Accessed 10 June 2016

8

Erik Eloff, Daniel Torstensson. An Investigation into the Applicability of Node.js as
a Platform for Web Service. Linköping: Institutionen för datavetenskap; 2012.

9

Holmes S. Getting MEAN with Mongo, Express, Angular, and Node. Manning
Publications; 2015

10

Benjamin Erb. Concurrent Programming for Scalable Web Architectures. Universität Ulm; April 2012.

42

11

MongoDB official website [online].
URL: https://docs.mongodb.com/manual/
Accessed 15 June 2016

12

Herron D. Node Web Development. 2nd ed. Packt Publiching Ltd; 2013

13

Kai Lei, Yining Ma, Zhi Tan. Performance Comparison and Evaluation of Web
Development Technologies in PHP, Python and Node.js. Computational Science
and Engineering (CSE), IEEE 17th International Conference on; 2014: p.661-668.

14

Express official website [online].
URL: https://expressjs.com
Accessed 17 June 2016

15

Ihrig CJ, Bretz A. Full Stack Development with MEAN. Cambridge, AUS: SitePoint Pty. Ltd; 2015

16

MongoDB documentation official website [online].
URL: https://docs.mongodb.com/getting-started/shell/introduction/
Accessed 17 June 2016

17

Györödi C, Györödi R, Pecherle G, Olah A. A comparative study:MongoDB vs.
MySQL. Engineering of Modern Electric Systems (EMES), IEEE 13th International Conference on; 2015. p.1-6.

18

Chodorow K. MongoDB: The Definitive Guide. 2nd ed. Gravenstein Highway
North, CA: O’Reilly Media Inc; 2013

19

AngularJS documentation official website [online].
URL: https://docs.angularjs.org/guide
Accessed 25 June 2016

20

Panda S. AngularJS Novice to Ninja. SitePoint Pty Ltd; 2014

21

AngularJS Tutorial [online]. W3schools official website
URL: http://www.w3schools.com/angular/
Accessed 27 June 2016

22

Single Page Application Tracking [online]. Google developers’ official website
URL: https://developers.google.com/analytics/devguides/collection/analyticsjs/single-page-applications
Accessed 27 June 2016

23

Fernando Monteiro. Learning Single-Page Web Application Development. Packt
Publishing; 2014

43

24

ASP.NET- Single-page Applications: Build Modern, responsive Web Apps with
ASP:NET [online]. Microsoft developers’ official website
URL: https://msdn.microsoft.com/en-us/magazine/dn463786.aspx
Accessed 5 July 2016

25

Mozilla developers’ official website [online].
URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction
Accessed 7 July 2016

26

jQuery API [online]. JQuery official website
URL: http://api.jquery.com
Accessed 10 July 2016

27

What’s AJAX? [online]. Mozilla developers’ official website.
URL: https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started
Accessed 10 July 2016

28

Hernandez A. Init.js: A Guide to the Why and How of Full-Stack JavaScript
[online]. Toptal LLC developers’ official website.
URL: https://www.toptal.com/javascript/guide-to-full-stack-javascript-initjs
Accessed 10 July 2016

Ahmed Mansour

Building Scalable Web Applications
Researching Frameworks and Design Patterns

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
15 September 2016

Abstract

Author(s)
Title
Number of Pages
Date

Ahmed Mansour
Building Scalable Web Applications, Researching Frameworks
and Design Patterns
48 pages
15 September 2016

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructor(s)

Kimmo Sauren, Senior Lecturer
Ville Kuusela, (Senior Team leader)

A paradox of choice is a problem in web technologies. The purpose of the project was to
research modern technologies to build large-scale web applications. The main goal of the
project was to offer practical recommendations of web frameworks and design patterns
that help developing a web application that is both scalable and maintainable.
The research was based on the requirements of a large application that was developed in
an IT service company. An analysis of the application’s requirements was made to understand its main challenges. The analysis led to recommendations to support the application’s requirements.
As a result, certain web frameworks and design patterns were described. The project offers technical explanations and guidelines of how these technologies function. In addition,
a practical implementation of a web application architecture was developed using some of
the technologies described in the project.
Reusability of the code and loosely coupled components are the main factors to build a
scalable and maintainable web application. The findings are limited to the technology
available at the time this project took place. However, the methods that were applied to
find these technologies will be reusable in the future to evaluate new ones.
Keywords

web frameworks, design patterns, Angular 2, React, Module
pattern, Observer pattern, web development, architecture

Contents

Abbreviations and Terms

5

1

Introduction

1

1.1

Overview of the Project

1

1.2

Overview of the Company

1

2

3

4

Fundamentals of Building Web Applications

2

2.1

Web Frameworks

2

2.2

Design Patterns

6

2.2.1

Fundamental Elements of Patterns

7

2.2.2

Reasons to Use Design Patterns

8

Criteria for Research

9

3.1

Criteria for Web Frameworks Research

9

3.2

Practical Guide to Research Design Patterns

Design Patterns for Maintainable Applications
4.1

4.2

4.3
5

12
14

Observer Pattern

14

4.1.1

Advantages

17

4.1.2

Disadvantages

18

Module Pattern

19

4.2.1

Module Theory

20

4.2.2

Object Literals

21

4.2.3

Advantages

22

4.2.4

Disadvantages

23

Revealing Module Pattern

23

Scalable JavaScript Web Frameworks

25

5.1

26

5.2

React
5.1.1

Virtual DOM

27

5.1.2

JavaScript XML

28

5.1.3

Data Flow

29

5.1.4

Lifecycle of the Component

29

5.1.5

Final Conclusions

30

Angular 2

31

6

7

5.2.1

Data Architecture

32

5.2.2

TypeScript

33

5.2.3

Data Flow and Components

34

5.2.4

Observables and RxJS

36

Implementation of Scalable Application Architecture

39

6.1

Angular 2 vs. React

40

6.2

Practical Architecture and Structure

41

Conclusion

References

46
47

Abbreviations and Terms

ASP.NET

Server-side web application framework made for web
development. It is developed by Microsoft.

Ajax

Stands for Asynchronous JavaScript and XML. It is the
use of the XMLHttpRequest object to communicate
with server-side scripts. It can send as well as receive
information in a variety of formats, including JSON,
XML, HTML, and even text files.

Client

Visual user interface portion of an application in the
context of web applications.

Closure

Powerful programming technique which is possible by
having an inner function that has access to the outer
(enclosing) function’s variables—scope chain.

ERP system

Enterprise Resource Planning system is a category of
business-management software typically a suite of integrated applications that an organization can use to
collect, store, manage and interpret data from many
business activities.

Git

A version control system that is used for software development and other version control tasks.

HTML5

HyperText Markup Language is Mark-up language that
is used to structure and present content on the web.

Java

General purpose programming language.

JavaScript

High level interpreted programming language.

NDA

Non Disclosure Agreement

Material Design

A design-language developed in 2014 by Google. It
makes more liberal use of grid-based layouts, responsive
animations and transitions, padding, and depth effects
such as lighting and shadows.

Open source

Development model that gives universal access to a
product and allow its redistribution.

PHP

Server-side scripting language for web development
could be also used as a general programming language.

Responsive web design

An approach while building website to provide viewing
and interaction experience across a wide range of devices with different sizes.

Routing

The process of using URLs to drive the user interface
(UI) in a web application.

Sass

A scripting language that is interpreted into Cascading
Style Sheets (CSS)

Server

Device or program that provides functionality to other
devices (client)

Static

Refers to a web design that can not adapt to viewer
needs.

DOM

The Document Object Model is a cross-platform and
language-independent application programming interface that treats an HTML document as a tree structure.

Webpack

An open-source JavaScript module bundler.

1

1

Introduction

1.1

Overview of the Project

The goal of this project is to study different web frameworks and design patterns commonly used within web frameworks. The case that is taken into consideration is an application that will be developed to one of Tieto’s customers. The application has challenging requirements and it is unique to its case. It is necessary to do research first to
decide which set of technologies to use and how to implement the building blocks of
the application. A major requirement for the application is to handle large amounts of
data without dropping the performance and maintain good customer experience. The
application is expected to be used from different locations in North America, Europe
and China. Issues such as localised languages, time zones and regional laws have to
be taken into account.
1.2

Overview of the Company

Tieto is one of the largest IT service providers in the Nordic region. It consists of over
13,000 employees in around 20 different countries. The company is involved in various
areas mostly offering their customers IT solutions and services. Tieto is heavily present
in the following areas:

•

Financial services

•

Healthcare and wellbeing

•

Retails and wholesalers

•

Forestry

•

Oil and gas

[1.]
Initially Tieto started its operations in 1968, under a different name at that time, developing IT systems for the Union Bank of Finland. During the late 1990s and the early
2000s the company experienced a huge growth and merged with many other companies to what is known today as Tieto. [1.]
Due to NDA it is not possible to write in detail about the company’s own projects or
software in the thesis.

2

2

Fundamentals of Building Web Applications

Building a web application on a large scale is an extremely demanding task. It often
requires effort to decide how the application will be built out. Applications on the scale
of Facebook, LinkedIn or YouTube have a long list of requirements and features. Questions like “which technologies are best suited for the application” or “how to structure
the codebase of the application”, are often difficult questions to answer but also important questions that define the application and its chance to succeed in the market.
With the focus on the client-side, the Frontend, of web applications there are multiple
decisions to make. Some of the major ones are choosing which libraries or frameworks
will fit best with the requirements of the system, and which design patterns will be used
to give a scalable architecture to the application and allow further development with
minimum limitations.
There are plenty of different web frameworks available like Angular 1, Ember, Backbone, React, and JQuery. The frameworks vary with many different implementations of
different patterns and features. However, when it comes to the client-side framework
they are commonly created based on JavaScript.
Design patterns in software development and architecture have been developing over
time in order to build more efficient and robust software. There are plenty of patterns
available which each solve a specific problem. Often it is important to pick and match
the patterns that support with an architecture that offer high performance, decoupled
parts to ease changing dependencies of the application and ease code re-usability
across the whole application.

2.1

Web Frameworks

In the scope of software development, a framework is a set of libraries or prewritten
code that gives certain functionalities for applications. A framework can be considered
the building base that engineers can build over. In most cases, the framework provides
the application with a certain structure. The reason behind the popularity of the framework concept is that it speeds up the development of the project. Frameworks allow
engineers to focus on solving the main problem instead of worrying about rewriting

3

features and structures which are very common in most web applications. Frameworks
provide functions and features which are usually well tested and proved to be working.
Thus, the code is reliable to be used in production level. Nowadays, most web frameworks are free of charge to use and open sourced allowing anyone to join and contribute in a way or another. [2, 8.] Typically, a developer can be part of the development
process of a framework. Contributions can be done by proposing improvements to the
core team who is responsible for the framework. Also, reviewing the code and inspecting it for bugs is helpful. Another way of contributing, is getting familiar with the framework and offering assistance to others who have the interest in using this particular
framework. [3.]
In 1990 the World Wide Web was created. The nature of the web at that time was very
static. Interactivity between the user and the website did not much exist and the process of updating the content of a website on the web took plenty of manual work. First
publishers had to edit their pages in their local environment and then to upload to the
server. [2; 2.]
All data processing and application logic was done on the server-side. The browser
was considered being only able to display content. If the user entered invalid data, it
would be sent and checked on the server. Afterwards a message was returned and the
page was re-rendered to its initial state. Things improved by allowing small processing
chores inside the browser environment. For security reasons, any execution was within
controlled area and had no access to the user’s private data and was only limited to
data within this page. The executable scripts were written in a language called JavaScript that quickly grew in popularity since it improved the experience of the user. [4.]
The years from 1990 onwards it could be considered a transition period in client-side
development. The time prepared the web to adapt to changes such as the huge increase in usage of mobile phones. As a result, a concept such as Responsive Web
Design was promoted and development of technologies such as HTML5 was accelerated in the period between 2005-2010. Another revolutionary milestone was introducing browsers that had their own full operating system. This innovation softened the line
between PCs and browsers. For instance, through Chrome or Firefox and HTML5 web
development, quality video game experiences could be effectively created right in the
browser. Today the term “web application” has become generic and interactivity is a

4

vital part of most website that has made them more complex but interesting to develop.
[5.]
The following points will highlight the main advantages of using frameworks:

•

Frameworks reduce the development time by using reusable code that was already written, tested and developed by other skilled engineers. The highest
costs in any software development project is the time. Therefore, frameworks
are beneficial financial-wise.

•

Software development may include different developers throughout its development process. Frameworks often promote a design pattern or specific architecture. These design pattern and best practices make it easier for the developers to comprehend the code and fast start working with it.

•

Frameworks make it easier for junior developers to learn design patterns and
understand the logic behind different patterns. A junior developer often has a
steeper learning curve when they use frameworks compared to learning a regular programming language. This is due to the fact that it is required to know the
framework’s own programming language as well as the specific syntax that the
framework uses.

•

The majority of frameworks are often open sourced meaning that the workload
is divided among many skilled developers. Frameworks offer a variety of features so developers do not have to start from scratch and worry about all aspects while building the project. A framework’s users get support free of charge
with common issues such as localization, internationalization or security issues
etc.

•

By code modularity frameworks support “high level” of programming. For example, carrying out simple tasks like database handling or login can be in the
framework but separated from other layers showing the business logic.

[2,11 - 13; 3, 1; 6.]
Frameworks have the positive aspects but they definitely have some negative ones as
well. Here are the most common ones:

5

•

Frameworks are built for a general purpose. Their common code is created in a
manner that it is able to process as much as possible. On the other hand, it is
not optimized specifically for a certain task and that affects the performance in
some cases.

•

To benefit from all the tools offered by the framework, it requires always the developers to invest significant time in educating themselves and have the appropriate background. Sometimes the learning curve is steeper if the developer is
moving from one framework to another (with the assumption that the second
framework is similar in size, the use of the programming language, the implementation of design patterns, and the architecture). Therefore, it always depends on the developer’s experience.

•

Over time, some frameworks tend to be stricter and do not offer flexibility in development. Choosing the right framework is a crucial decision. If the developers
decide to use the wrong framework they will find themselves required to do extra work to work around certain challenges just to proceed with their tasks. In
these cases, for the most part, it is not the framework’s mistake but the developer’s choice. Perhaps the framework was created for a different set of tasks
other than what the developer had in mind.

•

Developers have been surveyed and some have stated that building things from
the scratch give them the feeling of higher productivity and along the way they
feel more creative since they are not stuck with a certain framework or one way
of doing things. It is a personal opinion and it varies from one developer to another.

•

One of the main technical problems with frameworks is common bugs. Sometime, bug and security issues are detected while the framework is already being
used among many applications. As a result, all these applications will suffer
from the same problem. This puts the application at risk all the time. Frameworks have to be used with caution and only consider the professional ones
with a skilled community around them.

[2,12–13 ; 3,2 .]

6

Reasons to Use Frameworks
Someone could start thinking of a new web application. However, it is often timeconsuming to build web applications, which makes the idea challenging to develop further. In that case, it is smarter to spend less time developing a prototype to verify that
the idea is worth the effort. Having a prototype application is the best way to get the
reliable opinion if the final application will really succeed. In this scenario, frameworks
are typically useful as they shorten the development time. Therefore, the prototype will
be developed in a shorter time. [2, 13.] Otherwise, getting the application ready in
shorter time without consideration for future development leads to what is referred to in
the developer’s community as “Spaghetti Code”. Later it becomes a mission impossible
to maintain the codebase of the application. This is when frameworks can become very
beneficial since they offer a predefined structure that guides the developer how things
could be done.

2.2

Design Patterns

Often programmers get a feeling that the problem they are facing seems familiar. Actually they have solved it before. However, they usually decide to come up with a new
solution without realizing that they actually solved it before. Inventing the same solution
is a common problem for developers. That is why design patterns exist, to avoid this
same problem of being resolved again and again.

The aim of section 2.2 is to understand what design patterns actually mean, why they
are used, and to point out some of the common design patterns that are applicable to
JavaScript.

Architectural patterns generally focus on the end result of the development process
and the relationships between different classes and objects. Even though architectural
patterns are important they are not sufficient enough. It is recommended to have a reusable design for a system. Therefore, each building block has to be developed in a
manner that promotes re-usability and flexibility in interchanging its content. A lower
level strategy needs to be implemented. Architectural patterns are not very helpful if the
building blocks are not built properly. Thus, optimal design patterns complement a
good architectural design.

7

Architectural patterns are helpful when it comes to separation of concerns between the
model and the view. They are described further in section 3.1.1 as part of the criteria to
evaluate a web framework.

The challenge to most experienced developers is designing solutions that are problemspecific and also generic enough to handle future problems and requirements. Building
object-oriented applications is hard. However, it is even harder to have a loosely coupled reusable object-oriented application. It is always undesired to redesign solutions.
Flexibility is needed to minimise redoing the work twice. Developers always try to solve
problems by reusing previous solutions again instead of trying to solve every single
problem repeatedly. [7, 11.; 7.]

One generic way to define a pattern is the following, according to Raplh Johnson
(1994): “Each pattern describes a problem which occurs over and over again in our
environment, and then describes the core of the solution to that problem, in such a way
that you can use this solution a million times over, without ever doing it the same way
twice.” [7, 12.]

2.2.1

Fundamental Elements of Patterns

Every pattern has a name, problem, solution and consequences. Each element will be
described in this section:

•

Name: A pattern’s name is descriptive enough to tell the problem being solved,
the proposed solutions and consequences in couple of words. The name is
used for discussions between different people and in documentation. [7, 12-13.]

•

Problem: The main problem that is being solved. It generally explains what is
the issue, its context, and when to apply the pattern. Depending on the pattern,
some problems are very specific with a list of conditions that have to be present
for that particular pattern to be applicable and other patterns are more generic.
[7, 12-13.]

8

•

Solution: A proposal where pattern offers a template that can be applied in different scenarios. The solution is an abstract description of an arrangement of
components that solve the problem. [7, 12-13.]

•

Consequences: The result and the sacrifices of using the pattern are typically
discussed in this part. Since it is not often very clear which pattern is the best
when it comes to choosing one. A comparison of different patterns’ consequences helps to choose a better fit for the problem present. [7, 12-13.]

2.2.2 Reasons to Use Design Patterns
The major benefit of using design patterns is that they give a standard terminology and
get developers accustomed to certain kind of situations. Therefore, design patterns
could be considered as a common platform for software engineers. [9, 7-8; 6, 11–16.]
For instance, an observer design pattern unifies event handling to a single point per
event that notifies the observers once the event occurs.

There has been development in design patterns for a long time. They provide solutions
and best programming practises to certain common problems that are faced in the process of developing an application. In that manner, developers who have not experienced a particular problem before could make use of the design patterns that focus on
solving their problem.

Design patterns make parts of the codebase reusable and easier to integrate into other
systems. They aid developers to choose an option that makes the code reusable instead of an option that is not very flexible. As a result, design patterns support with
designing the system in the right manner faster. [8.]

9

3

Criteria for Research

Web frameworks and design patterns are considered two major tools in web development. These tools boost development time and ease the process of building large web
applications. Web frameworks and design patterns are often interconnected to each
other. Modern frameworks often adopt different design patterns in its architecture to
give best programming practises. Design patterns are applicable solely depending on
the nature of the problem encountered in the application. Therefore, experienced developers must always consider the flexibility of web frameworks and which design patterns the framework promotes. Using very strict frameworks is not recommended.
The sizes of frameworks vary just as the nature of problems faced during software development. Questions that are often asked when a new application is being built are
“Which framework to use?”, “Is this framework the best solution to my problem?”. In the
same manner, different design patterns and architectural structures each have their
own benefits only depending on the requirements of the application. This paradox of
choice, creates a need for general guidelines to help evaluate a particular framework
and design patterns to use while developing the application.

3.1

Criteria for Web Frameworks Research

Frameworks are all marketed to the developers as the best solution with many possibilities. It is extremely difficult to decide which framework is the right one to use. Especially that it sometimes occurs that a framework does not perform as promised.
Often when a framework is being considered for development a long list of features is
advertised. However, there is no general criteria to evaluate the frameworks. This
makes it difficult to decide if that particular framework will be a good choice for the application. This problem urges to compile a list of features and certain points to evaluate
a framework. The list has to contain the common features of web applications and
common concerns that most developers have. More specifically, it has to include some
of the functionalities that promote rapid development and lower the overall time of development, testing and maintenance. This generic list includes technical and nontechnical points which should guide developers to the important parts in any framework. Each point will be discussed in details in the sections below.

10

Architectural Patterns
Architectural patterns can be defined as solutions which can be reapplied in commonly
occurring challenges in software design. They are similar to design patterns but on a
higher level. Every complex large system gets deconstructed on different levels to simplify its complexity. The system gets deconstructed on the high level using architectural
patterns. In addition, it also gets deconstructed on lower level using design patterns.
Design patterns are discussed in section 2.2 to illustrate how they work on the low level
code. [10.]
Architectural patterns are tools that are related to larger portions, or components, of an
application. Architectural patterns also are related to the global properties of the system. As a result, it is essential for a framework to adopt some architectural pattern.
These patterns enforce a form of structure that increase scalability, reusability, and
maintainability of the system. Architectural patterns like MVC (Model-View-Controller),
MVVM (Model-View-ViewModel) and MVP (Model-View-Presenter) are currently used
by many developers for the front-end. It depends on the case of the application which
pattern would be the best choice. Therefore, all the three patterns will be briefly explained to illustrate their key differences. [10.]
In MVC, the model part manages the data for an application. They are mainly responsible to represent the data that an application needs. The Views are the visual representations of the model’s current state. A view looks after any model changes and updates itself accordingly. The controllers are considered as the middle layer between the
models and the views. The controllers are taking care of updating the model if the user
manipulates the view. Typically, all the business logic is stored in the controllers. [10.]
In MVP, the P represents a presenter. This component holds the business logic of the
user interface for the view. Invocations from the view are taken care of by the presenter
which typically passes it to an interface. This gives the chance to mock the view in unit
tests. [10.]
Since the MVP pattern increases the testability of the application, it is often used in the
enterprise-level applications. MVVM pattern is based on MVC and MVP. It tries to
stress clearly the separation of the user-interface from the business logic in an application. [10.]

11

Frameworks that adopt an architectural pattern are recommended. General criteria to
evaluate web frameworks are to have a framework with an architectural pattern that is
flexible enough to allow the development of the application. The pattern must allow on
a high-level maximum reusability of the code, enforcement of the separation of concern
principle, and simplification of the application.
License
Most frameworks are distributed under licenses that give the developer some freedom
to use it for commercial applications. But then there are some which are not very generous. The worst scenario that can occur to one is developing the whole application
and find out that the license does not allow the developer to distribute it commercially.
It is highly advised to read the license terms properly before starting the development.
[11.]
Learning Curve
The flexibility offered by frameworks vary tremendously. Some frameworks are loose
when it comes to naming conventions, directory structure etc. However, other frameworks could be so strict that they keep throwing errors at the smallest of problems.
Programmers generally try to follow the general conventions when a feature gets implemented. However, some may just decide to implement it their way. It is advised to
choose a framework that requires the smallest possible learning curve. However, a big
learning curve can be justified if the framework is offering a lot of positive features to
the application.
Unit Tests
Unit testing is a crucial part of professional development. Unit tests are the way for the
programmers to validate their work. Unit tests are used to ensure that the source code
of single component/unit is functioning properly in the application. Frameworks that
allow unit tests are considered better and some frameworks offer the possibility to write
custom tests besides the basic tests to verify the reliability of the vital parts of the application. [12, 7-8.]

12

Documentation
A well-documented framework will have a plenty of examples, sample code, articles,
tutorials and snippets. The documentation itself has to be clear and detailed enough
that early users and evangelists understand how to use the framework. Documentation
is the main factor for the success of a framework. Choosing a framework with poor
documentation will lead to problems with understanding how to use each feature. [13.]
Community
Regardless of having a well-documented framework, problems always appear over
time. Seeking assistance from the community behind that particular framework is the
usual way to solve these problems. There have been two extremes in the development
world. Some communities are very aggressive towards new users and tend to be tough
on them while others are cheerfully welcoming new users and guiding them. Therefore,
choosing a framework with a friendly community is preferred in the long run. Communities are often determining whether a framework will succeed or fail.
Browser Support
It is extremely important to verify that the chosen framework supports the browser requirements given by the project. Sometimes, clients request support to an old version
of a particular browser. Internet Explorer 8 is an example. The framework must be
checked that its features are compatible with the required browsers.

3.2

Practical Guide to Research Design Patterns

Design patterns are always made to a specific problem with specific circumstances. In
that sense, it is difficult to come up with some generic criteria to evaluate different design patterns as it was the case with web frameworks. Every time new code is written it
has a different challenge. However, different factors have been taken into consideration
while choosing which design patterns are going to be studied further in this thesis.
How applicable a design pattern to JavaScript has been one factor. As stated, JavaScript is the dominant programming language for client-side development. How much a

13

design pattern is actually being used has been considered too. The aim was to find
design patterns which are solving the most common problems. Preferably the design
patterns would be also as generic as possible. Generally, the design patterns were
researched based on the challenges that were encountered while developing the case
study application.
The general approach to find an applicable design pattern:
•

First, the problem needs to be identified.

•

Second. a research is done to find the solution.

•

In case of finding different alternatives, a comparison of each solution is needed. The consequences of each solution and its trade-offs have to be considered.

•

Third, the solution has to be integrated with the code that had the problem.

•

Fourth, a verification that the problem has been resolved is needed to ensure
that the solution worked.

[9, 8.]

14

4

Design Patterns for Maintainable Applications

The design patterns described in this chapter are the Observer Pattern, Module Pattern
and revealing module Pattern. Practical examples and code snippets of the chosen
design patterns are listed. The aim of this chapter is to give a practical description of
how these design patterns are implemented in different circumstances. Reasons to use
each pattern and when they are applicable are described as well.
The selection of the design patterns was made based on the most common challenges
encountered while developing the case study application in Tieto. However, the selected patterns had to be as generic and as common as possible so that they are applicable to wide variety of large web applications.
The case study application had an interactive nature with large number of events occurring. Often, one event, in the context of web applications, had multiple reactions in
the background and the state of the application had to be updated constantly. Many
parts of the application were used in multiple areas across the entire application.
Therefore, reusable modular components and reactive programming style were necessary to be implemented.
As one criterion, the selected design patterns had to be easily integrated with the
frameworks described in chapter 5.

4.1

Observer Pattern

The Observer pattern gives a model where several objects, known as observers, are
able to subscribe to a certain event and get a notice every time this particular event
takes place. That subscribe-able model is often in a form of an object, and could be
referred to as a subject, that maintains a list of all its observers that depend on it. This
pattern is one of the building blocks of what is to referred to as event-driven programming in JavaScript and other programming languages. [ 10.; 13.]
In the case where a subject has to notify its observers about a certain event happening,
it just has to broadcast a notification to its observers with information related to the
event. [15, 215.] When an observer does not need to be notified of these events by its
subject anymore, the subject may delete that particular observer from its list of observ-

15

ers and this way the subject does not notify that observer of any future events. An Observer also may unsubscribe from a subject. [ 15, 219-220.]

Figure 1. Illustration of the connection between the subject and observers. Copied from
Harmes [15, 216.]
In reference to Figure 1, the relationship between a subject and observers is one-tomany in terms of its dependencies. The Observer design pattern comes hand in hand
with a good object-oriented design and it gives the opportunity to loose coupling between different objects in the code base that need to interact together. [15, 215.]
In order to be able to get a broader sense of the use cases of that pattern, a general
definition of the pattern has been given in a book named, Design patterns: Elements of
reusable Object-Oriented Software: “One or more observers are interested in the state
of a subject and register their interest with the subject by attaching themselves. When
something changes in our subject that the observer may be interested in, a notify
message is sent which calls the update method in each observer. When the observer is
no longer interested in the subject's state, they can simply detach themselves.” [ 10.]
It is very common to build web apps that contain multiple event handlers. Event handlers are basically functions that listen to a certain event and wait until it gets notified
when that particular event has happened. [10.] The notification that is delivered to the
event handlers usually contains details about that particular event. For instance, a
“click” event is fired once an element on the page has been clicked by the user. The
event may return information like the “id” of that element to the event handler function
listening to it.

16

With reference to the event-handler and the event paradigm in JavaScript, the paradigm could be considered as a manifestation of the Observer pattern. Publication/Subscription or Pub/Sub are used to refer to design patterns that are similar to the
Observer pattern. [15, 216.]
In the client-side world where JavaScript is mostly used, the Observer pattern is commonly implemented in form of Publish/Subscribe pattern. Even though this pattern is
very similar to Observer pattern, there are few differences among both of these patterns. The Observer pattern works in a manner where the observer object needs to
listen to events from the subject. The observer needs to subscribe to that particular
subject. In contrast to that, the Publish/Subscribe pattern works in a way where there is
a specific topic or event channel that is found between the publisher and subscriber.
Publisher fires the events and the subscriber gets the information that the event occurs.
This implementation allows custom arguments to be available to the subscriber by giving the possibility to the code to define specific events which are specific to that particular application. [14; 10.] The main difference is that the Publish/Subscribe pattern allows any subscriber that have a valid event handler to listen to a publisher and receive
the events broadcasted. This idea removes dependencies between both the subscriber
and the publisher therefore making them less coupled.
The code snippet in Listing 1 is a simple example of creating a Publish/Subscribe model:

17

//simple new message handler
//Count storage for the amount of messages received
let messageCounter = 0;
// "newMessage" will be the name to initialise subscribers which will listen for
that kind of event
// Render a prevew of new messages
let subsriberA = subscribe("newMessage", function (header, body) {
//logs to the console
console.log("A new message was received ", header);
// Use the data that was passed from our subject
// to display a message preview to the user
$(".messageSender").html(body.sender);
$(".messagePreview").html(body.content);
});
// Here's another subscriber using the same data to perform
// a different task.
// Update the counter displaying the number of new
// messages received via the publisher
let subscriberB = subscribe("newMessage", function (header, body) {
$('.newMessageCounter').html(++messageCounter);
});
publish("newMessage", [{
header: "hello@google.com",
body: "Hey there! How are you doing today?"
}]);
// We could then at a later point unsubscribe our subscribers
// from receiving any new topic notifications as follows:
// unsubscribe( subscriberA );
//or
// unsubscribe( subscriberB );

	

Listing 1. Creating subscribers and publishers [10.]
4.1.1

Advantages

In a scenario where a web application contains a large number of events occurring,
following the Observer pattern is a good way to keep the application functioning without
cutting the performance. It is typical for any application to have hundreds if not thousands of events happening in one session. Therefore, having observable objects to
listen to the actions through one event listener and then send all the data to all its subscribers. As a result, there is no need to have multiple new listeners to that same ele-

18

ments which affect the performance of the application tremendously and makes the
application unmaintainable. [15, 223.]
Another benefit for using that pattern is that it encourages developers to consider the
relationships between different parts of their application. It gives a chance to find the
layers that contain direct relationships that are getting strongly coupled and replace
them with a group of subjects and observers. As a result, the application will be broken
down into smaller, more maintainable, loosely coupled parts which have the potential to
be reused in multiple areas in the codebase. [15, 223; 10.]

4.1.2

Disadvantages

Problems that are associated with the Observer pattern actually are related to its main
advantages and the manner it is set up. Since different areas of the application are
loosely decoupled, ensuring the quality of different parts of the application becomes
difficult as we can not assure separately that each part is working the way it is intended
to work. [10.]
A scenario that elaborates the problem is as follows. A publisher with one or more of its
subscribers are listening to it. It is safe to always make the assumption that at least one
of them is listening. The subscriber that is supposed to perform a function fails or
crashes for any reason. At this point, the publisher will have no way of knowing that this
has happened since they are decoupled and basically blind to each other.
Another side-effect of applying the Observer pattern to an application, is that setting up
these observable objects is costly in terms of application load time. Therefore, having a
big number of observable objects with different observers will slow down the application. [15, 223.]
The Observer or Pub/Sub patterns may come with costly drawbacks in some cases.
Therefore, they should be used with some caution. One way around the application
load time issue is to use a technique called “Lazy loading”. Lazy loading works in a way
that it only loads parts of the application when needed. This way only the necessary
observables would be initialised and not all of them at the same time.

19

The Observer pattern may not be the absolute best solution to all problems. However,
this pattern definitely could be considered as one of the best tools when it comes to
designing decoupled systems. It is recommended for any developer who writes JavaScript application to consider implementing the Observer pattern or some variation of it.

4.2

Module Pattern

The module pattern is a commonly used pattern that promotes state, privacy and code
organization which are all possible by using closures. The module pattern gives a platform to wrap public and private methods together with variables. It ensures that no
code get leaked into the global scope and run over some other code which could be
written by another programmer. The pattern functions in a manner that it provides only
a public API and everything else is kept privately in the component using closures. [10.]
This implementation gives a decent solution to protect the core logic of each component while assembling different parts of the application together. Thus, only an interface is exposed to the outside world. There are multiple ways to apply this implementation in practise and those are defined in details in this chapter.
In JavaScript, the privacy of variables does not exist as the language does not have
any access modifiers. As a result, variables in JavaScript can not be declared as public
or private like in more traditional programming languages like Java. To have this idea
implemented in JavaScript, function scope is used so that variables in a function are
only accessible within the closing braces of that function. Closure is what makes it possible in JavaScript to implement the module pattern since variables and functions that
are declared are only available within that module which acts as a large function. The
public interface becomes available by returning objects outside the function which become usable by other modules.
It is essential to understand the theory behind modules to be able to correctly implement the module pattern and benefit from its advantages. It is also essential to understand object literals since the module pattern is partially based on them.

20

4.2.1

Module Theory

Modules are often used in most current architectures of web applications that are being
developed today. Modules in that sense represent integral parts of any application’s
codebase and usually they have a single purpose in the whole application. Often modules are easily interchangeable. If modules are built in the right manner, they are self
contained in that way that could be reused even in another application if they require a
similar module. [10.]
A module may have its dependencies defined which allows that module to have its dependencies fetched automatically right away. From scalability point of view, implementing modules in that manner with their dependencies defined makes it much easier to
keep track of the different dependencies and avoid manually loading all the modules or
including a script tags to manage all these various dependencies. [10 ; 8.]
Facebook is a good example to explain modules. Facebook’s news feed, chat room,
notifications, and events list are modules which are independent and do not have any
dependencies on other parts of the application. However, depending on how demanding the logic of a module is, it may require very complex implementation. It is common
to create more of sub-modules that act as a dependency for all other parts of that particular module. The module of Facebook’s chatroom has probably a sub-module like
emoticons which are shared also with the news feed module.
Within the module architecture, a module typically has a very limited information about
what is happening in the rest of the application. Therefore, this responsibility needs to
be handled by another part. A good option for responsibilities delegation is using other
patterns. A module has to take responsibility of sending announcements to the application when something of interest occurs and the module should not take into consideration the state of the other modules. This way it becomes easy to add or remove modules without the risk of the rest of the application failing.
Loose coupling is a requirement to make the modular design to be functional. It allows
the modules to be maintainable by removing some dependencies if they are not needed. Therefore, modules should not be relying on each other in order to work as intended. It becomes relatively easy to track the changes that may occur to the application
when one part is changed. [8.]

21

4.2.2

Object Literals

With reference to the object literal notation, an object could be defined as “a set of
comma-separated name/value pairs enclosed in curly braces ({})”. [16.]
var person = {
key: value,
firstName: "John",
lastName: "Doe",
age: 50,
functionkey: function () {
//function's code goes here
},
eyeColor: "blue"
};	

Listing 2. Object person
As Listing 2 illustrates, names inside the object could be either identifiers as keys, or
strings as values. Each key/value pair is followed by a comma unless it is the last pair
to be defined in the object.
Listing 3 is a simple example to show how objects could assist with implementing a
module and keep the code private and only allow one public method. The code is written with Ecmascript 6 which is newer version of JavaScript.

22

let myGradesCalculator = ( () => {
// Keep this variable private inside this closure scope
let myGrades = [93, 95, 88, 0, 55, 91];
// Expose these functions via an interface while hiding
// the implementation of the module within the function() block
return {
failing:() => {
let failingGrades = myGrades.filter( (item) => {
return item < 70;
});
return 'You failed ' + failingGrades.length + ' times.';
},
avg: () => {
let total = myGrades.reduce((accumulator, item) => {
return accumulator + item;
}, 0);
}

return 'Your average grade is ' + total / myGrades.length + '.';

}
})();
myGradesCalculator.failing(); // logs 'You failed 2 times.'	

Listing 3. myGradesCalculator module
Similarities could be found among the usage of object literals and other methods such
as “immediately-invoked functions “. Main difference is that modules implemented with
object-literals do not return functions but an object is returned instead.

4.2.3

Advantages

With reference to JavaScript’s lack of ability to declare public and private variables and
functions, the module pattern assists with organizing the code that grows when an application is scaled up. Whether the module is used with JavaScript or other languages,
the pattern promotes self-contained implementations which are highly beneficial. Thus,
it makes major parts of the system loosely decoupled. Each module push only one object to the global namespace, or the global state, which keeps the global namespace
much cleaner. Modules interact with each other through the “main” method or a facade.
Having less clutter in the global namespace reduces the possibilities that other libraries
and frameworks collide with the code of the application. [16; 9.]

23

4.2.4

Disadvantages

The pattern functions in a way that it only exposes a public interface. As a result, the
module’s behaviour becomes a mystery which is difficult to unit test. The modules often
do not offer any testing interface that could allow testing its sub-modules. When modules are used they should just be trusted that they behave the way they are intended to
do. Unless the inner code of the module is tested, there is no other way to verify that
the module functions in special corner cases of the application. [10.]
The downside of module patterns could partially be overcome with changing the implementation of the regular module pattern by using objects literals or immediatelyinvoked functions. [17.]

4.3

Revealing Module Pattern

The Revealing Module pattern was created as a response to the frustration of using
module pattern. Since programmers were forced to have the name of the main object
repeated every time calling public function from another function. Also accessing public
variable names was needed. This fact violated one of the basic fundamentals of Software engineering which is “Don’t Repeat Yourself” or DRY as some may refer to it.
Programmer Christian Heilmann decided to put effort into updating the module pattern.
His implementation worked in a way that all the functions and variables, which are in
the private scope, must be defined. Afterwards, an anonymous object is returned with
pointers to these private methods and variables that are needed to be revealed to rest
of the application. [17.]
Listing 4 shows how to re-implement the same module of “myGradesCalculator” but
using the revealing module pattern.

24

let myGradesCalculator = ( ()

=> {

// Keep this variable private inside this closure scope
let myGrades = [93, 95, 88, 0, 55, 91];
let failing = () => {
let failingGrades = myGrades.filter( (item) => {
return item < 70;
});
};

return 'You failed ' + failingGrades.length + ' times.';

let avg = () => {
let total = myGrades.reduce( (accumulator, item) => {
return accumulator + item;
}, 0);
return'Your average grade is ' + total / myGrades.length + '.';
};
// Explicitly reveal public pointers to the private functions
// that we want to reveal publicly
return {
average: avg,
failing: failing
}
})();
myGradesCalculator.failing(); // will log 'You failed 2 times.'
myGradesCalculator.average(); // will log 'Your average grade is
70.33333333333333.'	

Listing 4. Another implementation of myGradesCalculator
The Revealing Module pattern must be used with caution. If where all the methods are
exposed, then the module does not become very stable anymore. Methods which are
created based on this design may be more fragile in comparison to the other patterns
but it also partially solves the drawbacks of the other patterns. Depending on the requirement of the system and the environment, the revealing module pattern may be
very helpful. On the other hand, it could be the main cause to not have a very robust
system, if it is not implemented right.

25

5

Scalable JavaScript Web Frameworks

In this chapter, two JavaScript web frameworks will be analysed in detail. These two
frameworks are React from Facebook and Angular 2 from Google. The analysis will
give a technical overview of the different functionalities and technologies. The major
benefits and drawbacks of these frameworks are described as well.

There are multiple reasons why these two frameworks are chosen for this analysis:

•

Both frameworks promote solid architecture patterns and provide excellent documentation, have a relatively acceptable learning curve, and are supported by
majority of browsers and their older versions. Thus, they fulfil all the criteria
specified in section 3.1.

•

At the time of conducting this study, these two frameworks were the most widely used by professional developers to build web applications on a big scale. As
a result, they have huge communities around them both. Even though Angular
2 is in release candidate stage currently, it has already a reasonably big community and it is expected to grow even bigger once developers upgrade from
Angular 1.

•

Both of these frameworks have big corporations working on developing them
further, thus making the frameworks more reliable since they will be supported
for longer period of time by their sponsors.

•

Angular 2 and React both promote component-based development. Components design is basically an implementation of the module pattern. Componentbased development leads to designing the architecture of the application in a
manner that makes the code of the application both reusable and loosely coupled.

The aim of this chapter is to give a practical understanding and an example of using a
web framework that is built to develop large-scale web applications. The aim is also to
give a general idea what kind of features such frameworks offer and how in practice
they could boost development time.

26

5.1

React

React was released in 2013 by Facebook and it is generally taking a different approach
compared to Ember and Angular 1 which often are named MVC client-side frameworks. React does not precisely fit under the MVC category. It is being marketed as
more of the V or the view part in MVC. The rest of the needed parts of the pattern are
flexible. Often Flux or Redux architectures is used to fill out the needed parts. Examples of applications using React are Facebook, Instagram, BBC, and Netflix. [18, 5-6.]

Developing a web application in the early days followed a certain process which was
the only possible way at the time. First a request from the application would be sent to
the server and then the server would send back the content of the full page. This was
considered a very simple process from a technical point view since it did not include
any events occurring in the browser due to interactivity from the user. [18,18]
This have made languages like PHP popular since it allows server-side app development in an easy manner. Creating functional components in a language like PHP is a
simple task. Therefore, many developers have written different PHP components that
were easy to reuse code and could be implemented in other applications as well. [18,
20.]
However, this process was a fundamental step to create a good experience for the
user of the application. Every single time a new action was taken, a new request to the
server had to be sent and afterwards get a response sent back. In addition, data processing on the server erased the clientstate that has been created in the application.
[19, 16.]
With the goal of making a better experience for the user, developers started to write
different libraries to assist with loading applications in the browser using JavaScript.
These libraries had different styles of manipulating the DOM from simple HTML templates systems to other systems that controlled the whole application. As a result, this
environment created a state of instability as the applications depending on such libraries have scaled up. It became very difficult to control all different events which made it
much more difficult to control in comparison to the PHP style of development. [18, 22.]

27

Development of React started with purpose to take the PHP’s style to load the whole
page on the client side applications. Basically React could be considered a “state machine” assisting the developer to deal with the issue of the changing state. It solves this
problem by focusing on a very narrow scope. It only cares about updating the DOM
and responding to events. [19, 19.]

5.1.1

Virtual DOM

Features such as AJAX, routing, storage or data-structures are not included in React.
This makes React not a Model-View-Controller framework but more like the V part in
the MVC architecture. Therefore, React is very flexible and has the ability to play along
a big variety of systems. React is commonly used in other MVC frameworks as well to
render the views. Every time the page is reloaded when an event occurs, the process
is extremely slow with JavaScript. This is because the DOM is trying to read the page
and update its content. However, React offers a very powerful concept called virtual
DOM. React only have to update the DOM and check the changes from its virtual
DOM. This feature is one of the main reasons why React is very quick when it comes
to performance in comparison to other frameworks. [20, 41 ; 18, 20.]
The virtual DOM works in a manner where it takes the state of the DOM and translates
it into virtual representation using a render functions. Once a state-change has occurred, these functions are triggered again. The triggered functions find a new virtual
representation of the page that is equivalent to the real page after the state-change.
Instantly the virtual DOM is updated in alignment with the necessary changes. These
changes are applied to the actual DOM showing the new view. This implementation
was criticised when it was first introduced.
The criticism was based on the assumption that it would take a longer time in comparison to the usual JavaScript approach of modifying every element on needed basis.
Nevertheless, what happens in React behind the scenes is that it does exactly the
same thing as it was being criticised for. However, what makes it very efficient is the
algorithm which finds the different parts between the current and the previous versions
of the virtual DOM. Based on the results coming from this algorithm, React renders the
minimum amount of updates needed to the DOM. As a result, React offers a high performance since it avoids unnecessary DOM manipulations which is one of the main

28

reasons behind poor performance for any JavaScript based library/framework. [19, 36 ;
21.]
The main problem that React has been aiming to solve is the chain of state-changes.
Having a big scale web application built on the client side gives a high chance that one
interaction leads to an update which triggers a different event leading to a third update.
Handling these updates and batching them properly must be taken into account. Otherwise, the performance of the whole application starts to drop. React’s virtual DOM
minimises these problems by taking only necessary actions in one step. As a result, it
makes the process of maintaining the application easier. In situations where a state
has changed because a user has clicked a button or an external event have occurred,
the developer needs to only let React know that the state has experienced a change.
At that point React takes control and automatically updates the rest depending states.
React uses one event handler for the whole application and passes all the occurring
events to that particular event handler. This technique boosts React’s performance.

5.1.2

JavaScript XML

JavaScript XML is often referred to as “JSX”. The main purpose of the components in
React is to implement one of the programming principles called the separation of concerns. The components are not used for creating templates or for displaying logic as
components in other libraries and frameworks are used for. A fundamental idea in React is that the mark-up language and the scripting code are tied together. This way
while building the mark-up for the application, all the expressive power of JavaScript
will be available to support it. [22.]
React gives a high level API to generate the virtual DOM. However, developers might
experience problems in events where complex structures are being generated. This is
where the use of an intermediate format becomes a smart solution. Facebook’s JSX is
one common format that is being used in React. JSX is a superset of JavaScript that
gives you the possibility to mix syntax similar to XML and JavaScript. It is used to construct the mark-up inside React’s components. The API given by React is used to serve
this purpose but using JSX instead makes the components more readable and therefore more maintainable. [19, 53-60.]

29

It is common that JSX syntax is odd to many developers who have never used it before. The fact that the mark-up is being written within JavaScript looks confusing at the
first sight. However, there are many benefits of using JSX and it becomes very logical
once developers get familiar with it. Some of the benefits are:
•

It provides an easy way to show the structure of the application.

•

It gives a layer of abstraction to create a React Element.

•

It puts all the code and the markup related tightly close to each other.

•

It is plain JavaScript so no new syntax need to be learnt.

•

It makes the markup easier to read and understand.

[21;20.]

5.1.3

Data Flow

React makes a paradigm shift from the usual way of building applications and puts
some interesting concepts under the spotlight. JSX is one of these paradigm shifts.
Especially, that the HTML mark-up and the JavaScript code are being used together at
the same place. The methods used for data flow in React are another unusual concept
to many developers as well. That’s why, these methods may not be very clear at the
first glance. [18, 69 – 73 ; 19, 65 - 69.]
The data flows only in one direction between all React’s components. Data always
comes from the parent component to the child component. The fact that data flows in
this manner makes the components easy to understand. Therefore, React’s components have an easily predictable state. Every component uses props, “properties”, as a
way to pass data from the parent to the child. A typical scenario will be that there is a
component that takes props from its parent and renders the view. When that property
changes at a top-level component, it is propagated down the component-tree. Therefore, the component used earlier will be re-rendered since it was using that property.
Components can also have internal state which is different from props. It can be considered a presentation of how the data of a component may look like anytime. The
state is modified only internally within its component. [19, 68-80; 22.]
5.1.4

Lifecycle of the Component

A React component is a state machine and in all scenarios it should return the same
output for a given input. In the lifecycle of the component, there are multiple changes in

30

its props, in its state and even in its DOM representation. React gives lifecycle hooks
for its components to be able to react accordingly to different changes throughout its
stages starting from the creation and the lifetime to the teardown. [23.]
Examples of different lifecycle hooks are briefly described below:
•

Instantiation: First stage in a component lifecycle where a new component is
created and rendered for the first time. Different methods are available to control the state of the component when it is created. “getDefaultProps”, “getInitialState”, “componentWillMount” and “render” are all examples of the available
methods in this phase. [18, 50-54.; 20, 80-82.]

•

Lifetime: Once the component is rendered for the first time, other methods become available to give further flexibility to control the component. Examples are
“componentWillReceiveProps” and “componentWillUpdate” that allow manipulation of the state of the component. [18, 56-59.; 20, 123-127.]

•

Teardown & clean-up: This life cycle occurs once the component is not needed
any more and need to be removed from the view. Method “componentWillUnmount” will run right before the component is being removed and gives the opportunity to clean up or send data if needed. [18, 59-62.]

React’s methods to manage the component’s lifecycle are well-designed. Since components are considered state machines, they are made to give a stable output and
predictable mark-up at each stage of their lifecycle. Since the parent components pass
on props to their children and these children render their own children components, it is
rare to have a component that lives in an isolated environment. Caution is needed
when designing how the data will flow through the application.

5.1.5

Final Conclusions

React is relatively easy to learn. Developers do not experience difficult learning curve.
React contains less of what is commonly known as “domain-specific language”. [17, 6.]
Thus, developers who have prior experience with JavaScript will have an easy time to
understand how it works. With a component-based approach, React maximizes the
code reusability. Each component represents a single part of the user interface, like a
form element, a search button or a page title. [18, 79-81.]

31

When it comes to performance and speed, React is considered extremely fast. The
implementation of a virtual DOM takes credit for React’s speed. The virtual DOM is a
local simplified copy of HTML’s DOM that React stores. Instead of doing the “real”
DOM operations which often slow down the user experience. React allows developers
to do all the operations needed inside this abstract DOM instead of the “real” DOM.
[19,81-82.]

React also supports server-side rendering. This contributes to high performance and
solves Search Engine Optimization problems which are experienced with frameworks
that do not support this feature. The way it is implemented includes React having the
first render done on the server. Afterwards, all updates taking place in the UI occur on
the client-side. [18,152-158.]
React Native is an exclusive advantage that comes with React. React Native gives
possibility to create a mobile application on both iOS and Android using the same components used to create the web application. [18, 28–30.]
5.2

Angular 2

Angular 2 is a newer version of the Angular web framework that is being developed by
Google. There are two major versions of Angular. Angular 1 was the first known stable
version of Angular and it has been used in production already by big companies such
as Vevo and YouTube for PS3. Angular 2, on the other hand, is the newer release from
Google. Angular 2 was in Release Candidate stage in the time of writing. Angular 2 has
very different features and solely for marketing purposes it was named “Angular 2” but
the whole layout of the framework has been reformed. Therefore, Angular 1 and Angular 2 have be addressed separately and considered to be different frameworks. [24.]

The background of Angular started with Angular 1 being first released in 2009. But it is
considered more recent since it was more popular in year 2012. In reference to Figure
2, Angular 1 had a huge interest over the recent years. However, the numbers on Figure 2. are not giving the right impression since these are not referring to the percentage
of the usage in the market. Instead, the numbers are referring to the amount of times it
was searched on Google’s search engine during the time period of 2009-2015. [25, 3537.]

32

Figure 2. Comparison of search counts between Angular, Ember and React. Copied
from Pronschinske [29.]
Angular 2 is still a work in-progress, as the time of conducting this study. The framework is expected to be released in the last quarter of 2016. The framework is already
mature enough to build a stable web application as it is in Release Candidate phase
and no major changes are expected. It is expected to have a similar popularity as Angular 1 had. Angular 2 has already a growing community around it. An active community is definitely pushing the framework forward with creating different plugins and libraries to be compatible with it. Angular 2 applications are commonly developed with a
programming language called TypeScript but also it is possible to write Angular 2 applications in JavaScript and Dart.

This analysis will focus on the parts which are unique to Angular 2 in comparison to
other web frameworks. Certain technologies and patterns that Angular 2 uses will be
described in details. The main aim of this section is to give a practical and a technical
overview of how Angular 2 works and what to expect as a developer while considering
using it.

5.2.1

Data Architecture

Angular 2 does not enforce any particular pattern or a technology stack which makes
the architecture of the framework flexible. Angular 2 makes it easier to adopt different
architectures without having the performance suffering. This is due to the fact that eve-

33

ry application has its own requirements and challenges and therefore one solution that
works well in some applications may not work for others. [26, 152.] However, freedom
comes with a cost. Making decisions with many options creates a paradox of choice
problem to developers, especially the inexperienced ones. Therefore, different alternatives need to be considered before making a choice.

Some of the possible patterns and implementations that could be used together with
Angular 2 include the following:

•

Flux: Promotes a unidirectional data-flow. It has three major parts. Stores which
hold the data together, Views that actually fetches what is rendered in the store,
and Actions which change the data that is contained in the store.

•

Observables: Each observable gives what is called a stream of data. These
streams could be subscribed to and then call different methods to react to the
changes announced.

•

Redux: Is one implementation that has been inspired by Flux. It is very similar
but contains one more major part, a reducer. A reducer is group of pure functions that belong to a specific action.

[26, 152-153.]

5.2.2

TypeScript

TypeScript is the recommended language to use while building an application with Angular 2. The Angular’s core team at Google decided to integrate it with the framework
and the codebase of Angular 2 is written in TypeScript. The language is primarily developed by Microsoft.
Typescript is considered a superset of JavaScript but a more similar version to programming language Java as it gives the possibility to define new types.
Figure 3 demonstrates how Typescript is a superset of both ES6 and ES5 versions of
JavaScript.

34

Figure 3. Typescript in relation to different JavaScript versions
The fact that types are available over the generic “var” gives more opportunities to
have more support in terms of tools. Developers who are more familiar with loosely
typed languages like JavaScript may not prefer the idea at the first glance. However, in
practise a typed language increases the productivity of developers. TypeScript offers a
static code analyser so while code is being inserted the editor is able to give guidance
by suggesting functions parameters, available objects and methods. It also acts as a
safety net. In events like inserting a wrong value in the code that does not match its
expected type, the editor will be able to highlight the mistake and what is the correct
type to insert.
In reference to types, TypeScript allows created custom types. In a scenario where the
application is using a third-party library that is built in JavaScript. It is possible to create
specific type declarations for that library. The TypeScript community is very active so
the declarations for most JavaScript libraries are available. TypeScript is easily compiled back to basic JavaScript and therefore it is supported by all browsers.
5.2.3

Data Flow and Components

Component is a key concept in Angular 2. An application written with Angular 2 is basically one high-level component which holds its parts together in other components. In
other words, an application is built by a tree of components. [26, 70.]
To demonstrate the concept in a more practical way, the following scenario could be
considered. Building a dashboard that has a basic functionality. The dashboard will

35

have two views, sales report and orders. The dashboard also has a navigation bar
which is in a form of an independent component. Sales report have filters componentss
and list-items components while orders also has a list-items component and Itemdetails component.

Figure 4. Components tree of a regular dashboard.
Figure 4 shows how an application could consist of different components and demonstrates how components can be used in multiple parts of the application such as “listitems” component. Each of these components contains the logic that belongs only to
that particular part of the application.
Listing 5 is a very simple example of a component declaration.
import { Component, OnInit } from '@angular/core';
@Component({
selector: 'dashboard',
templateUrl: 'name.component.html'
})
export class DashboardComponent implements OnInit {
constructor() { } // Often used to inject dependencies
ngOnInit() { } // one life cycle method that is trigged once the
component was initialized.
}

Listing 5. Dashboard component

36

The data flows from the top of the hierarchy to the bottom and vice-versa. There are
two decorators available for this purpose. @Input inside a child component will allow its
parent component to bind to a variable and pass data to it.

Figure 5. Components tree where the data flows from the bottom children to the top
parent.
It is also possible for the children component to send data back to its parents as shown
in Figure 5. @Output is another decorator that takes care of outputting the data to its
parent component.
5.2.4

Observables and RxJS

This data architecture pattern is a practical implementation of the Observer design pattern. Observables heavily depend on reactive programming paradigm. A popular reactive streams library for JavaScript is RxJS that gives handy methods for calling different
functions on streams of data. Observables are often used with RxJS as its relatively
easy to work with it and Angular 2. [26, 155 – 156.]
The idea behind Observables has been explained before when the Observer design
pattern was described. A code sample implementing a simple observable will be used
to show how Observables are implemented in Angular 2.

37

import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
@Injectable()
export class EventsService {
// Observable string sources
private eventAnnouncedSource = new Subject<string>();
private eventConfirmedSource = new Subject<string>();
// Observable string streams
eventAnnounced$ = this.eventAnnouncedSource.asObservable();
eventConfirmed$ = this.eventConfirmedSource.asObservable();
// Service message commands
announceEvent(event: string) {
this.eventAnnouncedSource.next(event);
}
confirmEvent(sponsor: string) {
this.eventConfirmedSource.next(sponsor);
}
}

Listing 6. Angular 2 service with two subjects that could be subscribed to.
Listing 6 demonstrates how a simple Observable may look like. Two Subjects were
created, “eventAnouncedSource” and “eventConfirmedSourced”. Now these subjects
will keep a list of different events and different sponsors as well. Now it becomes easier
to subscribe to the Subjects and receive the data streams. The “EventService” can be
used by other Angular components. For instance, “EventControlComponent”, in the
code snippet found in Listing 7, is using it on a high level.
import { Component } from '@angular/core';
import { EventsService } from './';
@Component({
selector: 'event-control',
providers: [EventsService]
})
export class EventControlComponent {
sponsers = ['HS', 'Redbull', 'Helsinki Kaupunki'];
history: string[] = [];
events = ['Karaoke night',
'Midnight run',
'Art Gallery'];
nextevent = 0;
constructor(private eventsService: EventsService) {
eventsService.eventConfirmed$.subscribe(
sponsor => {
this.history.push(`${sponsor} confirmed the event`);
});
}
announce() {

38

let event = this.events[this.nextevent++];
this.eventsService.announceEvent(event);
this.history.push(`event "${event}" announced`);
if (this.nextevent >= this.events.length) { this.nextevent =
0; }
}

}

Listing 7. An Angular 2 component to handle events
Using Observables requires some knowledge of RxJS and reactive programming. As
RxJS offers multiple methods to handle different situations while dealing with data
streams. The library is considered challenging at the first glance to many developers
as it works in a different manner in comparison to other libraries that handle data. A
detailed analysis of RxJS is not within the scope of this thesis but few points will be
highlighted to give an overview of what makes it different.

•

“Pushing” data is different in Reactive programming. The usual case in imperative programming is that data is gathered by a method called “pull” but with using Observables “push” is used instead to allow the streams to send the data to
its subscribers.

•

RxJS is a pure functional paradigm. Methods such as map, filter, and reduce
are all regular methods that are often used while using functional programming.
Therefore, prior experience with that makes it much easier to use RxJS as all
these streams that have been mentioned earlier are some form of lists and
functional methods are applicable.

•

Promises and streams are different. Promises are a technique to handle async
server-calls which is preferred over callbacks. Streams emit many values while
Promises emit only one value. Streams could be thought of as the new Promises that will be preferred over Promises as they increase readability and data
maintenance.

•

Streams are data pipelines. The streams work in a manner where it is possible
to have access to whichever part of the stream and have the flexibility to combine different streams and create new ones. The stream concept gives a full
control of what to do with the data and which data to select.
[26, 155 ; 27.]

39

6

Implementation of Scalable Application Architecture

As a result of the findings discussed in chapter 4 and 5, development of a large web
application started. The application had challenging requirements in terms of architecture, business-logic, and performance. The main idea behind the application was to
have a business-to-business (B2B) channel allowing a multi-international company to
sell their products to other businesses across Europe, North America, and Asia. The
application would also be used to by their customers to track their orders. Typically, a
company would use this application to get products shipped to them and the application’s core value is to be able to place orders and track them accurately. Due to the
wide range of the users, the application has to support 6 languages, multiple time
zones, multiple unit of measurements and local laws of different countries. The application has to connect to a central ERP system to place orders in the system and fetch
data for other functionalities. Functionalities of the applications included:
•

Generate orders & transactions reports.

•

Search and filter items from multiple records.

•

Create new orders.

•

Track order in real-time.

•

Admin panel to manage and update items in the application.

The front-end was developed using latest technologies available at time. Angular 2 was
chosen as the main framework to build the application. Publish/Subscribe & modular
patterns were heavily used in the architecture of the application. The main technologies
the stack used include the following:
•

HTML

•

Sass

•

Git

•

Angular 2

•

TypeScript

•

Rxjs

•

Webpack 2

•

Material Design

•

Jasmine 2

•

Karma

40

6.1

Angular 2 vs. React

When it comes to React and Angular 2, they are both excellent choices available in
2016. As described in Chapter 5, they promote good architecture patterns, use component-based development, have strong community around them, and offer best programming practises.
Choosing between the two options was not an easy task. The evaluation of the frameworks was not only based on the technical features. The specific case of the application and the development team’s competences were taken into consideration as well.
In the case of the application being developed in this thesis work, there have been multiple factors in favour of Angular 2 over React.
Out of the box Angular 2 has more functionalities and options in comparison to React.
Angular 2 contain functionalities such as routing, server API calls, management of dependencies, code testing, and directional data flows. All these options are available
without installing any additional libraries. On the other hand, React has the same functionalities available but they are not included out of the box. In React, additional libraries always have to be researched as there is a large number of options available for
each common functionality. As a result, the development team has to make many decisions that it becomes a problem. Angular 2 offered more recommendations out of the
box which helped kicking off the development. The application had a tight delivery
schedule and it was expected to have more developers starting to work on the same
application at a later stage. Therefore, using a consistent framework like Angular 2 was
more convenient.
Tools supporting for Angular 2 are richer than the options available for React due to the
technologies it is using. React’s JSX has less support from code editors as it is not a
standard markup language like HTML. React relies solely on JavaScript versions ES5
& ES6. JavaScript is a loosely typed language and therefore there is a limitation to the
IDE’s support. However, TypeScript the primary language of Angular 2 is a better version of JavaScript. Angular 2 does not require TypeScript but it is definitely recommended to use by the community and the Angular 2 core team. Using a strongly typed
language like TypeScript gives a huge productivity enhancement in software development. It gives more control over the code and therefore less chances for errors.

41

Web components is a group of features that are being added to HTML and the DOM by
W3C standard. Web components are intended to create reusable widgets in web applications. They expected to be widely used in the future. Angular 2’s design has accounted for the new web component’s standard. Angular 2’s gives the possibility to
convert the code in native web components. Therefore, it will be easier task to convert
Angular 2 code into web components in comparison to React. Part of building scalable
web applications is thinking ahead of time. The compatibility of the technologies used
with new standards is an important issue.
In addition to the technical advantages of Angular 2, the development team had prior
experience with Angular 1. Therefore, it was relatively easier to use Angular 2 over
React. Since TypeScript is slightly similar to Java which is a strong typed objectoriented language. Some of the development team members had experience with Java
which would give them a smaller learning curve while learning TypeScript.
It was more convenient to use Angular 2 over React. With reference to the points described earlier in chapters 4 and 5 and the technical merits that were offered by Angular 2 and the challenging nature of the application’s requirements, they support choosing Angular 2. In addition, the time schedule planned for the application to be delivered
and the background of the development team were other factors to choose Angular 2.

6.2

Practical Architecture and Structure

Creating a scalable and maintainable application starts with a good architecture that
does not limit development and allows maximum code reusability. Angular 2 promotes
a structure for the application’s parts that follows the best programming practises and is
logically linking the code together. An overview of Angular 2’s architecture is highlighted in Figure 6. Angular 2 consists of modules which hold together services and components.

42

Figure 6. illustration of Angular 2’s architecture. [24.]
The application developed in the thesis had a structure that was built following Angular
2’s architecture and the modular design pattern. Thus, each group of functionalities
were grouped together in a module. In reference to Listing 8, the application’s modules
can be found under directory “src”. The whole application is bundled together under a
root module called app module found in app folder. App folder contains different modules such as order, dashboard, and shared modules. Each of the application’s modules
has a folder starting with a “+” sign to indicate that it’s a module. The sign is a naming
convention recommended by Angular 2.

├── config
└── src
├── app

/**root app module**/

│

├── +order

/**order module **/

│

├── +dashboard

/**dashboard module **/

│

└── +shared /**shared module **/

│

├── app.component.ts

│

├── app.config.ts

│

├── app.e2e.ts

│

├── app.module.ts

│

├── app.routes.ts

│

├── app.service.ts

43

│

├── app.spec.ts

│

├── app.style.scss

│

├── app.template.html

├── assets
└── custom_typings
Listing 8. Overview of the application’s general structure.
Every module typically has its own routing configurations. Therefore, each module is
responsible for controlling how to load its components. The routes are stored in files
with extension “*.routes.ts”. The root app module also contains a routing file that is responsible for controlling the paths to every other module.
In addition, the app module contains the end to end, e2e, tests of the whole application.
The e2e tests are performed only on a high level and only test the application’s modules. Typically end to end tests are to ensure that the modules of the application perform together as expected.
Each module consists of multiple components that together form the module. Listing 9
offers more detailed illustration of how a module may look like in terms of structure.
The dashboard module includes order reports and stock reports component. Also it
contains the necessary files to export the dashboard module such as “dashboard.component.ts” and “dashboard.module.ts“.
├── orders-report
│
│

└── shared
└── order-report.service.ts

├── stock-report
│

├── shared

├── dashboard.component.ts
├── dashboard.spec.ts
├── dashboard.module.ts
├── dashboard.routes.ts
├── dashboard.style.scss

44

├── dashboard.template.html
└── index.ts
Listing 9. Dashboard module’s files
The file with name “dashboard.spec.ts” in Listing 9 is responsible for the unit tests of
the dashboard component. Angular 2 recommends writing unit tests with extension “
*.spec.ts “. With that naming convention it becomes easy to locate all the unit test files.
Listing 8 contained a folder called assets on the same level as the src folder. Assets is
where some of the application’s supporting files live. Files such as CSS libraries, font
files, and images are all meant to be in the assets. Listing 10 gives an insight of the
different files that may be placed in the assets folder. The CSS files should not be confused with component’s styling as CSS files in assets folder are only for libraries.
└── assets
├── css
├── fonts
├── icon
├── img
├── mock-data
└── svg
Listing10. Illustration of application’s assets folder
An important module found in the overview of the application was the shared module.
This module is responsible for all the different components which are shared all over
the application. For instances, input elements with validations and navigation bar components are used in other modules in the application. The shared module also may
contain CSS styles which are shared in multiple other modules. The shared module’s
implementation allows code to be reused across the application. Listing 11 gives a
simple structure of how the shared module could be built considering the scenario that
the orders module requires having a navigation bar. The only action required is to import the shared module into the orders module and the code of the nav component is
instantly available for the order module.

45

└── shared
├── dropdown-element
├── nav
├── quantity-input-element
├── radio-list
└── styles
├── modules
└── partials
Listing 11. Shared module

46

7

Conclusion

Design decisions and use of available technologies are major factors that play a huge
role in building a large web application that is functional and maintainable. Frameworks, design patterns, and architectural structures are extremely helpful to boost development time and make complex applications possible.
The final result of this project was practical recommendations and guidelines to design
and develop a large-scale maintainable web application. Therefore, the project
achieved its goals. All of the design patterns and web frameworks that were researched followed common principles and patterns. These tools are aiming to solve
common problems faced by developers to allow them to focus on the real challenges of
their case. This is possible only by the code re-usage, application of the ready-made
solutions, and the loosely coupled codebase.
The findings are limited to the technology available at the time this project was taking
place. However, the logic and the methods that were applied to find the frameworks
and the design patters will be reusable in the future to evaluate technologies available
at that time. There is no absolute solution to every problem. Every application has its
own unique problems. Therefore, identifying these problems and researching solutions
is the key element to create a good application.

47

References
1

Tieto home page. [Online] Accessed 15 September 2016 URL:
http://www.tieto.com/

2

MODx Web Development. John, Antano; March 2009:8-13

3

7 reasons why frameworks are the new programming languages. Peter Wayner;
Infoworld; March 30 2015. [Online] Accessed 4 May 2016 URL:
http://www.infoworld.com/article/2902242/application-development/7-reasonswhy-frameworks-are-the-new-programming-languages.html?page=2

4

On the Way to the Web: The Secret History of the Internet and Its Founders.
Banks, Michael A.; January 2008: 49

5

Web Teaching. A Guide to Designing Interactive Teaching for the World Wide
Web. Brooks, David W. Nolan, Diane E., Gallagher, Susan M.; February 2001; 3

6

Web 2.0 Website Programming with Django: Step Through the Development Of
A Complete Social Bookmarking Application with the Python Web Framework
That Encourages Clean And Rapid Development.Hourieh, Ayman; April 2008; 56

7

Design patterns: Elements of reusable Object-Oriented Software, Gamma , Raplh
Johnson, Richard Helm, John Vissides; October 1994

8

Patterns For Large-Scale JavaScript Application Architecture , Addy Osmani
[online]. Accessed 28 June 2016 URL:
https://addyosmani.com/largescalejavascript/

9

Design Patterns For Dummies, Steve Holzner ; May 8, 2006;

10

Learning JavaScript Design Patterns [Online]. Addy Osmani; 2015. [Online] Accessed August 29 2016 URL:
https://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmv
p

11

Software License Unveiled: How Legislation by License Controls Software Access. Phillips, Douglas E.; June 2009; 9-20

12

JavaScript Unit Testing. Salen, Hazem; 2013; 7-8

13

Software Engineering [ONLINE]. St. Andrews University; 2010: chapter 30 - documentation URL:

14

Speaking on the Observer Pattern - Tony Sintes ; May 2001 [online]. URL:
http://www.javaworld.com/article/2077444/learn-java/speaking-on-the-observerpattern.html

15

Pro Javascript Design Patterns , Harmes , Ross ; 2008

48

16

Show love to the module pattern , Christian Heilmann ; July 2007 [online]. Accessed August 29 2016 URL:
http://www.christianheilmann.com/2007/07/24/show-love-to-the-module-pattern/

17

Again with the module pattern - reveal something to the world , Christian Heilmann ; August 2007 [online]. Accessed August 29 2016 URL:
http://www.christianheilmann.com/2007/08/22/again-with-the-module-patternreveal-something-to-the-world/

18

Developing a React Edge. Frankie Bagnardi, Jonthan Beebe, Richard Feldman,Tom Hallett, Simon Højberg, Karl Mikkelsen ; November 2015

19

Introduction to React , Cory Gackenheimer ; 2015

20

React.js essentials : a fast-paced guide to designing and building scalable and
maintainable web apps with React.js , Artemij Fedosejev ; 2016

21

React’s JSX: The Other Side of the Coin, Cory House; Aug 13 2015 [Online].
Accessed September 5 2016 URL: https://medium.com/@housecor/react-s-jsxthe-other-side-of-the-coin-2ace7ab62b98#.7zyb84qo9

22

Thinking in React – Official Facebook’s React documentation. Accessed September 5 2016 URL: https://facebook.github.io/react/docs/thinking-in-react.html

23

Component Specs and Life Cyclce – Official Facebook’s React documentation.
Accessed September 5 2016 URL:
https://facebook.github.io/react/docs/component-specs.html

24

Architecture Overview [Online]. Google; 2016.[Online] Accessed September 5
2016 URL: https://angular.io/docs/ts/latest/guide/architecture.html

25

Beginning AngularJS. Andrew Grant; 2014; 35-34

26

Ng-book 2: The complete Book on AngularJS 2 , Ari Lerner, Felipe Coury , Nate
Murray , Carlos Taborda; 2016

27

ReactiveX - Observable, RxJS official documentation. [Online] URL:
http://reactivex.io/documentation/observable.html

28

Observer Design pattern using JavaScript , Salvatore Vetro ; 2006 [online]. Accessed September 5 2016 URL:
http://www.codeproject.com/Articles/13914/Observer-Design-Pattern-UsingJavaScript

29

Infographic: AngularJS vs. Ember vs. Backbone.js by Mitch Pronschinske
[Online] Accessed 6 Sept 2016. URL: https://dzone.com/articles/infographicangularjs-vs-ember-vs-backbonejs

Appendix 2
1 (1)

Asabeneh Shitahun Yetayeh

Developing Dynamic Single Page Web
Applications Using Meteor
Comparing JavaScript Frameworks: Blaze and React

Helsinki Metropolia University of Applied Sciences
Bachelor of Engineering
Information Technology
Thesis
2.6.2017

Abstract

Author

Asabeneh Shitahun Yetayeh

Title

Developing Dynamic Single Page Web Applications Using
Meteor

Number of Pages

31 pages + 3 appendices

Date

2 June, 2017

Degree

Bachelor of Engineering

Degree Programme

Information Technology

Specialisation option

Software Engineering

Instructors

Patrick Ausderau, Lecturer
Sonja Holappa, Lecturer

This paper studies Meteor which is a JavaScript full-stack framework to develop interactive single page web applications. Meteor allows building web applications entirely in
JavaScript. Meteor uses Blaze, React or AngularJS as a view layer and Node.js and
MongoDB as a back-end. The main purpose of this study is to compare the performance
of Blaze and React.
A multi-user Blaze and React web applications with similar HTML and CSS were
developed. Both applications were deployed on Heroku’s web server and compared
based on the size of the development community, the programming pattern, the available
packages and the page loading speed.
This study showed that React has a higher number of development community and
available packages than Blaze. The speed test showed that React web application is
faster and lighter than Blaze. Both Blaze and React have similar features and user
interfaces.
This paper concludes that Meteor with React is a better option to develop interactive single
page applications because of higher popularity, smaller page size, faster page loading
speed and more available packages. For next study, this paper recommends to integrate
VueJS as Meteor view layer which will give developers more options to choose from and
in return it will increase Meteor’s development community.

Keywords

Blaze, JavaScript, Meteor, MongoDB, Node.js, React,
Spacebar, Template, VueJS, Web application

Contents
1 Introduction

1

2 Meteor a JavaScript Full-Stack Framework

2

2.1 Meteor

2

2.2 Front-end Technologies

3

2.2.1 Blaze

3

2.2.2 React

6

2.3 Back-end Technologies

8

2.3.1 Node.js

8

2.3.2 MongoDB

9

3 Technologies and Implementation

11

3.1 Development Environment

11

3.1.1 System Setup

11

3.1.2 Designing User Interface

11

3.1.3 Software Installation

13

3.2 Meteor Projects

13

3.2.1 Creating Meteor Projects

13

3.2.2 Meteor Projects File Structure

14

3.2.3 Meteor Packages

17

4 Results

19

4.1

Web Applications

19

4.1.1 Blaze Applications

19

4.1.2 React Applications

21

4.2 Comparison Parameters

23

4.2.1 Development Community

23

4.2.2 Programming Pattern

23

4.2.3 Page Loading Speed

24

5 Discussions

26

6 Conclusions

29

References

30

Appendices
Appendix 1 Meteor Packages
Appendix 2 MongoDB Queries
Appendix 3

Blaze and React Source Codes

Abbreviations
CLI
CSS

Command Line Interface.
Cascading Style Sheet.

DDP
DOM

Distributed Data Protocol.
Document Object Model.

ES

ECMA Script 6.

HTML

HyperText Markup Language.

JS
JSX

JavaScript.
JavaScript XML.

MDG

Meteor Development Group.

NPM

Node Package Management.

OS

Operating System.

RDB

relational database.

SCSS

Super Set of CSS.

UI
UX

User Interface.
User Experience.

Glossary
CRUD

In computer programming, create, read, update, and delete are the four
basic functions of persistent storage. CRUD refers to all of the major
functions that are implemented in relational database applications.

DOM

DOM is a platform and language-neutral interface that allows programs
and scripts to dynamically access and update the content, structure, and
style of a document [1]..

JSON

JSON is a lightweight data-interchange format. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd
Edition - December 1999.
is a XML-like syntax extension to ECMAScript without any defined semantics. .

JSX
NoSQL

NPM
SEO

referring to ”non SQL”, ”non relational” or ”not only SQL” database provides a mechanism for storage and retrieval of data which is modeled in
means other than the tabular relations used in relational database..
default package manager for the JavaScript run-time environment,Node.js.
SEO is a marketing discipline focused on growing visibility in organic
(non-paid) search engine results of a website [2]..

SQL

Structured Query Language is a domain-specific language used in programming and designed for managing data held in a relational database
management system.

UI

An interface is a set of commands, menus or features through which a
user communicates with an application.
UX design is the process used to determine what the experience will be
like when a user interacts with the user interface of the application.

UX
XML

XML is a software and hardware-independent tool for storing and transporting structured data..

1

1

Introduction

JavaScript (JS) has increased in popularity in recent years and has been the leading
programming language for four consecutive years [3] and is the most used language on
Github [4] [5]. It is also becoming a default choice to develop dynamic, single page web
applications [6]. A number of JS frameworks has been evolved in the last few years [6].
Most of them are for client side development. Just to mention few of the competitive open
sources JS frameworks which came to the web programmers’ table in the last few years:
AngularJS, React, Ember, Polymer, Backbone and Knockout. Different frameworks come
with various methods to solve the common underlying problem of rendering complex user
interfaces dynamically and making single page applications loading faster [6]
The emergence of different JS frameworks is a big storm in the web development community, as switching from one web technology to another is very frustrating for web developers. These entire front-end technologies do not solve all the problems of the web
developers. There should be a framework which connects front-end with the back-end.
Node.js evolved as a server side JS run time environment makes it possible to use JS in
the back-end [7]. This has led to the emergence of full-stack applications entirely written
in JS [4]. In contrast to front-end JS frameworks, there are only a few full-stack JS frameworks in existence. Some of these are Meteor, Sails.js, Express.js, Feather.js, Derby,
and Wakanda [8].
This paper focuses on Meteor which is an open-source full-stack JS framework to develop
interactive single page web applications [9]. Meteor uses only JS both in the front-end and
back-end. Meteor has its own native front-end framework, Blaze. In addition, Meteor can
also be integrated with other front-end frameworks such as AngularJS and React [10].
This paper compares Blaze, the default Meteor view layer with React as a newly integrated
view layer to Meteor. Interactive web applications using Blaze and React which implement
CRUD operations in the back-end is developed and deployed on Heroku. Popularity, page
loading speed and page size of the applications are evaluated.

2

2

2.1

Meteor a JavaScript Full-Stack Framework

Meteor

Meteor JS framework uses only JS to build modern, real-time single page web applications
for both desktop and mobile platforms [10]. Meteor is the most well-known isomorphic
open-source JS framework [9]. Meteor is a very simple environment to build modern web
applications using only one language, JS [11]. Meteor is beyond a JS coding framework,
as it offers an innovative way to develop scale-able, rich, interactive single page web
applications [12].
Meteor can be a good choice for both beginners and advanced developers [11]. Meteor full-stack framework can be the best choice of framework for many reasons. Meteor
applications are written in JS, so no need to learn another server specific programming
language. It provides an easy way to install a development environment which includes
a web server and database server. It includes a smart way to use packaging management system which could be easily incorporated to the application. Meteor provides very
reactive data sources, with a neat distributed data model, meaning applications will feel
reactive to multiple users and Meteor can generate native iOS and Android applications
from the same JS code base. Meteor broke down the barrier between client and server
by implementing an isomorphic model which means the same code base on the server
side and the client side [9] [10].
The complete architecture of Meteor is illustrated in figure 1, showing how the client-side
and sever-side communicates. Meteor initially used to use only Blaze as a view layer
technology. In 2016, it included React and AngularJS as its view layer technologies.
Currently, it uses Blaze, React and AngularJS as a view layer framework and Node.js
and MongoDB in the back-end [10]. The upper layer of figure 1 shows that Meteor can
be used to build both web or mobile applications. Below the upper layer, the three Meteor
front-end technologies such as Blaze, AngularJS and React are represented. Below the
view layer technologies, there is Client Data Cache. Every user connecting to a Meteor
application will have the copy of server side data as Client Data Cache which is also

3
know as Minimongo. In the middle of figure 1, there is Distributed Data Protocol (DDP).
Meteor uses DDP to communicate with the clients. As it is depicted in figure 1, DDP is
the boundary line between the client and server side.

Figure 1: The Meteor architecture (Copied from fjaguero.com(2017) [13])

Meteor provides three alternative view layer technologies as it is depicted in figure 1,
it is possible to use either Blaze, React or AngularJS in a Meteor project. Among the
alternative view layer options Meteor provides, Blaze and React view layer were used for
this study. In the coming section Blaze, the default Meteor front-end technology, will be
discussed.

2.2

2.2.1

Front-end Technologies

Blaze

Blaze is a Meteor’s default and built-in reactive rendering library which uses reactive HTML
templates. Instead of using a combination of traditional templates and jQuery, Blaze eliminates the need for all the update logic in the application that listens for data changes and
manipulates the DOM by familiarizing template directives and integrating with Tracker’s
transparent reactivity and Minimongo’s database cursors so that the DOM updates automatically when there is a change. [14] In contrast to React, Blaze emphasizes HyperText

4
Markup Language (HTML) templates rather than JS component classes. Templates are
more approachable than JS code and easier to read, write, and style with Cascading Style
Sheet (CSS). Instead of using Tracker, React relies on a combination of explicit setState
calls and data-model diffing in order to achieve efficient rendering [14].
The Blaze template language is inspired by Handlebars and written in Spacebars, a variant of Handlebars [14]. The Blaze template consists of a template tag and name attribute.
In Meteor, templates are used to create a connection between the projects HTML interface and projects JS code [11]. To create a template, it needs a template tag, template
name attribute and HTML elements inside the template tag. The code in listing 1 is an
example of a template with a name leaderboard having two HTML elements with static
data. The Spacebar engine helps to inject dynamic data into the template.
1
2
3
4

<template name="leaderboard">
<h4>player #1 - point 5</h4>
<h4>player #2 - point 4</h4>
</template>
Listing 1: An example of Blaze template
Blaze uses Spacebar to handle events and to inject data into the HTML interface of the
template. Spacebar consists of HTML interspersed with template tags, which are delimited by two curly braces [14]. Spacebar uses the Spacebar template helpers and events
to manipulate data and to handle events. As listing 2 illustrates, Spacebar helpers can
contain variables, data and functions. This Spacebar has an array variable named players.

1
2
3
4
5
6

Template.leaderboard.helpers({
players: [
{ name:"player #1", score: 5 },
{ name:"player #2", score: 4 }
]
});
Listing 2: Spacebar Helper Function
The array data in listing 2 has two data, the name of the player and score of the respective
player. To insert the players data into the leaderboard template, Spacebar uses {{#each
players}} {{name}} - {{score}} {{/each}} iteration methods. This mechanism is
similar to forEach in JS or map in ECMA Script 6 (ES). React uses map to loop through
data and insert into JSX elements or components. As listing 3 shows the power of Space-

5
bar to iterate array data into the template dynamically. The codes in listing 3 is an example
of template with Spacebar.
1
2
3
4
5

<template name="leaderboard">
{{#each players}}
<h4>{{name}} - {{score}}</h4>
{{/each}}
</template>
Listing 3: An example Spacebar iterating data into a blaze template
In addition to variables and arrays, Helpers can also contain JS functions. Helper functions are JS functions that are attached to templates and allow executing code inside the
template interface [11]. To create a helper function, it needs the keyword template, the
name of the template and helpers keyword. The codes from line 6 - 11 in listing 4 are
examples of helpers and from 13 - 20 are event handler of the leaderboard template. The
codes in listing 4 have both Helpers and Events. Helpers functions are to store and extract
and Events are to handle data related to that specific events.

1
2
3
4
5
6
7
8
9
10
11

Template.leaderboard.helpers({
players: [
{ name: "Player #1", score: 5 },
{ name: "Player #2", score: 4 }
],
'playersName':function(){
return players.name;
},
'playersScore':function(){
return players.score;
}});

12
13
14
15
16
17
18
19
20

Template.leaderboard.events({//template events
'click button':function(){
alert("you have clicked a button");
},
'submit input':function(){
alert("you are about to submit an input");
}
});
Listing 4: Template Helpers and Events function
As listing 4 shows, in the leaderboard helper there are a players array data, and two
functions. In the leaderboard events function there are two events. In the next section,
the second view layer technology of Meteor which is React will be discussed.

6

2.2.2

React

React is a JS front-end library and it is one of the most popular front-end technology to
design web applications [15]. React uses JSX, a preprocessor step that adds XML syntax
to JS. It is possible to use React without JSX but JSX makes React more elegant.
React makes building interactive User Interface (UI)s simple. Designing a simple view for
each state in an application, React will efficiently update and render the right components
when data changes [15]. React builds encapsulated components which manage their
own state, then compose them to make complex UIs.
React component logic is written in JS not in templates. Therefore, it is easy to pass rich
data through an application and keep state out of the DOM [15]. The following syntax:
const element = <h1> Hello World </h1> is an example of JSX which is not an HTML
nor JS string declaration. Every JSX elements and components will be rendered in the
root div element. The root div is usually written like this: <div id = "root"></div>.
It is possible to embed any JS expression in JSX by wrapping it in curly braces. The JS
function fullName() in listing 5 is embedded in to the JavaScript XML (JSX) element.
1
2
3
4
5
6
7

function fullName(player){ // function to format fullname
return player.firstName + ' ' + player.lastName;
}
const player = { // Simple JavaScript Object
firstName:"Firstname",
lastName :"Lastname"
};

8
9
10

//JSX element
const element = (<h1> Hello, {fullName(player)} </h1>);

11
12
13

//Rendering JSX element to the root
ReactDOM.render(element, document.getElementById('root'));

14
15
16
17
18

const player = {
name:"Player #1",
score:5
};
Listing 5: Rendering JSX element in a root div.
As listing 5 shows that React source code consists of a function, JSX element, JS object
and ReactDOM. The JS function, fullName(player) passes the

player data to the

7
JSX element and the JSX will be rendered in the ReactDOM at line 13. JSX element may
contain an attribute. The attribute could be an expression or a string. JSX attribute could
be static data as this one const element = (<h1 name = "name"> Hello</h1>) or a dynamic data like this one, const element = (<h1 name = {player.name}>Hello</h1>).
JSX tag may contain children. All HTML elements in JSX should be enclosed by a common parent HTML element if there are multiple HTML elements. This is const element
= (<div> <h1> Name </h1> <h1> score </h1></div>) JSX element which has two h1
HTML elements enclosed by a parent divelement.
React uses the JSX components instead of JSX elements to be productive. Components
makes source code split into independent, reusable pieces. Components are like JS
functions which are responsible for a certain task. As demonstrated in listing 6, React
class component can be exported and used anywhere in a project file.
1
2
3
4
5
6
7
8
9
10

export default class Player extends React.Component{
render(){
return(
<div>
<h1> Player name</h1>
<h1> Player score</h1>
</div>
);
}
};
Listing 6: An example of React component.
The React component in listing 6 is a re-usable component which can be used like this,
const element = <Player name = "name" /> in a project. The name attribute in the
<Player name = "name" /> is a props which can be static data or data which can be
changed dynamically. Player is now a reusable component which can be used anywhere
in the project. In this example, the component has only static data.
To put dynamic data to the UI, React uses setState method plays a great role. The main
core of every React component is its state, an object that determines how the component
renders and behaves. React state objects are what allow creating components that are
dynamic and interactive. [15] If the components have states they change UI according to
the state. The code illustrated in listing 7 is an example of a component with component
state. State could be a single value or a set of values in an object or array.

8

1
2
3
4
5
6
7
8
9
10
11
12
13
14

export default class Player extends React.Component{
constructor(props){
super(props);
this.state = {score:0};
}
render(){
return(
<div>
<h1> Player name</h1>
<h1> Player score</h1>
</div>
);
}
};
Listing 7: States in React component.
States and props play a great role in changing data dynamical. JSX components usually render to UI. React uses a built-in function to prioritize rendering and to destroy
the rendered component. It is very important to free up resources used by components by destroying the rendered components. React uses built-in functions to monitor the components’ life cycle. The two commonly used React built-in functions are
componentDidMount() and

componentWillUnMount(). The

componentDidMount()

hook runs after the component output has been rendered to the Document Object Model
(DOM). The componentWillUnMount() life-cycle hook will destroy the rendered components. The next section will discuss the server-side of Meteor.

2.3

2.3.1

Back-end Technologies

Node.js

Node.js is an open-source, cross-platform JS run-time environment for developing different applications. It has been around since 2009 and brought a big change in the web
programming world [16]. Node.js introduced a package manager called NPM in January
2010. Node Package Management (NPM) makes publishing and sharing of JS source
codes easier and is designed to simplify installation, updating and un-installation of libraries [7]. Data should not be only requested from the client, to make the web reactive,
data should also be pushed from the server to the client and Node.js is good at in real-time

9
web applications by employing push technology over web-sockets [17].
The Node.js run-time environment interprets JS by taking full advantage of Google’s V8
JS engine. V8 JS engine allows Node.js to create a run-time environment that delivers
JS from the server to the client very fast. V8 translates JS into native machine code, instead of working overtime to interpret it as byte code, giving Node.js its swiftness. The
responsive speed, combined with asynchronous programming make Node.js so responsive and desirable in building dynamic and reactive applications. Meteor took advantage
of Node.js greatness by using it in the back-end to deliver content to the client. [16]

2.3.2

MongoDB

According to MongoDB’s website definition, MongoDB is an open-source document
database that provides high performance, high availability, and automatic scaling [18].
MongoDB is a NoSQL database system which is used in many applications that offers a
very flexible structure that can range from basic databases to complex.
MongoDB does not require a pre-defined schema to start and it can be scaled up at
any time [11]. MongoDB uses JSON type syntax is called Binary JSON (BSON) [18]. In
contrast to the well-known relational database (RDB), SQL, MongoDB does not use table,
row and column. Instead it uses collection, document and field [18]. As table 1 shows
some of MongoDB and SQL terminologies are different from each other [11].
Table 1: MongoDB and SQL terminologies (Modified from https://www.mongodb.com/
(2017) [18]) .
MongoDB
Database
Collection
Index
Document
Field
Embed Documents and Linking
Primary Key
Aggregation

SQL
Database
Table
Index
Row
Column
Join
Primary
Group by

MongoDB databases and SQL databases are similar, but there is a subtle difference [11].

10
As table 1 illustrates that SQL stores data in tables whereas MongoDB in collections.
MongoDB is the default database system for Meteor [11]. Installation of MongoDB is
not necessary to create and run Meteor projects. Meteor has its own local MongoDB
package [10]. Meteor does not support other database systems [11]. By default, every
Meteor projects automatically creates its own MongoDB database and a MongoDB setup
configuration is not required. Whenever a Meteor project is running the local server is
running and MongoDB starts.

11

3

Technologies and Implementation

3.1

3.1.1

Development Environment

System Setup

A Windows 7 64-bit Operating System (OS) computer, an Atom text editor, Git version
control, Meteor Installer, Heroku’s Command Line Interface (CLI) and Heroku’s free hosting plan were used during the development process. The Atom text editor was used to
write source codes while Git version control was used to control the different version of the
projects and also to push the project source code to Heroku. Heroku was used to deploy
the application in a hosting plan and to check the performance of Blaze and React web
applications. Meteor uses CLI commands and the Windows OS CLI was used to create
projects, run projects, install, un-install packages and test meteor projects.

3.1.2

Designing User Interface

Before starting coding, a similar wire-frame or mock-up for both Blaze and React web
applications were designed. The login page requires a user e-mail and password. This
page has two buttons:one to submit user e-mail and password and the other is a link to
the sign up page. Similar to the login page, the sign up page also requires a user e-mail
and password and it has two buttons, one button to submit user information and the other
is a link to the login page.
As figure 2 illustrates, the login and signup page of Blaze with Meteor and React with
Meteor web applications is designed using wireframe. The UI of the web follows the
common pattern of a signup and login page design.

12

Figure 2: A sign up and login page both of both Blaze and React web applications

After users logged in, the landing page will be accessible as seen in figure 3. A user can
add players, remove players, give and take points from players. A player with highest
rank has to move to the first place and he will be the leader.

Figure 3: Blaze with Meteor web application landing page

13
As seen in figure 3, a logged in user can access all features of the application. A user
can do the CRUD operations for this interface. A user can leave the page by logging out
from this page.

3.1.3

Software Installation

The Atom text editor was installed by downloading Atom Windows installer 64-bit from
atom.io website. Git version control application was installed by downloading Git Windows
installer 64-bit from git-scm.com website. The latest version of Meteor, version 1.4.3.2 was
installed on a Windows 7 64-bit OS computer from the official website of Meteor. Meteor
was installed on Windows simply by downloading the official Meteor installer and running
the InstallMeteor.exe. Heroku CLI was installed by downloading Heroku CLI Windows
installer 64-bit.

3.2

3.2.1

Meteor Projects

Creating Meteor Projects

After setting up the development environment, a Meteor project was created. Creating
meteor project is simple and fast. As illustrated in listing 8, a project named Leaderboardblaze was created using the CLI. The project was created and launched using the CLI
commands illustrated in listing 8. Meteor itself sets up everything and gives a boilerplate
application during project creation and this boilerplate code can run without any additional
setup and modification.
1
2
3
4
5
6
7
8
9

C:\Users\Asab\Desktop>meteor create Leaderboard-blaze
C:\Users\Asab\Desktop>cd Leaderboard-blaze
C:\Users\Asab\Desktop\Leaderboard-blaze>meteor run
[[[[[ C:\Users\Asab\Desktop\Leaderboard-blaze ]]]]]
=> Started proxy.
=> Started MongoDB.
=> Started your app.
=> App running at: http://localhost:3000/
Type Control-C twice to stop.
Listing 8: Creating a meteor project with a name Leaderboard-blaze

14
The shell script in listing 8 shows that the application is running on a local machine at
http://localhost:3000/ and MongoDB is initiated. While the local machine server is
running it is possible to modify the project and developing the application. The running
project can be stopped by typing Ctr + C twice.
A Meteor project creates a client, server, .meteor and npm module folders and
package.json file. Meteor local packages such as Blaze-templating engine, MongoDB
and others are stored in .meteor folder. Codes which run in the client will be in the client
folder, codes which run in the sever will be in the server folder. The package.json file
stores the dependencies of modules installed in the application. npm module is used to
install or remove different packages.
The shell command in listing 9 represents the file structure of a Meteor web application
project. A similar file structure were used for both Blaze and React except the projects’
name. The name of the Blaze with Meteor application is Leaderboard-blaze whereas the
React with Meteor application is Leaderboard-react.
1
2
3
4
5
6
7

Directory of C:\Users\Asab\Desktop\Leaderboard-blaze
04/05/2017 11:03 PM
14 .gitignore
04/05/2017 11:04 PM
<DIR>
.meteor
04/05/2017 11:03 PM
<DIR>
client
04/05/2017 11:04 PM
<DIR>
node_modules
04/05/2017 11:03 PM
190 package.json
04/05/2017 11:03 PM
<DIR>
server
Listing 9: File structure of Blaze with Meteor web application
Meteor uses lazy-loading system which means all files in client folder will be rendered
without being imported. Therefore, after a Meteor project is created, the file structure in
listing 9 has to be customized to avoid lazy-loading. According to Meteor’s official file
structure, files which are going to be imported will be in the imports folder. In the next
section, the file structure of both Blaze and React with Meteor web application will be
presented.

3.2.2

Meteor Projects File Structure

As it is explained in sub section 3.2.1, Meteor application has a default file structure. The
default file structure is not compulsory but it is important to follow the common practice.

15
In this paper, the common Meteor file structure was used. The file structure of Blaze
with Meteor web application is presented in figure 4. It is similar to listing 9 but with
additional folders. The initial Meteor boilerplate does not have an imports folder. Files in
the imports folder can be rendered only if they are imported into the main client folder.
Inside the imports folder, there are api, other client and ui. The api folder contains
the player collection. The client folder, inside the imports folder contains styles CSS
and Super Set of CSS (SCSS) file. The ui folder contains Blaze templates and template
helpers to render the UI of the web application. All the folder and sources codes of the
Blaze with Meteor web application are found on github under Meteor-Blaze-Leaderboard
1

repository and in Appendix 3.
1

https://github.com/Asabeneh/Meteor-Blaze-Leaderboard

16

Figure 4: Files in the Blaze with Meteor web application

As in figure 5 , the folder and file structure represents React with Meteor web application.
It has similar structure with the Blaze with Meter web application but only differ inside the
ui folder. Here, React uses JSX to render data inside HTML. Therefore, only JS files are
included. However, in Blaze there are separate template files in addition to JS files. All
the folder and sources codes of the Blaze with Meteor web application will be found on
github under React-Meteor-Leaderboard2 repository 2 and Appendix 3.
2

https://github.com/Asabeneh/React-Meteor-Leaderboard2

17

Figure 5: Files in the React with Meteor web application

3.2.3

Meteor Packages

Packages are client side or server side JS libraries available for Meteor projects. There
are two types of packages: Meteor official packages and third party packages. The former
packages are developed by the Meteor Development Group (MDG) and they are installed
on CLI of the project directory using the command in listing 10. The latter packages
are provided by third parties. The command meteor add packagename adds different
Meteor official packages to meteor project whereas if the package is a third party package,
meteor add packagename:thirdPartyName is used to add third party packages into the
project. For instance, to install one of Meteor’s official package, the account package,
meteor add accounts-password and to install bootstrap a third-party package, meteor
add twbs:bootstrap are used.

18
All Meteor packages are available on Meteor’s package management website, atmospherejs.com. Currently, there are more than 12,000 meteor official and third party packages altogether [10]. In this paper different packages were used for both Blaze and React
web applications. Most of the packages are third-party packages.
As listing 10 shows, both Blaze and React applications used similar packages.
The account-password, bootstrap, fontawesome, scss, simple-schema, moment and
numeral were installed in the applications. The packages are added the the project as
shown in listing 10.
1
2
3
4
5
6

meteor
meteor
meteor
meteor
meteor
meteor

add
add
add
add
add
add

accounts-password
twbs:bootstrap
fortawesome:fontawesome
fourseven:scss
momentjs:moment
aldeed:simple-schema

Listing 10: Packages installed in Blaze and React Meteor web applications
As listing 10 demonstrated, different packages were used for these projects.

An

account-password adds a user account management package. The fontawesome adds
fontawesome package to the application which enables adding web icons such as delete
icon, plus icon and minus icon. The scss package adds SCSS to the application which is
a special type of CSS styling. The simple-schema package adds simple-schema package
which helps to model the schema for data validation. The moment adds moment package
to the application which has different time formats. The numeral adds numeral package
to the application which is used to change the ranking system from cardinal to ordinal
numbers.

19

4

Results

4.1

Web Applications

4.1.1

Blaze Applications

Meteor leaderboard web applications were built using both Blaze and React. Leaderboard
is an application which puts items, users, lists to the top based on their values. In this case,
the leaderboard gives ranks to players which are added by a user. The Leaderboard
application used to be Meteor’s framework sample tutorial to learn the framework. Now, it
is replaced by simple-to-do [10]. Both Blaze3 and React 4 web applications were deployed
on Heroku and and are available on the links in the footnote.
The Blaze web application gave the UI depicted in figure 6, illustrating the sign up and log
in page of the application. A user has to sign up to access features and functions of the
application. Since the user is not yet signed up or logged in, it informs the user to log in
and to access more features.

Figure 6: Blaze with Meteor web application log in page

A logged in user can access the application features. As figure 7 shows, the landing page
of the application which was produced by Blaze with Meteor application. The landing
page has a header, informative message below the header if there is no data entered,
two data input and a button to add data. In this case, the user has not added any data
yet. At the top, it informs the user to start entering data. A user can add a player name
3
4

https://asab-blaze.herokuapp.com/
https://asab-react.herokuapp.com/

20
alone or player with value. Other features of the application such as remove players, give
point, take point and remove all players will be visible when the user adds data to the
application.

Figure 7: Blaze with Meteor web application without data

After a user logged in, it starts adding data to the application. In figure 8, the user added
four players. Now, the application in figure 8 shows plus button, minus button and remove
button to perform CRUD operations.

21

Figure 8: Blaze with Meteor web application with data

A user can add additional players, remove players, give points to players and take points
from players using the available features in figure 8. Players with the highest point will
move to the top while players with equal point will be arranged in ascending order of their
names.

4.1.2

React Applications

As figure 9 illustrates, the landing page of the React web application which is almost similar
to Blaze web application. The application does not have any data yet and it informs a user
to add data. Since there is no data, the other available features are not visible.

22

Figure 9: React Meteor web application without data

The landing page UI in figure 9 has two input fields. One of the field is to add a player
name and the other to add value of the player. Next to the value field, there is an add
button to insert the input data to the database collection.

Figure 10: React Meteor web application with data

As figure 10 shows the plus button, minus button and remove button will be available
for use when data is entered on the React web application. Now, a user can add more
players, remove players, give points to players or delete players. Players with the highest
points move to the top and he will be the leader.

23

4.2

4.2.1

Comparison Parameters

Development Community

React, Blaze and Meteor Stack Overflow search, Github Watch, Github Stars and Github
Forks results are presented in table 2 which can be used to know about the development
community. The data were collected from Stack Overflow and github websites.
Table 2: Development community (Source from Github repositories of Blaze, React and
Meteor (Data gathered from github(2017)) [3] [19] [20] [21]).
Technologies

Stack Overflow

Github Watch

Github Stars

Github Fork

3,616
95,857
57,772

43
4,322
1.921

301
63,387
36,993

69
11,722
4,653

Blaze
React
Meteor

In table 2, a Stack Over flow search using the key word React is 25 times higher than
Blaze. Meteor’s Stack Over flow search result is lower than React but higher than Blaze.
Github Watch of React is 100 times higher than Blaze and 2 times higher than Meteor.
This indicates that, React Github repositories are followed by higher number of developer
than Blaze or Meteor.

4.2.2

Programming Pattern

Blaze and React have certain similarities when the programming pattern is considered.
Blaze uses templates for view and Spacebar engine for logic. The Spacebar engine injects
data to templates. Therefore, there should be a separate template file and JS file. These
reduce convenience during programming and make the file size larger.
React uses JSX to write HTML element with JS and it is possible to mix the UI and the
logic together in one file. This reduces the file size and increases convenience during
programming.

24

4.2.3

Page Loading Speed

John Stevens, a web design blogger recommends Google Page Insights5 , Pingdom 6 ,
GTmetrix

7

and WebPageTest

8

on-line open source test tools to test the speed of a

Website [22].
Pingdom, GMtetrix and WebPageTest testings tools were implemented. The data show
in table 3 is produced by the performance test using Pingdom. Pingdom counter-checked
against all websites that are checked using Pingdom test and provides the grade of the
web application in alphabet and percentage, page loading speed and page size.
Table 3: Performance Test Using Pingdom Website Speed Test
Web Application
Blaze
React

Performance

Load time

Page size

Relative Speed

92 A
92 A

1.52 s
1.28 s

348.2 kB
228.3 kB

80
85

As table 3 shows, both Blaze and React web application gave ’A’ grade and 92% average
performance. The full page loading of React is a bit faster than Blaze but both have fast
loading speed. The page size of Blaze is much larger than React.
GTmetrix gives practical insights on how to optimize the page speed. As table 4 illustrates
the GTmetrix result of Blaze and React web applications.
Table 4: Performance Test Using GTmetrix
Web Application
Blaze
React

Performance

Load time

Page size

YSlow Score

71 A
71 A

2.3 s
2.0 s

350 kB
230 kB

69
69

As table 4 shows Blaze and React web application have ’A’ grade and 71% average
performance. Similar to the Pingdom test result in table 3, the full page loading time of
the React web application is a bit faster than Blaze and React page size is smaller than
Blaze. WebPageTest: enables testing on different platforms using realistic data. As table
5

https://developers.google.com/speed/pagespeed/insights/
https://www.pingdom.com/
7
https://gtmetrix.com/
8
https://www.webpagetest.org/
6

25
5 illustrates the WebPageTest result of the Blaze and React web applications.
Table 5: Performance Test Using WEBPAGETEST
Web Application
Blaze
React

Performance

Load Time

Page Size

Speed Index

A
A

1.79 s
1.49 s

357 kB
237 kB

813
857

Similar to Pingdom and GTmetrix test results, the WEBPAGETEST test in table 5 showed
that both React and Blaze gave a ”A” performance. The full page loading time and file size
of React is a bit smaller than Blaze.To summarize website speed test result, React has
a faster page loading speed and small file size in all the three page loading performance
tests.

26

5

Discussions

In this chapter, the results from Chapter 4 will be discussed in detail and evaluated step
by step. First, the Blaze with Meteor and React with Meteor web applications UI and UX
will be discussed.
Both Blaze and React web applications gave the expected result and showing almost all
features of UI are available in both applications. Some packages are easy to use in Blaze,
however, when it comes to React it might be a bit tricky. For instance, to add a web icons
by adding fontawesome package is straight forward in Blaze but to add the same package
takes a long time and it need a lots of tweaking. The difference can be seen by looking
at figure 7 which is the landing page of Blaze with Meteor web application and figure 10
which is the landing page of React with Meteor web application. Both Blaze and React
with Meteor can give a high standard web application with good UI and User Experience
(UX). According to this study, it could be possible to design web applications which have
similar UIs and UXs both in Blaze and React.
Knowing the development community of a certain language is an important step before
choosing a framework. According to Stack Overflow search result, Github Watch, Github
Stars and Github Forks, one can give an estimate of the community activity of a certain
framework. As table 2 depicts that React has a higher number of Stack Over flow search
results, higher number of Github Stars and Github Forks than Blaze or Blaze and Meteor
altogether. This showed that React has a bigger and more active community than Blaze
or Blaze and Meteor together.
As illustrated in table 2, a Stack Over flow search using the key word React is much
higher than Blaze or Meteor. On the official React github repository, React has 20 times
more stars than Blaze [20]. This clearly indicates that a large number of developers and
companies are using React. Furthermore, after Meteor started integrating React and
Angular, Blaze developers are switching from Blaze to React or AngularJS. Though Blaze
is not as popular as React, Blaze with Meteor can produce any kind of application with
high productivity and simplicity. Now, let us examine, the programming pattern of Blaze

27
and React.
Blaze and React follow a different programming pattern. Blaze uses templates for view
and Spacebar engine for logic. The Spacebar engine injects data to the templates. Therefore, there should be a separate template file and JS file which is cumbersome to move
from a template file to JS file in a Blaze application. These reduce convenience during
programming and makes the file size larger and in return the loading speed gets lower.
However, React uses RJX to write HTML elements with JS and it is possible to mix the
UI and the logic together in one file. This reduces the file size and increases convenience
during programming and this makes the page load faster. The folder structure of both the
Blaze and React application is presented in figure 4 and figure 5 respectively.
Website loading speed improves UX and it has to be taken into account during web application developments. In addition to UX, SEO or ranking by Google is also affected by the
speed of the page loading [22]. Performance testing before launching will help to improve
UX. In addition to that, sites which load faster do have a high SEO rank [22] [9]. “An application that can only run in the client-side cannot serve HTML to crawlers, so it will have
poor SEO by default. Web crawlers function by making a request to a web server and
interpreting the result; but if the server returns a blank page, it’s not of much value” [9]. As
table 3 shows, the performance of both Blaze and React web application give ’A’ grade
and with 92% average performance . The full page loading time of React is lower than
Blaze whereas the page size of Blaze web application is higher than React in Pingdom
loading speed test. The Blaze file is larger than React because Blaze uses a separate file
for template and JS source code. In addition, the React web application relative speed is
higher than Blaze.
GTmetrix test produced a ’A’ grade and 71% average performance for both Blaze and
React. Similar to the Pingdom test result, the GTmetrix test also showed that the React
web application is lighter and faster than the Blaze web application. Generally, the loading
time of both Blaze and React in the GTmetrix test is higher than the Pingdom speed test.
As the Pingdom and GTmeterics speed test, the WEBPAGETEST in table 5 also showed
similar findings. The WEBPAGETEST testing produced a ’A’ grade performance for both
Blaze and React web applications. Like the other tests, the React web application is

28
lighter and faster than Blaze.
To summarize, the three different speed testing tools, the Pingdoom, GTmetrics and WEBPAGETEST, showed a similar result for both Blaze and React. The result of the three
tests showed similar trend for both Blaze and React web applications.The GTmetrix test
showed an exceptionally high page loading time for both Blaze and React web applications.

29

6

Conclusions

JS is a very popular programming language and JS frameworks are evolving continuously
to make single page web application rendering fast. There are quite a lot of front-end JS
frameworks but there only very few full-stack JS. React has a more active development
community than Blaze. When it comes to convenience of programming, React is more
friendly than Blaze because both the JS and HTML are written as JSX in one file whereas
Blaze needs a separate file for template and JS file.
In terms of the number of available packages, React has more packages than Blaze.
Blaze can use all packages meant for Meteor whereas React can use the Meteor packages and its own packages. According to Stack Overflow search result and Github, React
is more popular than Blaze. React has a vibrant and active development community which
is not as comparable to Blaze. Based on the page loading speed test, React is lighter and
faster than Blaze. The React web application loading speed is faster than Blaze but the
difference is not significant.
This study showed that React with meteor is a better choice than Blaze with meteor. The
number of packages available for React is much greater than Blaze. The programming
pattern is better and the number of files and file sizes which could be used during development is much less for React. The loading performance of the React web application is
better than Blaze web application. The development community of React is much larger
than Blaze. In addition, Blaze users are switching to React and therefore, combining
Meteor with React is a better choice to develop an interactive, dynamic, single page applications. This paper recommends two points to study in the future. First, it would be
worth studying the performance of Angular and React when used in Meteor applications.
Second, this study suggests integrating VueJS front-end framework as an alternative view
layer for Meteor applications.

30

References
1

W3C. Document Object Model (DOM). w3C; 2017. Available from:
https://www.w3.org/DOM/ [cited April 04,2017].

2

Fishkin R. The Beginners Guide to SEO.; 2015. Available from:
https://moz.com/beginners-guide-to-seo [cited April 04,2017].

3

Stack Overflow. Developer Survey Results 2016. Stack Exchange, Inc.; 2016.
Available from: http://stackoverflow.com/insights/survey/2016 [cited
April 04,2017].

4

Alimadadi S, Mesbah A, Pattabiraman K. Understanding Asynchronous
Interactions in Full-Stack JavaScript. In: 2016 IEEE/ACM 38th International
Conference on Software Engineering (ICSE); 2016. p. 1169–1180.

5

GitHub. The state of the Octoverse 2016. GitHub, Inc.; 2016. Available from:
https://octoverse.github.com/ [cited April 04,2017].

6

Arora S. JavaScript Frameworks: The Best 10 for Modern Web Apps; 2016.
Available from: http://noeticforce.com/best-Javascript-frameworks-for-singlepage-modern-web-applications [cited April 03,2017].

7

Wen B. 6 things you should know about Node.js; 2013. Available from:
http://www.javaworld.com/article/2079190/scripting-jvm-languages/6-thingsyou-should-know-about-node-js.html [cited April 03,2017].

8

Slant. What are the best full-stack Node.js frameworks? Slant; 2017. Available
from: https://www.slant.co/topics/2428/~full-stack-node-js-frameworks [cited
April 04,2017].

9

Brehm S. Isomorphic JavaScript: The Future of Web Apps; 2013. Available
from: http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/ [cited
April 04,2017].

10

Meteor. Meteor Documentation. METEOR; 2017. Available from:
http://docs.meteor.com/#/full/ [cited April 03,2017].

11

Turnbull D. Your First Meteor Application; 2014-2015. April 03,2017. Available
from: http://meteortips.com/.

12

Li S. Instant web applications with Meteor; 2013. Available from:
https://www.ibm.com/developerworks/library/wa-meteor-webapps/ [cited
April 04,2017].

13

Agüero F. 5 reasons why I choose React-Meteor for my projects; 2016.
Available from: http://fjaguero.com/blog/5-reasons-why-i-choose-reactmeteor-for-my-projects/ [cited April 04,2017].

31
14

Meteor. Blaze. METEOR; 2017. Available from: http://blazejs.org/ [cited
April 03,2017].

15

Facebook. React. Facebook; 2017. Available from:
https://facebook.github.io/react/docs/hello-world.html [cited April 03,2017].

16

Orsini L. What You Need To Know About Node.js; 2013. Available from:
http://readwrite.com/2013/11/07/what-you-need-to-know-about-nodejs/ [cited
April 04,2017].

17

Hennessy K. MeteorJS: Making Single Page Applications that are Fun to Build;
2014. Available from: https://blog.appliedis.com/2014/05/15/meteorjs-makingsingle-page-applications-that-are-fun-to-build/ [cited April 03,2017].

18

MongoDB Inc. Introduction to MongoDB. MongoDB Inc.; 2017. Available from:
https://docs.mongodb.com/manual/introduction/ [cited April 04,2017].

19

Facebook, Inc . Facebook/React Repository. Facebook Inc.; 2016. Available
from: https://github.com/facebook/react [cited April 05,2017].

20

Meteor Developer Group. Meteor/meteor Repository. METEOR; 2017.
Available from: https://github.com/meteor/meteor [cited April 05,2017].

21

Meteor Developer Group. Meteor/Blaze Repository. METEOR; 2017. Available
from: https://github.com/meteor/blaze [cited April 05,2017].

22

Stevens J. How slow is too slow in 2016?; 2016. Available from:
http://www.webdesignerdepot.com/2016/02/how-slow-is-too-slow-in-2016/
[cited April 05,2017].

Appendix 1
1 (1)

1
1
2
3
4
5
6
7
8
9
10
11
12

Meteor Packages

meteor
meteor
meteor
meteor
meteor
meteor
meteor
meteor
meteor
meteor
meteor
meteor

search // to search all the packages
seach accounts-password
search twbs
add twbs:bootstrap // this add bootstrap
add accounts-ui //user authentication packag
list //to see the installed packages
remove accounts-ui
add accounts-ui-unstyled
add momentjs:moment
add fortawesome:fontawesome
remove autopublish
remove insecure

Listing 11: Meteor Packages

Appendix 2
1 (1)

2
1
2
3
4
5
6
7
8
9
10
11
12

MongoDB Queries

//Information about user
Meteor.user().emails[0].address //to get emails
Meteor.user() //checkes loged in user in the console
Meteor.users.find().fetch() //dispaly the users object in the console
Meteor.user().username //to get the usename of user
Meteor.user()._id;
//Information about Collection
Players.remove({});Template
Players.find().fetch(); //to see collection data in the browser console
Players.find().count(); //to count collection data
Players.findOne()._id; //to get the id of the first data in the collection
Players.findOne(); //to see the first data information
Listing 12: MongoDB Queries

Appendix 3
1 (11)

3

3.1
1
2
3
4

Blaze and React Source Codes

Blaze Meteor Web Application Source code

//AddPlayer.js
import { Meteor } from 'meteor/meteor';
import { Template } from 'meteor/templating';
import './AddPlayer.html';

5
6
7
8

Template.addPlayerForm.events({
'submit form':function(event){
event.preventDefault();

9

var playerNameVar = event.target.playerName.value;
var playerValueVar = event.target.playerValue.value;
if(playerValueVar === ''){
playerValueVar = 0;
}else{
playerValueVar = parseInt(event.target.playerValue.value);
}

10
11
12
13
14
15
16
17

var currentUserId = Meteor.userId();
Meteor.call('createPlayer',playerNameVar,playerValueVar);
event.target.playerName.value = "";
event.target.playerValue.value = "";

18
19
20
21
22
23

}
});

4

Listing 13: Blaze AddPlayer.js source code
//Player.js
import { Meteor } from 'meteor/meteor';
import { Template } from 'meteor/templating';
import './Player.html';

1

Listing 14: Blaze Player.js source code
//PlayersBoard.js

1
2
3

2
3
4
5
6

import
import
import
import

{ Meteor } from 'meteor/meteor';
{ Template } from 'meteor/templating';
'./PlayersBoard.html';
{Players } from '../api/players';

7
8
9
10
11

Template.body.onCreated(function bodyOnCreated() {
Meteor.subscribe('players');
});

Appendix 3
2 (11)
12
13
14
15

16
17
18
19
20
21
22
23
24
25
26

Template.leaderboard.helpers({
player: function(){
var currentUserId = Meteor.userId();
return
Players.find({createdBy:currentUserId},{sort:{score:-1,name:1}});
},
count:function(){
return Players.find().count();
},
'selectedClass':function(){
var playerId = this._id;
var selectedPlayer = Session.get('selectedPlayer');
if(playerId == selectedPlayer){
return "selected";
}
},

27
28
29
30

'selectedPlayer':function(){
var selectedPlayer = Session.get('selectedPlayer');
return Players.findOne({_id:selectedPlayer});

31
32
33

}
});

34
35
36
37
38
39

Template.leaderboard.events({
'click .player':function(){
var playerId = this._id;
//console.log("You have clicked a player element");
Session.set('selectedPlayer', playerId);

40
41
42
43
44
45
46
47

//console.log(selectedPlayer);
//console.log(playerId);
},
'click .increment':function(){
var selectedPlayer = Session.get('selectedPlayer');
Meteor.call('updateScore', selectedPlayer, 5);
//Players.update({_id:selectedPlayer},{$inc:{score:5}});

48
49
50
51
52
53
54
55
56
57
58
59
60

},
'click .add__button':function(){
var selectedPlayer = Session.get('selectedPlayer');
Meteor.call('updateScore', selectedPlayer, 1);
},
'click .decrement':function(){
var selectedPlayer = Session.get('selectedPlayer');
Meteor.call('updateScore', selectedPlayer, -5);
Players.update({_id:selectedPlayer}, {$inc:{score:-5}});
},
'click .minus__button':function(){
var selectedPlayer = Session.get('selectedPlayer');

Appendix 3
3 (11)
Meteor.call('updateScore', selectedPlayer, -1);
//Players.update({_id:selectedPlayer}, {$inc:{score:-5}});
},
'click .remove,.delete__button':function(){
var selectedPlayer = Session.get('selectedPlayer');
if(confirm(`Are you sure you like to Delete?`)){
Players.remove({_id:selectedPlayer});

61
62
63
64
65
66
67
68
69
70
71
72

}
},
'click .removeAll':function(){
if(confirm("Are you sure you like to delete all players?")){

73

Meteor.call('removeAllPlayer');
}

74
75
76

}

77

});

78

1
2
3
4

1
2
3

Listing 15: Blaze PlayersBoard.js source code
//TitleBar.js
import { Meteor } from 'meteor/meteor';
import { Template } from 'meteor/templating';
import './TitleBar.html';
Listing 16: Blaze TitleBar.js source code
//players.js for MongoDB collection
import { Meteor } from 'meteor/meteor';
import { Mongo } from 'meteor/mongo';

4
5
6

import SimpleSchema from 'simpl-schema';
export const Players = new Mongo.Collection('players');

7
8

if(Meteor.isServer){

9
10
11
12

Meteor.publish('players',function(){
return Players.find({});
})

13
14

}

15
16
17
18
19

Meteor.methods({
'createPlayer': function(name,score){
// check(playerNameVar, String);
// check(playerValueVar, Number);

20
21

var currentUserId = Meteor.userId();

22
23
24

if(currentUserId){
new SimpleSchema({

Appendix 3
4 (11)
name: {
type: String,
min: 2
},
score:{
type:Number
}
}).validate({name,score});

25
26
27
28
29
30
31
32
33

Players.insert({
name,score,
visible:true,
createdBy:currentUserId,
createdAt:moment().format('DD/MM/YYYY h:mm a'),
});

34
35
36
37
38
39
40

}
},
'removePlayer':function(selectedPlayer){
check(selectedPlayer, String);
var currentUserId = Meteor.userId();
if(currentUserId){
Players.remove({_id:selectedPlayer,createdBy:currentUserId});
}

41
42
43
44
45
46
47
48
49

},
'removeAllPlayer':function(){
var currentUserId = Meteor.userId();
if(currentUserId){
Players.remove({});
}
},
'updateScore': function(selectedPlayer, scoreValue){
check(selectedPlayer, String);
check(scoreValue, Number);
var currentUserId = Meteor.userId();
if(currentUserId){
Players.update( { _id: selectedPlayer, createdBy: currentUserId },
{ $inc: {score: scoreValue} });
}

50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65

}

66
67

1

});
Listing 17: Blaze player.js collection source code
//Blaze Templates

2
3
4
5

// main.html to render all templates
<head>
<title>Blaze-Meteor Leaderboard</title>

Appendix 3
5 (11)
6
7
8
9
10
11

<meta
<meta
<meta
<meta
<meta
</head>

name="viewport" content="width=device-width, initial-scale=1">
charset="UTF-8">
name="description" content="React Meteor Web Application">
name="keywords" content="JavaScript, SCSS, Blaze, Meteor">
name="author" content="Asabeneh">

12
13
14
15
16

<body>
<div>
{{>TitleBar}}
{{>leaderboard}}

17
18
19

1
2
3
4
5
6

1
2
3
4
5

6

7
8
9
10

1
2
3
4
5
6
7
8
9

</div>
</body>
Listing 18: Blaze main.html source code
//main.js to import Template helpers and events
import { Template } from 'meteor/templating';
import './main.html';
import '../imports/ui/PlayersBoard.js';
import '../imports/ui/TitleBar.js';
import '../imports/ui/AddPlayer.js';
Listing 19: Blaze main.js source code
//addPlayerForm template
<template name = "addPlayerForm">
<div class = "item">
<form class = "form">
<input class = "form__input" type = "text" name = "playerName"
placeholder="Player Name" required />
<input type ="text" class = "form__input form__score" name =
"playerValue" placeholder="Value">
<input type = "submit" class ="button" value = "Add Player">
</form>
</div>
</template>
Listing 20: Blaze AddPlayerForm.html template source code
<template name= "Player">
<div>
<div class = "player">
<div class="player__stats">
<h3 class = "player__name"> player name</h3>
<p class = "player__stats">
player stat
</p>
</div>

10
11
12

<div class= "player__actions">
<button class = "button button__round">

Appendix 3
6 (11)
13
14
15
16
17
18

+1</button>
<button class = "button button__round">
-1</button>
<button class = "button button__round">
X</button>
</div>

19
20
21
22

1
2
3
4
5
6
7
8
9
10
11

12
13
14
15
16
17
18

19

20

21
22
23
24
25
26
27

28
29

</div>
</div>
</template>
Listing 21: Blaze Player.html template source code
<template name = "leaderboard">
<div>
{{#if currentUser}}
<div class ="wrapper">
<ul>
{{#if count}}
{{#each player}}
<div class = "itemClassName">
<div class = "player {{selectedClass}} {{selectedPlayer}}">
<div class = "player__stats">
<h3 class = "player__name"><i class="fa fa-user-circle fa-2x"
aria-hidden="true"></i> {{name}}</h3>
<p class = "player__stats">
{{calculatorPlayerPositions}}{{score}} points
</p>
<span>{{createdAt}}</span>
</div>
<div class = "player__actions">
<button class = "button button__round add__button" ><i class="fa
fa-plus fa-2x" aria-hidden="true"></i></button>
<button class = "button button__round minus__button" ><i class="fa
fa-minus fa-2x" aria-hidden="true"></i></button>
<button class = "button button__round delete__button"><i class="fa
fa-trash-o fa-2x" aria-hidden="true"></i></button>
</div>
</div>
</div>
{{/each}}
{{else}}
<div class ="item">
<p class = "item__message item__message__empty"> Add your first
player</p>
</div>
{{/if}}

30
31
32
33

{{#if selectedPlayer}}
<li> Selected Player: {{selectedPlayer.name}}</li>

Appendix 3
7 (11)
34
35
36
37
38
39
40

<li> Players:
<li>
<button class
<button class
<button class
<button class
</li>

{{count}}</li>
=
=
=
=

"btn
"btn
"btn
"btn

btn-success increment"> Give 5 Points</button>
btn-warning decrement"> Take 5 Points</button>
btn-danger remove">Remove Player</button>
btn-danger removeAll">Remove All Players</button>

41
42
43
44
45

{{else}}
{{#if count}}
<li>No player selected</li>
{{/if}}

46
47
48
49
50

{{/if}}
</ul>
{{ > addPlayerForm}}
</div>

51
52
53
54
55

56

{{else}}
<div class = "wrapper">
<div class ="item">
<p class = "item__message item__message__empty"> Login to see more
features</p>
</div>

57
58

</div>

59
60

{{/if}}

61
62
63

1
2
3
4
5
6
7
8
9
10

</div>
</template>
Listing 22: Blaze leaderbord template source code
// TitleBar template
<template name= "TitleBar">
<div class="title-bar">
<div class="wrapper">
<h1>Leader Board</h1>
<h2 class = "title-bar__subtitle">Blaze Meteor Web Application</h2>
{{>loginButtons}}
</div>
</div>
</template>
Listing 23: Blaze TitleBar.html template source code

Appendix 3
8 (11)
3.2
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24

25

26
27
28
29
30
31

1
2
3

React Meteor Web Application Source code

//AddPlayer.js
import React from 'react';
import {Players} from './../api/players';
import moment from 'moment';
export default class AddPlayer extends React.Component{
handleSubmit(e){
e.preventDefault();
let playerName = e.target.playerName.value;
let playerValue = e.target.playerValue.value;
if(playerName){
e.target.playerName.value = "";
e.target.playerValue.value = "";
Players.insert({
name:playerName,
score:Number(playerValue),
createdAt:moment().format('DD/MM/YYYY h:mm a')
});
}
}
render(){
return(
<div className = "item">
<form className = "form" onSubmit = {this.handleSubmit.bind(this)}>
<input className = "form__input" type = "text" name =
"playerName" placeholder = "Player name"/>
<input type ="text" className = "form__input form__score" name =
"playerValue" size = "5" placeholder="Value" />
<button className = "button"> Add Player</button>
</form>
</div>
)
}
}
Listing 24: React AddPlayer.js component source code
//Player.js
import React from 'react';
import {Players} from './../api/players';

4
5
6
7
8
9
10
11
12
13

export default class Player extends React.Component{
render(){
let itemClassName = `item item--position-${this.props.player.rank}`;
return(
<div key = {this.props.player._id} className = {itemClassName}>
<div className = "player">
<div className="player__stats">
<h3 className = "player__name"> {this.props.player.name}</h3>
<p className = "player__stats">

Appendix 3
9 (11)
{this.props.player.position} place - {this.props.player.score}
points
</p>
<span>{this.props.player.createdAt}</span>
</div>
<div className = "player__actions">
<button className = "button button__round add__button" onClick =
{()=>Players.update({_id:this.props.player._id},{$inc:{score:1}})}>+
<i className="fa fa-plus fa-2x" aria-hidden="true"></i>
</button>
<button className = "button button__round minus__button" onClick =
{()=>Players.update({_id:this.props.player._id},{$inc:{score:-1}})}>
-<i className="fa fa-minus fa-2x" aria-hidden="true"></i></button>
<button className = "button button__round delete__button" onClick =
{()=>Players.remove({_id:this.props.player._id})}>
x <i className="fa fa-trash-o fa-2x" aria-hidden="true"></i></button>
</div>

14

15
16
17
18
19

20
21
22

23
24

25
26
27

</div>
</div>

28
29
30

);

31
32
33

}
}

34
35
36

Player.propTypes = {
player:React.PropTypes.object.isRequired,

37
38

1

}
Listing 25: React Player.js component source code
//PlayersList

2
3
4
5
6
7
8
9
10
11

12
13
14
15
16
17
18

import React from 'react';
import FlipMove from 'react-flip-move';
import Player from './Player';
export default class PlayerList extends React.Component{
renderPlayers(){
if(this.props.players.length ===0){
return (
<div className ="item">
<p className = "item__message item__message__empty"> Add your first
player</p>
</div>
);
}
else{
return this.props.players.map((player) =>{
return <Player key = {player._id} player = {player}/>
});

Appendix 3
10 (11)
19
20
21
22
23
24
25

26
27
28
29
30
31
32
33
34

1
2
3
4
5
6
7
8
9
10

11
12
13
14
15
16
17
18
19
20
21
22

1
2
3
4
5
6

}
}
render(){
return(
<div>
<FlipMove duration={750} easing="ease-out" maintainContainerHeight
={true}>
{this.renderPlayers()}
</FlipMove>
</div>
)
}
}
PlayerList.propTypes = {
players:React.PropTypes.array.isRequired
}
Listing 26: React PlaeyersList.js source code
//PlayersBoard
import React from 'react';
import TitleBar from './TitleBar';
import AddPlayer from './AddPlayer';
import PlayerList from './PlayerList';
export default class PlayersBoard extends React.Component{
render(){
return(
<div>
<TitleBar title = {this.props.title} subtitle = "React Meteor Web
Application"/>
<div className = "wrapper">
<PlayerList players = {this.props.players}/>
<AddPlayer/>
</div>
</div>
)
}
}
PlayersBoard.propTypes = {
title:React.PropTypes.string.isRequired,
players:React.PropTypes.array.isRequired,
}
Listing 27: React PlaeyersBoard.js source code
//TitleBar.js
import React from 'react';
export default class TitleBar extends React.Component{
rendereSubtitle(){
if(this.props.subtitle){
return <h2 className = "title-bar__subtitle">
{this.props.subtitle}</h2>;

Appendix 3
11 (11)
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23

}
}
render(){
return(
<div className = "title-bar">
<div className = "wrapper">
<h1>{this.props.title}</h1>
{this.rendereSubtitle()}
</div>
</div>
)
}
}
TitleBar.propTypes = {
title:React.PropTypes.string.isRequired,
subtitle:React.PropTypes.string
};
Listing 28: React TitleBar.js source code

